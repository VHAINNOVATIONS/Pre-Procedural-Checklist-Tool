--------------------------------------------------------
--  File created - Tuesday-January-22-2013   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence SEQ_CHECKLIST_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_CHECKLIST_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 1361 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_DS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_DS_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 490 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_FX_AUDIT_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_FX_AUDIT_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 13540564 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_IC_RANGE_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_IC_RANGE_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 699 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_IC_STATE_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_IC_STATE_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 697 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ITEM_COMPONENT_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_ITEM_COMPONENT_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 1346 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ITEM_GROUP_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_ITEM_GROUP_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 508 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ITEM_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_ITEM_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 1176 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_OS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_OS_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 649 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_PAT_CL_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_PAT_CL_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 6733 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_PAT_ITEM_COMPONENT_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_PAT_ITEM_COMPONENT_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_PAT_ITEM_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_PAT_ITEM_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 19803 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_SERVICE_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_SERVICE_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 407 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_TS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "VAPPCT"."SEQ_TS_ID"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 601 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table FX_AUDIT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."FX_AUDIT" 
   (	"CLIENT_IP" VARCHAR2(20 BYTE), 
	"USER_ID" NUMBER, 
	"AUDIT_DATE" DATE, 
	"AUDIT_NAME" VARCHAR2(255 BYTE), 
	"STATUS_ID" NUMBER, 
	"AUDIT_DATA" CLOB, 
	"FX_AUDIT_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" 
 LOB ("AUDIT_DATA") STORE AS BASICFILE "SYS_LOB0000020053C00006$$"(
  TABLESPACE "VAPPCT" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;

   COMMENT ON COLUMN "VAPPCT"."FX_AUDIT"."CLIENT_IP" IS 'client ip of the end user';
   COMMENT ON COLUMN "VAPPCT"."FX_AUDIT"."USER_ID" IS 'user id of the end user, 0 if not logged in';
   COMMENT ON COLUMN "VAPPCT"."FX_AUDIT"."AUDIT_DATE" IS 'date of the audit';
   COMMENT ON COLUMN "VAPPCT"."FX_AUDIT"."AUDIT_NAME" IS 'name of the audit';
   COMMENT ON COLUMN "VAPPCT"."FX_AUDIT"."STATUS_ID" IS 'link to stat_state table; matches state_id column';
   COMMENT ON COLUMN "VAPPCT"."FX_AUDIT"."AUDIT_DATA" IS 'audit xml';
   COMMENT ON COLUMN "VAPPCT"."FX_AUDIT"."FX_AUDIT_ID" IS 'Unique ID for the audit record.';
--------------------------------------------------------
--  DDL for Table FX_PCK_STATUS
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."FX_PCK_STATUS" 
   (	"PCK_STATUS_ID" NUMBER(4,0), 
	"STATE_ID" NUMBER(1,0), 
	"PCK_STATUS_COMMENT" VARCHAR2(255 BYTE), 
	"PCK_STATUS_LABEL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."FX_PCK_STATUS"."PCK_STATUS_ID" IS 'unique numeric identifier for a package status';
   COMMENT ON COLUMN "VAPPCT"."FX_PCK_STATUS"."STATE_ID" IS 'link to stat state table';
   COMMENT ON COLUMN "VAPPCT"."FX_PCK_STATUS"."PCK_STATUS_COMMENT" IS 'text value stating a user friendly status comment';
   COMMENT ON COLUMN "VAPPCT"."FX_PCK_STATUS"."PCK_STATUS_LABEL" IS 'unique status label for this message';
--------------------------------------------------------
--  DDL for Table FX_SESSION
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."FX_SESSION" 
   (	"FX_SESSION_ID" VARCHAR2(255 BYTE), 
	"ASP_SESSION_ID" VARCHAR2(255 BYTE), 
	"CLIENT_IP" VARCHAR2(20 BYTE), 
	"USER_ID" VARCHAR2(20 BYTE), 
	"SESSION_CREATED" DATE, 
	"SESSION_UPDATED" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Table FX_VAPPCTCOMM_EVENT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."FX_VAPPCTCOMM_EVENT" 
   (	"EVENT_NAME" VARCHAR2(1000 BYTE), 
	"EVENT_DETAILS" VARCHAR2(4000 BYTE), 
	"EVENT_DATE" DATE, 
	"IP_ADDRESS" VARCHAR2(1000 BYTE), 
	"USER_ID" NUMBER, 
	"SESSION_ID" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."FX_VAPPCTCOMM_EVENT"."EVENT_NAME" IS 'communicator event name';
   COMMENT ON COLUMN "VAPPCT"."FX_VAPPCTCOMM_EVENT"."EVENT_DETAILS" IS 'communicator event details';
   COMMENT ON COLUMN "VAPPCT"."FX_VAPPCTCOMM_EVENT"."EVENT_DATE" IS 'communicator event date';
   COMMENT ON COLUMN "VAPPCT"."FX_VAPPCTCOMM_EVENT"."IP_ADDRESS" IS 'ip address of the client';
   COMMENT ON COLUMN "VAPPCT"."FX_VAPPCTCOMM_EVENT"."USER_ID" IS 'user id that the event occurred under';
   COMMENT ON COLUMN "VAPPCT"."FX_VAPPCTCOMM_EVENT"."SESSION_ID" IS 'session id of the communicator event';
--------------------------------------------------------
--  DDL for Table STAT_ACTIVE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_ACTIVE" 
   (	"ACTIVE_ID" NUMBER(1,0), 
	"ACTIVE_LABEL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_ACTIVE"."ACTIVE_ID" IS 'numeric value that uniquely identifies an active record';
   COMMENT ON COLUMN "VAPPCT"."STAT_ACTIVE"."ACTIVE_LABEL" IS 'text value uniquely identifying an active record';
--------------------------------------------------------
--  DDL for Table STAT_CHECKLIST_STATE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_CHECKLIST_STATE" 
   (	"CHECKLIST_STATE_ID" NUMBER(1,0), 
	"CHECKLIST_STATE_LABEL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_CHECKLIST_STATE"."CHECKLIST_STATE_ID" IS 'numeric value uniquely identifying a checklist state';
   COMMENT ON COLUMN "VAPPCT"."STAT_CHECKLIST_STATE"."CHECKLIST_STATE_LABEL" IS 'text value uniquely identifying a checklist state';
--------------------------------------------------------
--  DDL for Table STAT_DS_DEFINITION
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_DS_DEFINITION" 
   (	"DS_DEFINITION_ID" NUMBER(2,0), 
	"DS_DEFINITION_LABEL" VARCHAR2(255 BYTE), 
	"STATE_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_DS_DEFINITION"."DS_DEFINITION_ID" IS 'unique numeric identifier for a decision state definition';
   COMMENT ON COLUMN "VAPPCT"."STAT_DS_DEFINITION"."DS_DEFINITION_LABEL" IS 'unique text identifier for a decision state definition';
   COMMENT ON COLUMN "VAPPCT"."STAT_DS_DEFINITION"."STATE_ID" IS 'link to state table';
--------------------------------------------------------
--  DDL for Table STAT_ITEM_TYPE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_ITEM_TYPE" 
   (	"ITEM_TYPE_ID" NUMBER(2,0), 
	"ITEM_TYPE_LABEL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_ITEM_TYPE"."ITEM_TYPE_ID" IS 'unique numeric identifier for an item type';
   COMMENT ON COLUMN "VAPPCT"."STAT_ITEM_TYPE"."ITEM_TYPE_LABEL" IS 'unique text identifier for an item type';
--------------------------------------------------------
--  DDL for Table STAT_MENU_OPTION
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_MENU_OPTION" 
   (	"MENU_OPTION_ID" NUMBER(2,0), 
	"MENU_OPTION_LABEL" VARCHAR2(255 BYTE), 
	"MENU_OPTION_URL" VARCHAR2(255 BYTE), 
	"SORT_ORDER" NUMBER(*,0), 
	"MENU_LEVEL" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_MENU_OPTION"."MENU_OPTION_ID" IS 'unique numeric identifier for a menu option';
   COMMENT ON COLUMN "VAPPCT"."STAT_MENU_OPTION"."MENU_OPTION_LABEL" IS 'unique text identifier for a menu option';
   COMMENT ON COLUMN "VAPPCT"."STAT_MENU_OPTION"."MENU_OPTION_URL" IS 'text of the URL address the menu option navigates to';
   COMMENT ON COLUMN "VAPPCT"."STAT_MENU_OPTION"."SORT_ORDER" IS 'sort order of the menu option for display';
   COMMENT ON COLUMN "VAPPCT"."STAT_MENU_OPTION"."MENU_LEVEL" IS '1=top level item, 2=secondary menu item';
--------------------------------------------------------
--  DDL for Table STAT_OS_DEFINITION
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_OS_DEFINITION" 
   (	"OS_DEFINITION_ID" NUMBER(2,0), 
	"OS_DEFINITION_LABEL" VARCHAR2(255 BYTE), 
	"STATE_ID" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_OS_DEFINITION"."OS_DEFINITION_ID" IS 'unique numeric identifier for an outcome state definition';
   COMMENT ON COLUMN "VAPPCT"."STAT_OS_DEFINITION"."OS_DEFINITION_LABEL" IS 'unique text identifier for an outcome state definition';
   COMMENT ON COLUMN "VAPPCT"."STAT_OS_DEFINITION"."STATE_ID" IS 'link to state table';
--------------------------------------------------------
--  DDL for Table STAT_PLACE_HOLDER
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_PLACE_HOLDER" 
   (	"PLACE_HOLDER_ID" NUMBER(3,0), 
	"PLACE_HOLDER_LABEL" VARCHAR2(50 BYTE), 
	"PLACE_HOLDER_SYNTAX" VARCHAR2(50 BYTE), 
	"PH_PARENT_ID" NUMBER(3,0), 
	"IS_GROUP" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_PLACE_HOLDER"."PLACE_HOLDER_ID" IS 'number value uniquely identifying a place holder';
   COMMENT ON COLUMN "VAPPCT"."STAT_PLACE_HOLDER"."PLACE_HOLDER_LABEL" IS 'varchar value uniquely identifying a place holder';
   COMMENT ON COLUMN "VAPPCT"."STAT_PLACE_HOLDER"."PLACE_HOLDER_SYNTAX" IS 'expression syntax for the place holder';
   COMMENT ON COLUMN "VAPPCT"."STAT_PLACE_HOLDER"."PH_PARENT_ID" IS 'FK to stat_place_holder table';
   COMMENT ON COLUMN "VAPPCT"."STAT_PLACE_HOLDER"."IS_GROUP" IS 'FK to stat_true_false table';
--------------------------------------------------------
--  DDL for Table STAT_SEX
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_SEX" 
   (	"SEX_ID" NUMBER(1,0), 
	"SEX_LABEL" VARCHAR2(255 BYTE), 
	"SEX_ABBREVIATION" VARCHAR2(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_SEX"."SEX_ID" IS 'numeric value uniquely identifying a sex';
   COMMENT ON COLUMN "VAPPCT"."STAT_SEX"."SEX_LABEL" IS 'text value uniquely identifying a sex';
   COMMENT ON COLUMN "VAPPCT"."STAT_SEX"."SEX_ABBREVIATION" IS 'text value stating the abbreviation of a sex';
--------------------------------------------------------
--  DDL for Table STAT_SOURCE_TYPE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_SOURCE_TYPE" 
   (	"SOURCE_TYPE_ID" NUMBER(1,0), 
	"SOURCE_TYPE_LABEL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_SOURCE_TYPE"."SOURCE_TYPE_ID" IS 'numeric value uniquely identifying a source type';
   COMMENT ON COLUMN "VAPPCT"."STAT_SOURCE_TYPE"."SOURCE_TYPE_LABEL" IS 'text value uniquely identifying a source type';
--------------------------------------------------------
--  DDL for Table STAT_STATE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_STATE" 
   (	"STATE_ID" NUMBER(1,0), 
	"STATE_LABEL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_STATE"."STATE_ID" IS 'unique numeric identifier for a state; if something is changed please udpate PCK_COMMON;';
   COMMENT ON COLUMN "VAPPCT"."STAT_STATE"."STATE_LABEL" IS 'unique text identifier for a state, if something is changed please update PCK_COMMON';
--------------------------------------------------------
--  DDL for Table STAT_TIME_UNIT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_TIME_UNIT" 
   (	"TIME_UNIT_ID" NUMBER(2,0), 
	"TIME_UNIT_LABEL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_TIME_UNIT"."TIME_UNIT_ID" IS 'numeric value uniquely identifying a time unit';
   COMMENT ON COLUMN "VAPPCT"."STAT_TIME_UNIT"."TIME_UNIT_LABEL" IS 'text value uniquely identifying a time unit';
--------------------------------------------------------
--  DDL for Table STAT_TRUE_FALSE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_TRUE_FALSE" 
   (	"TRUE_FALSE_ID" NUMBER(1,0), 
	"TRUE_LABEL" VARCHAR2(20 BYTE), 
	"ACTIVE_LABEL" VARCHAR2(20 BYTE), 
	"DEFAULT_LABEL" VARCHAR2(20 BYTE), 
	"YES_LABEL" VARCHAR2(20 BYTE), 
	"ENABLE_LABEL" VARCHAR2(20 BYTE), 
	"OVERRIDE_LABEL" VARCHAR2(20 BYTE), 
	"SELECTED_LABEL" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_TRUE_FALSE"."TRUE_FALSE_ID" IS 'unique number identifier for a true false record';
   COMMENT ON COLUMN "VAPPCT"."STAT_TRUE_FALSE"."TRUE_LABEL" IS 'unique varchar identifier for a true false record';
   COMMENT ON COLUMN "VAPPCT"."STAT_TRUE_FALSE"."ACTIVE_LABEL" IS 'active synonym for true false record';
   COMMENT ON COLUMN "VAPPCT"."STAT_TRUE_FALSE"."DEFAULT_LABEL" IS 'default synonym for true false record';
   COMMENT ON COLUMN "VAPPCT"."STAT_TRUE_FALSE"."YES_LABEL" IS 'yes synonym for true false record';
   COMMENT ON COLUMN "VAPPCT"."STAT_TRUE_FALSE"."ENABLE_LABEL" IS 'enable synonym for true false record';
   COMMENT ON COLUMN "VAPPCT"."STAT_TRUE_FALSE"."OVERRIDE_LABEL" IS 'override synonym for true false record';
   COMMENT ON COLUMN "VAPPCT"."STAT_TRUE_FALSE"."SELECTED_LABEL" IS 'selected synonym for true false record';
--------------------------------------------------------
--  DDL for Table STAT_TS_DEFINITION
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_TS_DEFINITION" 
   (	"TS_DEFINITION_ID" NUMBER(2,0), 
	"TS_DEFINITION_LABEL" VARCHAR2(255 BYTE), 
	"STATE_ID" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_TS_DEFINITION"."TS_DEFINITION_ID" IS 'unique numeric identifier for a temporal state definition';
   COMMENT ON COLUMN "VAPPCT"."STAT_TS_DEFINITION"."TS_DEFINITION_LABEL" IS 'unique text indentifier for a temporal state definition';
   COMMENT ON COLUMN "VAPPCT"."STAT_TS_DEFINITION"."STATE_ID" IS 'link to state table';
--------------------------------------------------------
--  DDL for Table STAT_UR_MO
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_UR_MO" 
   (	"USER_ROLE_ID" NUMBER(1,0), 
	"MENU_OPTION_ID" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_UR_MO"."USER_ROLE_ID" IS 'link to user role table';
   COMMENT ON COLUMN "VAPPCT"."STAT_UR_MO"."MENU_OPTION_ID" IS 'link to menu option table';
--------------------------------------------------------
--  DDL for Table STAT_USER_ROLE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_USER_ROLE" 
   (	"USER_ROLE_ID" NUMBER(1,0), 
	"USER_ROLE_LABEL" VARCHAR2(255 BYTE), 
	"SECURITY_KEY" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_USER_ROLE"."USER_ROLE_ID" IS 'numeric value uniquely identifying a user role';
   COMMENT ON COLUMN "VAPPCT"."STAT_USER_ROLE"."USER_ROLE_LABEL" IS 'text value uniquely identifying a user role';
   COMMENT ON COLUMN "VAPPCT"."STAT_USER_ROLE"."SECURITY_KEY" IS 'security key associated with this user role';
--------------------------------------------------------
--  DDL for Table STAT_XFER_SYSTEM
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."STAT_XFER_SYSTEM" 
   (	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_SYSTEM" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."STAT_XFER_SYSTEM"."XFER_SYSTEM_ID" IS 'unique id of the external transfer system';
   COMMENT ON COLUMN "VAPPCT"."STAT_XFER_SYSTEM"."XFER_SYSTEM" IS 'name of the external system  which we transfer data from';
--------------------------------------------------------
--  DDL for Table USR_CHECKLIST
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_CHECKLIST" 
   (	"CHECKLIST_ID" NUMBER(9,0), 
	"CHECKLIST_LABEL" VARCHAR2(255 BYTE), 
	"SERVICE_ID" NUMBER(9,0), 
	"CHECKLIST_DESCRIPTION" VARCHAR2(4000 BYTE), 
	"ACTIVE_ID" NUMBER(1,0), 
	"NOTE_TITLE_TAG" VARCHAR2(4000 BYTE), 
	"NOTE_TITLE_CLINIC_ID" NUMBER, 
	"CREATED_BY" NUMBER, 
	"DATE_CREATED" DATE, 
	"LAST_UPDATED_BY" NUMBER, 
	"DATE_LAST_UPDATED" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_CHECKLIST"."CHECKLIST_ID" IS 'numeric value uniquely identifying a checklist';
   COMMENT ON COLUMN "VAPPCT"."USR_CHECKLIST"."CHECKLIST_LABEL" IS 'text value uniquely identifying a checklist';
   COMMENT ON COLUMN "VAPPCT"."USR_CHECKLIST"."SERVICE_ID" IS 'fk to usr service table';
   COMMENT ON COLUMN "VAPPCT"."USR_CHECKLIST"."CHECKLIST_DESCRIPTION" IS 'text value describing the description of the checklist';
   COMMENT ON COLUMN "VAPPCT"."USR_CHECKLIST"."ACTIVE_ID" IS 'link to active table';
   COMMENT ON COLUMN "VAPPCT"."USR_CHECKLIST"."NOTE_TITLE_TAG" IS 'FK to utl note title table';
   COMMENT ON COLUMN "VAPPCT"."USR_CHECKLIST"."NOTE_TITLE_CLINIC_ID" IS 'foreign key to the note_title table. each checklist is associated with one note title.';
--------------------------------------------------------
--  DDL for Table USR_CLI_DS
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_CLI_DS" 
   (	"CHECKLIST_ID" NUMBER(9,0), 
	"ITEM_ID" NUMBER(9,0), 
	"DS_ID" NUMBER(9,0), 
	"ACTIVE_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_CLI_DS"."CHECKLIST_ID" IS 'link to checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_DS"."ITEM_ID" IS 'link to item table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_DS"."DS_ID" IS 'link to decision state table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_DS"."ACTIVE_ID" IS 'FK to STAT_ACTIVE';
--------------------------------------------------------
--  DDL for Table USR_CLI_DS_EDIT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_CLI_DS_EDIT" 
   (	"CHECKLIST_ID" NUMBER(9,0), 
	"ITEM_ID" NUMBER(9,0), 
	"USER_ROLE_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_CLI_DS_EDIT"."CHECKLIST_ID" IS 'link to checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_DS_EDIT"."ITEM_ID" IS 'link item table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_DS_EDIT"."USER_ROLE_ID" IS 'link to user role table';
--------------------------------------------------------
--  DDL for Table USR_CLI_OS
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_CLI_OS" 
   (	"CHECKLIST_ID" NUMBER(9,0), 
	"ITEM_ID" NUMBER(9,0), 
	"OS_ID" NUMBER(9,0), 
	"ACTIVE_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_CLI_OS"."CHECKLIST_ID" IS 'link to checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_OS"."ITEM_ID" IS 'link to item table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_OS"."OS_ID" IS 'link to outcome table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_OS"."ACTIVE_ID" IS 'FK to STAT_ACTIVE';
--------------------------------------------------------
--  DDL for Table USR_CLI_TS
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_CLI_TS" 
   (	"CHECKLIST_ID" NUMBER(9,0), 
	"ITEM_ID" NUMBER(9,0), 
	"TS_ID" NUMBER(9,0), 
	"ACTIVE_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_CLI_TS"."CHECKLIST_ID" IS 'link to checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_TS"."ITEM_ID" IS 'link to item table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_TS"."TS_ID" IS 'link to temporal state table';
   COMMENT ON COLUMN "VAPPCT"."USR_CLI_TS"."ACTIVE_ID" IS 'FK to STAT_ACTIVE';
--------------------------------------------------------
--  DDL for Table USR_CL_CLOSEABLE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_CL_CLOSEABLE" 
   (	"CHECKLIST_ID" NUMBER(9,0), 
	"USER_ROLE_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_CL_CLOSEABLE"."CHECKLIST_ID" IS 'link to checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_CL_CLOSEABLE"."USER_ROLE_ID" IS 'link to user role table';
--------------------------------------------------------
--  DDL for Table USR_CL_ITEM
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_CL_ITEM" 
   (	"CHECKLIST_ID" NUMBER(9,0), 
	"ITEM_ID" NUMBER(9,0), 
	"CLI_TS_TIME_PERIOD" NUMBER(4,0), 
	"TIME_UNIT_ID" NUMBER(1,0), 
	"SORT_ORDER" NUMBER(3,0), 
	"ACTIVE_ID" NUMBER(1,0), 
	"LOGIC" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_CL_ITEM"."CHECKLIST_ID" IS 'link to checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_CL_ITEM"."ITEM_ID" IS 'link to item table';
   COMMENT ON COLUMN "VAPPCT"."USR_CL_ITEM"."CLI_TS_TIME_PERIOD" IS 'numeric value stating the amount of time units the item is valid';
   COMMENT ON COLUMN "VAPPCT"."USR_CL_ITEM"."TIME_UNIT_ID" IS 'link to stat time unit table';
   COMMENT ON COLUMN "VAPPCT"."USR_CL_ITEM"."SORT_ORDER" IS 'numeric value stating the sort order index of the item';
   COMMENT ON COLUMN "VAPPCT"."USR_CL_ITEM"."ACTIVE_ID" IS 'link to active table';
   COMMENT ON COLUMN "VAPPCT"."USR_CL_ITEM"."LOGIC" IS 'logic for the item';
--------------------------------------------------------
--  DDL for Table USR_CL_READ_ONLY
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_CL_READ_ONLY" 
   (	"CHECKLIST_ID" NUMBER(9,0), 
	"USER_ROLE_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_CL_READ_ONLY"."CHECKLIST_ID" IS 'link to checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_CL_READ_ONLY"."USER_ROLE_ID" IS 'link to user role table';
--------------------------------------------------------
--  DDL for Table USR_CL_TIU
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_CL_TIU" 
   (	"CHECKLIST_ID" NUMBER, 
	"USER_ROLE_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Table USR_CL_VIEWABLE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_CL_VIEWABLE" 
   (	"CHECKLIST_ID" NUMBER(9,0), 
	"USER_ROLE_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_CL_VIEWABLE"."CHECKLIST_ID" IS 'link to checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_CL_VIEWABLE"."USER_ROLE_ID" IS 'link to user role table';
--------------------------------------------------------
--  DDL for Table USR_DECISION_STATE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_DECISION_STATE" 
   (	"DS_ID" NUMBER(9,0), 
	"DS_LABEL" VARCHAR2(50 BYTE), 
	"DS_DEFINITION_ID" NUMBER(2,0), 
	"IS_ACTIVE" NUMBER(1,0), 
	"IS_DEFAULT" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_DECISION_STATE"."DS_ID" IS 'unique numeric identifier for a decision state';
   COMMENT ON COLUMN "VAPPCT"."USR_DECISION_STATE"."DS_LABEL" IS 'unique text identifier for a decision state';
   COMMENT ON COLUMN "VAPPCT"."USR_DECISION_STATE"."DS_DEFINITION_ID" IS 'link to decision state definition table';
   COMMENT ON COLUMN "VAPPCT"."USR_DECISION_STATE"."IS_ACTIVE" IS 'fk to stat true false table';
   COMMENT ON COLUMN "VAPPCT"."USR_DECISION_STATE"."IS_DEFAULT" IS 'fk to stat true false table';
--------------------------------------------------------
--  DDL for Table USR_IC_RANGE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_IC_RANGE" 
   (	"ITEM_ID" NUMBER(9,0), 
	"ITEM_COMPONENT_ID" NUMBER(9,0), 
	"IC_RANGE_ID" NUMBER(9,0), 
	"UNITS" VARCHAR2(255 BYTE), 
	"LEGAL_MIN" NUMBER, 
	"CRITICAL_LOW" NUMBER, 
	"LOW" NUMBER, 
	"HIGH" NUMBER, 
	"CRITICAL_HIGH" NUMBER, 
	"LEGAL_MAX" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_IC_RANGE"."ITEM_ID" IS 'link to item table';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_RANGE"."ITEM_COMPONENT_ID" IS 'link to item component table';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_RANGE"."IC_RANGE_ID" IS 'numeric value uniquely identifying an item component range';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_RANGE"."UNITS" IS 'text value stating the units for an item component range';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_RANGE"."LEGAL_MIN" IS 'numeric value stating the legal min starting point';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_RANGE"."CRITICAL_LOW" IS 'numeric value stating the critical low starting point';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_RANGE"."LOW" IS 'numeric value stating the low starting point';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_RANGE"."HIGH" IS 'numeric value stating the high starting point';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_RANGE"."CRITICAL_HIGH" IS 'numeric value stating the critical high starting ponit';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_RANGE"."LEGAL_MAX" IS 'numeric value stating the legal max starting point';
--------------------------------------------------------
--  DDL for Table USR_IC_STATE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_IC_STATE" 
   (	"ITEM_ID" NUMBER(9,0), 
	"ITEM_COMPONENT_ID" NUMBER(9,0), 
	"IC_STATE_ID" NUMBER(9,0), 
	"STATE_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_IC_STATE"."ITEM_ID" IS 'link to item table';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_STATE"."ITEM_COMPONENT_ID" IS 'link to item component table';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_STATE"."IC_STATE_ID" IS 'numeric value uniquely identifying a item component state';
   COMMENT ON COLUMN "VAPPCT"."USR_IC_STATE"."STATE_ID" IS 'link to state table';
--------------------------------------------------------
--  DDL for Table USR_ITEM
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_ITEM" 
   (	"ITEM_ID" NUMBER(9,0), 
	"ITEM_LABEL" VARCHAR2(255 BYTE), 
	"ITEM_GROUP_ID" NUMBER(9,0), 
	"ITEM_DESCRIPTION" VARCHAR2(4000 BYTE), 
	"LOOKBACK_TIME" NUMBER(4,0), 
	"ACTIVE_ID" NUMBER(1,0), 
	"ITEM_TYPE_ID" NUMBER(2,0), 
	"MAP_ID" VARCHAR2(4000 BYTE), 
	"CREATED_BY" NUMBER, 
	"DATE_CREATED" DATE, 
	"LAST_UPDATED_BY" NUMBER, 
	"DATE_LAST_UPDATED" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_ITEM"."ITEM_ID" IS 'unique numeric identifier for an item';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM"."ITEM_LABEL" IS 'unique text identifier for an item';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM"."ITEM_GROUP_ID" IS 'FK to USR_ITEM_GROUP table';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM"."ITEM_DESCRIPTION" IS 'text value stating the description for the item';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM"."LOOKBACK_TIME" IS 'numeric value stating how many days to look-back for historical item data';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM"."ACTIVE_ID" IS 'FK to STAT_ACTIVE table';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM"."ITEM_TYPE_ID" IS 'FK to STAT_ITEM_TYPE table';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM"."MAP_ID" IS 'Corresponding ID in vista for this item';
--------------------------------------------------------
--  DDL for Table USR_ITEM_COLLECTION
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_ITEM_COLLECTION" 
   (	"COLLECTION_ITEM_ID" NUMBER(9,0), 
	"ITEM_ID" NUMBER(9,0), 
	"SORT_ORDER" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_COLLECTION"."COLLECTION_ITEM_ID" IS 'FK to usr_item table, this is the parent item id';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_COLLECTION"."ITEM_ID" IS 'FK to usr_item table, this is the child item id';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_COLLECTION"."SORT_ORDER" IS 'sort order of the child item in the collection';
--------------------------------------------------------
--  DDL for Table USR_ITEM_COMPONENT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_ITEM_COMPONENT" 
   (	"ITEM_ID" NUMBER(9,0), 
	"ITEM_COMPONENT_ID" NUMBER(9,0), 
	"ITEM_COMPONENT_LABEL" VARCHAR2(255 BYTE), 
	"SORT_ORDER" NUMBER(2,0), 
	"ACTIVE_ID" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_COMPONENT"."ITEM_ID" IS 'link to item table';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_COMPONENT"."ITEM_COMPONENT_ID" IS 'numeric value uniquely identifying an item component';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_COMPONENT"."ITEM_COMPONENT_LABEL" IS 'text value uniquely identifying an item component';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_COMPONENT"."SORT_ORDER" IS 'numeric value stating which index to display the component at in an item';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_COMPONENT"."ACTIVE_ID" IS 'link to active table';
--------------------------------------------------------
--  DDL for Table USR_ITEM_GROUP
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_ITEM_GROUP" 
   (	"ITEM_GROUP_ID" NUMBER(9,0), 
	"ITEM_GROUP_LABEL" VARCHAR2(50 BYTE), 
	"IS_ACTIVE" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_GROUP"."ITEM_GROUP_ID" IS 'unique numeric identifier for a display group';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_GROUP"."ITEM_GROUP_LABEL" IS 'unique text identifier for a display group';
   COMMENT ON COLUMN "VAPPCT"."USR_ITEM_GROUP"."IS_ACTIVE" IS 'FK to stat true false table';
--------------------------------------------------------
--  DDL for Table USR_OUTCOME_STATE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_OUTCOME_STATE" 
   (	"OS_ID" NUMBER(9,0), 
	"OS_LABEL" VARCHAR2(50 BYTE), 
	"OS_DEFINITION_ID" NUMBER(2,0), 
	"IS_ACTIVE" NUMBER(1,0), 
	"IS_DEFAULT" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_OUTCOME_STATE"."OS_ID" IS 'unique numeric identifier for an outcome state';
   COMMENT ON COLUMN "VAPPCT"."USR_OUTCOME_STATE"."OS_LABEL" IS 'unique text identifier for an outcome state';
   COMMENT ON COLUMN "VAPPCT"."USR_OUTCOME_STATE"."OS_DEFINITION_ID" IS 'link to outcome state definition table';
   COMMENT ON COLUMN "VAPPCT"."USR_OUTCOME_STATE"."IS_ACTIVE" IS 'fk to stat true false table';
   COMMENT ON COLUMN "VAPPCT"."USR_OUTCOME_STATE"."IS_DEFAULT" IS 'fk to stat true false table';
--------------------------------------------------------
--  DDL for Table USR_PAT_CHECKLIST
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_PAT_CHECKLIST" 
   (	"PATIENT_ID" VARCHAR2(50 BYTE), 
	"CHECKLIST_ID" NUMBER(9,0), 
	"ASSIGNMENT_DATE" DATE, 
	"PROCEDURE_DATE" DATE, 
	"STATE_ID" NUMBER(1,0), 
	"CHECKLIST_STATE_ID" NUMBER(1,0), 
	"PAT_CL_ID" NUMBER(9,0), 
	"CL_VERSION_DATE" DATE, 
	"CL_VERSION_PROMPTED" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CHECKLIST"."PATIENT_ID" IS 'FK to USR_PAT_CHECKLIST table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CHECKLIST"."CHECKLIST_ID" IS 'link to checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CHECKLIST"."ASSIGNMENT_DATE" IS 'date value stating the date the patient checklist was assigned';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CHECKLIST"."PROCEDURE_DATE" IS 'date value stating the date of the procedure for the patient checklist';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CHECKLIST"."STATE_ID" IS 'link to state table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CHECKLIST"."CHECKLIST_STATE_ID" IS 'link to checklist state table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CHECKLIST"."PAT_CL_ID" IS 'numeric value uniquely identifying a patient checklist record';
--------------------------------------------------------
--  DDL for Table USR_PAT_CLI_OVERRIDE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_PAT_CLI_OVERRIDE" 
   (	"PAT_CL_ID" NUMBER, 
	"CHECKLIST_ID" NUMBER, 
	"ITEM_ID" NUMBER, 
	"USER_ID" NUMBER, 
	"TS_ID" NUMBER, 
	"OS_ID" NUMBER, 
	"DS_ID" NUMBER, 
	"OVERRIDE_DATE" DATE, 
	"OVERRIDE_COMMENT" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table USR_PAT_CL_ITEM
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_PAT_CL_ITEM" 
   (	"PATIENT_ID" VARCHAR2(50 BYTE), 
	"CHECKLIST_ID" NUMBER(9,0), 
	"ITEM_ID" NUMBER(9,0), 
	"TS_ID" NUMBER(9,0), 
	"OS_ID" NUMBER(9,0), 
	"DS_ID" NUMBER(9,0), 
	"PAT_CL_ID" NUMBER(9,0), 
	"IS_ENABLED" NUMBER(1,0), 
	"IS_OVERRIDDEN" NUMBER(1,0) DEFAULT (null), 
	"OVERRIDE_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM"."PATIENT_ID" IS 'FK to UTL_PATIENT table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM"."CHECKLIST_ID" IS 'link to checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM"."ITEM_ID" IS 'link to item table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM"."TS_ID" IS 'link to item ts table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM"."OS_ID" IS 'link to item os table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM"."DS_ID" IS 'link to item ds table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM"."PAT_CL_ID" IS 'link to patient checklist table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM"."IS_ENABLED" IS 'FK to stat true false table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM"."IS_OVERRIDDEN" IS 'FK to stat true false table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM"."OVERRIDE_DATE" IS 'date the item was overriden';
--------------------------------------------------------
--  DDL for Table USR_PAT_CL_ITEM_CMNT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_PAT_CL_ITEM_CMNT" 
   (	"PAT_CL_ID" NUMBER, 
	"CHECKLIST_ID" NUMBER, 
	"ITEM_ID" NUMBER, 
	"USER_ID" NUMBER, 
	"COMMENT_DATE" DATE, 
	"COMMENT_TEXT" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM_CMNT"."PAT_CL_ID" IS 'patient checklist id';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM_CMNT"."CHECKLIST_ID" IS 'checklist id';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM_CMNT"."ITEM_ID" IS 'item id';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM_CMNT"."USER_ID" IS 'user id';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM_CMNT"."COMMENT_DATE" IS 'date comment was made';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_CL_ITEM_CMNT"."COMMENT_TEXT" IS 'text of the comment';
--------------------------------------------------------
--  DDL for Table USR_PAT_ITEM
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_PAT_ITEM" 
   (	"PAT_ITEM_ID" NUMBER(9,0), 
	"PATIENT_ID" VARCHAR2(50 BYTE), 
	"ENTRY_DATE" DATE, 
	"SOURCE_TYPE_ID" NUMBER(1,0), 
	"ITEM_ID" NUMBER(9,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM"."PAT_ITEM_ID" IS 'unique numeric identifier for a patient item';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM"."PATIENT_ID" IS 'FK to UTL_PATIENT table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM"."ENTRY_DATE" IS 'date the item was entered';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM"."SOURCE_TYPE_ID" IS 'FK to STAT_SOURCE_TYPE table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM"."ITEM_ID" IS 'FK to USR_ITEM table';
--------------------------------------------------------
--  DDL for Table USR_PAT_ITEM_CMNT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_PAT_ITEM_CMNT" 
   (	"PAT_ITEM_ID" NUMBER, 
	"ITEM_ID" NUMBER, 
	"USER_ID" NUMBER, 
	"COMMENT_DATE" DATE, 
	"COMMENT_TEXT" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM_CMNT"."PAT_ITEM_ID" IS 'patient item id';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM_CMNT"."ITEM_ID" IS 'item id';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM_CMNT"."USER_ID" IS 'user id';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM_CMNT"."COMMENT_DATE" IS 'date comment was made';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM_CMNT"."COMMENT_TEXT" IS 'text of the comment';
--------------------------------------------------------
--  DDL for Table USR_PAT_ITEM_COMPONENT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_PAT_ITEM_COMPONENT" 
   (	"ITEM_ID" NUMBER(9,0), 
	"ITEM_COMPONENT_ID" NUMBER(9,0), 
	"COMPONENT_VALUE" VARCHAR2(4000 BYTE), 
	"PAT_ITEM_ID" NUMBER(9,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM_COMPONENT"."ITEM_ID" IS 'link to item component table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM_COMPONENT"."ITEM_COMPONENT_ID" IS 'link to item component table';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM_COMPONENT"."COMPONENT_VALUE" IS 'text value stating the value of the component';
   COMMENT ON COLUMN "VAPPCT"."USR_PAT_ITEM_COMPONENT"."PAT_ITEM_ID" IS 'FK to USR_PAT_ITEM table';
--------------------------------------------------------
--  DDL for Table USR_SERVICE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_SERVICE" 
   (	"SERVICE_ID" NUMBER(9,0), 
	"SERVICE_LABEL" VARCHAR2(50 BYTE), 
	"IS_ACTIVE" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_SERVICE"."SERVICE_ID" IS 'unique number identifier for a service record';
   COMMENT ON COLUMN "VAPPCT"."USR_SERVICE"."SERVICE_LABEL" IS 'unique varchar identifier for a service record';
   COMMENT ON COLUMN "VAPPCT"."USR_SERVICE"."IS_ACTIVE" IS 'fk to stat true false table';
--------------------------------------------------------
--  DDL for Table USR_TEMPORAL_STATE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."USR_TEMPORAL_STATE" 
   (	"TS_ID" NUMBER(9,0), 
	"TS_LABEL" VARCHAR2(50 BYTE), 
	"TS_DEFINITION_ID" NUMBER(2,0), 
	"IS_ACTIVE" NUMBER(1,0), 
	"IS_DEFAULT" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."USR_TEMPORAL_STATE"."TS_ID" IS 'unique numeric identifier for a temporal state';
   COMMENT ON COLUMN "VAPPCT"."USR_TEMPORAL_STATE"."TS_LABEL" IS 'unique text identifier for a temporal sate';
   COMMENT ON COLUMN "VAPPCT"."USR_TEMPORAL_STATE"."TS_DEFINITION_ID" IS 'link to temporal state definition table';
   COMMENT ON COLUMN "VAPPCT"."USR_TEMPORAL_STATE"."IS_ACTIVE" IS 'fk to stat true false table';
   COMMENT ON COLUMN "VAPPCT"."USR_TEMPORAL_STATE"."IS_DEFAULT" IS 'fk to stat true false table';
--------------------------------------------------------
--  DDL for Table UTL_CLINIC
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_CLINIC" 
   (	"CLINIC_ID" NUMBER, 
	"CLINIC_LABEL" VARCHAR2(4000 BYTE), 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_CLINIC"."CLINIC_ID" IS 'unique id for the clinic';
   COMMENT ON COLUMN "VAPPCT"."UTL_CLINIC"."CLINIC_LABEL" IS 'clinic label';
   COMMENT ON COLUMN "VAPPCT"."UTL_CLINIC"."XFER_SYSTEM_ID" IS 'transfer system id';
   COMMENT ON COLUMN "VAPPCT"."UTL_CLINIC"."XFER_DATE" IS 'date transferred';
--------------------------------------------------------
--  DDL for Table UTL_CLINIC_PATIENT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_CLINIC_PATIENT" 
   (	"CLINIC_ID" NUMBER, 
	"PATIENT_ID" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_CLINIC_PATIENT"."CLINIC_ID" IS 'clinic id';
   COMMENT ON COLUMN "VAPPCT"."UTL_CLINIC_PATIENT"."PATIENT_ID" IS 'patient id';
--------------------------------------------------------
--  DDL for Table UTL_LAB_TEST
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_LAB_TEST" 
   (	"LAB_TEST_ID" VARCHAR2(255 BYTE), 
	"LAB_TEST_NAME" VARCHAR2(4000 BYTE), 
	"LAB_TEST_HIREF" VARCHAR2(255 BYTE), 
	"LAB_TEST_LOREF" VARCHAR2(255 BYTE), 
	"LAB_TEST_REFRANGE" VARCHAR2(255 BYTE), 
	"LAB_TEST_UNITS" VARCHAR2(255 BYTE), 
	"LAB_TEST_DESCRIPTION" VARCHAR2(4000 BYTE), 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE, 
	"LOINC" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_LAB_TEST"."LAB_TEST_ID" IS 'unique id for the lab test';
   COMMENT ON COLUMN "VAPPCT"."UTL_LAB_TEST"."LAB_TEST_NAME" IS 'lab test name';
   COMMENT ON COLUMN "VAPPCT"."UTL_LAB_TEST"."LAB_TEST_HIREF" IS 'lab test range hi reference';
   COMMENT ON COLUMN "VAPPCT"."UTL_LAB_TEST"."LAB_TEST_LOREF" IS 'lab test range low reference';
   COMMENT ON COLUMN "VAPPCT"."UTL_LAB_TEST"."LAB_TEST_REFRANGE" IS 'lab test reference range';
   COMMENT ON COLUMN "VAPPCT"."UTL_LAB_TEST"."LAB_TEST_UNITS" IS 'lab test units';
   COMMENT ON COLUMN "VAPPCT"."UTL_LAB_TEST"."LAB_TEST_DESCRIPTION" IS 'lab test description';
   COMMENT ON COLUMN "VAPPCT"."UTL_LAB_TEST"."XFER_SYSTEM_ID" IS 'transfer system id';
   COMMENT ON COLUMN "VAPPCT"."UTL_LAB_TEST"."XFER_DATE" IS 'date of transfer';
--------------------------------------------------------
--  DDL for Table UTL_NOTE_TITLE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_NOTE_TITLE" 
   (	"NOTE_TITLE_TAG" NUMBER, 
	"NOTE_TITLE_LABEL" VARCHAR2(4000 BYTE), 
	"NOTE_TITLE_DETAILS" VARCHAR2(4000 BYTE), 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_NOTE_TITLE"."NOTE_TITLE_TAG" IS 'note title tag';
   COMMENT ON COLUMN "VAPPCT"."UTL_NOTE_TITLE"."NOTE_TITLE_LABEL" IS 'note title label';
   COMMENT ON COLUMN "VAPPCT"."UTL_NOTE_TITLE"."NOTE_TITLE_DETAILS" IS 'note title details';
   COMMENT ON COLUMN "VAPPCT"."UTL_NOTE_TITLE"."XFER_SYSTEM_ID" IS 'transfer system id';
   COMMENT ON COLUMN "VAPPCT"."UTL_NOTE_TITLE"."XFER_DATE" IS 'date of transfer';
--------------------------------------------------------
--  DDL for Table UTL_PATIENT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_PATIENT" 
   (	"PATIENT_ID" VARCHAR2(50 BYTE), 
	"FIRST_NAME" VARCHAR2(255 BYTE), 
	"MIDDLE_INITIAL" VARCHAR2(1 BYTE), 
	"LAST_NAME" VARCHAR2(255 BYTE), 
	"SSN" VARCHAR2(255 BYTE), 
	"DATE_OF_BIRTH" DATE, 
	"SEX_ID" NUMBER(1,0), 
	"FULL_NAME" VARCHAR2(4000 BYTE), 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_PATIENT"."PATIENT_ID" IS 'numeric value uniquely identifying a patient';
   COMMENT ON COLUMN "VAPPCT"."UTL_PATIENT"."FIRST_NAME" IS 'text value stating the first name of a patient';
   COMMENT ON COLUMN "VAPPCT"."UTL_PATIENT"."MIDDLE_INITIAL" IS 'text value stating the middle initial of a patient';
   COMMENT ON COLUMN "VAPPCT"."UTL_PATIENT"."LAST_NAME" IS 'text value stating the last name of a patient';
   COMMENT ON COLUMN "VAPPCT"."UTL_PATIENT"."SSN" IS 'string value stating the ssn of a patient';
   COMMENT ON COLUMN "VAPPCT"."UTL_PATIENT"."DATE_OF_BIRTH" IS 'date value stating the date of birth of a patient';
   COMMENT ON COLUMN "VAPPCT"."UTL_PATIENT"."SEX_ID" IS 'link to sex table';
   COMMENT ON COLUMN "VAPPCT"."UTL_PATIENT"."FULL_NAME" IS 'patient full name';
   COMMENT ON COLUMN "VAPPCT"."UTL_PATIENT"."XFER_SYSTEM_ID" IS 'transfer system id';
   COMMENT ON COLUMN "VAPPCT"."UTL_PATIENT"."XFER_DATE" IS 'date of transfer';
--------------------------------------------------------
--  DDL for Table UTL_REGION
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_REGION" 
   (	"REGION_ID" NUMBER, 
	"REGION_NAME" VARCHAR2(500 BYTE), 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Table UTL_SITE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_SITE" 
   (	"REGION_ID" NUMBER, 
	"SITE_ID" NUMBER, 
	"SITE_NAME" VARCHAR2(500 BYTE), 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Table UTL_SPECIALTY
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_SPECIALTY" 
   (	"SPECIALTY_ID" NUMBER, 
	"SPECIALTY_LABEL" VARCHAR2(4000 BYTE), 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_SPECIALTY"."SPECIALTY_ID" IS 'unique specialty id';
   COMMENT ON COLUMN "VAPPCT"."UTL_SPECIALTY"."SPECIALTY_LABEL" IS 'specialty label';
   COMMENT ON COLUMN "VAPPCT"."UTL_SPECIALTY"."XFER_SYSTEM_ID" IS 'transfer system id';
   COMMENT ON COLUMN "VAPPCT"."UTL_SPECIALTY"."XFER_DATE" IS 'date of transfer';
--------------------------------------------------------
--  DDL for Table UTL_SPECIALTY_PATIENT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_SPECIALTY_PATIENT" 
   (	"SPECIALTY_ID" NUMBER, 
	"PATIENT_ID" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_SPECIALTY_PATIENT"."SPECIALTY_ID" IS 'specialty id';
   COMMENT ON COLUMN "VAPPCT"."UTL_SPECIALTY_PATIENT"."PATIENT_ID" IS 'patient id';
--------------------------------------------------------
--  DDL for Table UTL_TEAM
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_TEAM" 
   (	"TEAM_ID" NUMBER, 
	"TEAM_LABEL" VARCHAR2(4000 BYTE), 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_TEAM"."TEAM_ID" IS 'unique team id';
   COMMENT ON COLUMN "VAPPCT"."UTL_TEAM"."TEAM_LABEL" IS 'team label';
   COMMENT ON COLUMN "VAPPCT"."UTL_TEAM"."XFER_SYSTEM_ID" IS 'transfer system id';
   COMMENT ON COLUMN "VAPPCT"."UTL_TEAM"."XFER_DATE" IS 'date of transfer';
--------------------------------------------------------
--  DDL for Table UTL_TEAM_PATIENT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_TEAM_PATIENT" 
   (	"TEAM_ID" NUMBER, 
	"PATIENT_ID" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_TEAM_PATIENT"."TEAM_ID" IS 'team id';
   COMMENT ON COLUMN "VAPPCT"."UTL_TEAM_PATIENT"."PATIENT_ID" IS 'patient id';
--------------------------------------------------------
--  DDL for Table UTL_USER
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_USER" 
   (	"USER_NAME" VARCHAR2(255 BYTE), 
	"USER_PASSWORD" VARCHAR2(500 BYTE), 
	"USER_ID" NUMBER, 
	"USER_ROLE_ID" NUMBER, 
	"FIRST_NAME" VARCHAR2(100 BYTE), 
	"LAST_NAME" VARCHAR2(100 BYTE), 
	"NAME" VARCHAR2(1000 BYTE), 
	"GREETING" VARCHAR2(4000 BYTE), 
	"SITE_ID" NUMBER, 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."USER_NAME" IS 'user name for local login';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."USER_PASSWORD" IS 'password for local login';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."USER_ID" IS 'unique user id';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."USER_ROLE_ID" IS 'user role id (obsolete) ';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."FIRST_NAME" IS 'users first name';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."LAST_NAME" IS 'users last name';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."NAME" IS 'users full name';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."GREETING" IS 'greeting';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."SITE_ID" IS 'site id, populated only if the user logs in';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."XFER_SYSTEM_ID" IS 'transfer system id';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER"."XFER_DATE" IS 'date of transfer';
--------------------------------------------------------
--  DDL for Table UTL_USER_PATIENT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_USER_PATIENT" 
   (	"PATIENT_ID" VARCHAR2(20 BYTE), 
	"USER_ID" NUMBER, 
	"DATE_ADDED" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_USER_PATIENT"."PATIENT_ID" IS 'patient id';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER_PATIENT"."USER_ID" IS 'user id';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER_PATIENT"."DATE_ADDED" IS 'date added';
--------------------------------------------------------
--  DDL for Table UTL_USER_ROLE
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_USER_ROLE" 
   (	"USER_ID" NUMBER, 
	"USER_ROLE_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_USER_ROLE"."USER_ID" IS 'user id';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER_ROLE"."USER_ROLE_ID" IS 'user role id';
--------------------------------------------------------
--  DDL for Table UTL_USER_SECURITY_KEY
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_USER_SECURITY_KEY" 
   (	"SECURITY_KEY_ID" NUMBER, 
	"SECURITY_KEY_NAME" VARCHAR2(100 BYTE), 
	"USER_ID" NUMBER, 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_USER_SECURITY_KEY"."SECURITY_KEY_ID" IS 'unique security key id';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER_SECURITY_KEY"."SECURITY_KEY_NAME" IS 'security key name';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER_SECURITY_KEY"."USER_ID" IS 'user id';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER_SECURITY_KEY"."XFER_SYSTEM_ID" IS 'transfer system id';
   COMMENT ON COLUMN "VAPPCT"."UTL_USER_SECURITY_KEY"."XFER_DATE" IS 'date of transfer';
--------------------------------------------------------
--  DDL for Table UTL_WARD
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_WARD" 
   (	"WARD_ID" NUMBER, 
	"WARD_LABEL" VARCHAR2(4000 BYTE), 
	"XFER_SYSTEM_ID" NUMBER, 
	"XFER_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_WARD"."WARD_ID" IS 'unique ward id';
   COMMENT ON COLUMN "VAPPCT"."UTL_WARD"."WARD_LABEL" IS 'ward label';
   COMMENT ON COLUMN "VAPPCT"."UTL_WARD"."XFER_SYSTEM_ID" IS 'transfer system id';
   COMMENT ON COLUMN "VAPPCT"."UTL_WARD"."XFER_DATE" IS 'date of transfer';
--------------------------------------------------------
--  DDL for Table UTL_WARD_PATIENT
--------------------------------------------------------

  CREATE TABLE "VAPPCT"."UTL_WARD_PATIENT" 
   (	"WARD_ID" NUMBER, 
	"PATIENT_ID" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;

   COMMENT ON COLUMN "VAPPCT"."UTL_WARD_PATIENT"."WARD_ID" IS 'ward id';
   COMMENT ON COLUMN "VAPPCT"."UTL_WARD_PATIENT"."PATIENT_ID" IS 'patient id';
REM INSERTING into VAPPCT.FX_AUDIT
REM INSERTING into VAPPCT.FX_PCK_STATUS
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (100,1,'Successfully saved temporal state','SUCCESS_SAVE_TS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (101,2,'Failed to save temporal state','FAILED_SAVE_TS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (102,1,'Sucessfully retrieved temporal state data','SUCCESS_QUERY_TS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (103,2,'Failed to retrieve temporal state data','FAILED_QUERY_TS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (1,2,'Failed to save item','FAILED_SAVE_ITEM');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (3,2,'Failed to retrieve item data','FAILED_QUERY_ITEM');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (2,1,'Successfully saved item','SUCCESS_SAVE_ITEM');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (4,1,'Successfully retrieved item data','SUCCESS_QUERY_ITEM');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (104,1,'Successfully saved decision state','SUCCESS_SAVE_DS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (105,2,'Failed to save decision state','FAILED_SAVE_DS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (106,1,'Sucessfully retrieved decision state data','SUCCESS_QUERY_DS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (107,2,'Failed to retrieve decision state data','FAILED_QUERY_DS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (108,1,'Successfully saved outcome state','SUCCESS_SAVE_OS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (109,2,'Failed to save outcome state','FAILED_SAVE_OS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (110,1,'Sucessfully retrieved outcome state data','SUCCESS_QUERY_OS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (111,2,'Failed to retrieve outcome state data','FAILED_QUERY_OS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (112,1,'Successfully saved item group','SUCCESS_SAVE_IG');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (113,2,'Failed to save item group','FAILED_SAVE_IG');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (114,1,'Sucessfully retrieved item group data','SUCCESS_QUERY_IG');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (115,2,'Failed to retrieve item group data','FAILED_QUERY_IG');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (5,2,'Failed to retrieve decision state definition data','FAILED_QUERY_DSDEF');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (6,2,'Failed to retrieve outcome state definition data','FAILED_QUERY_OSDEF');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (7,1,'Successfully retrieved decision state definition data','SUCCESS_QUERY_DSDEF');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (8,1,'Successfully retrieved outcome state definition data','SUCCESS_QUERY_OSDEF');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (9,2,'Failed to retrieve temporal state definition data','FAILED_QUERY_TSDEF');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (10,1,'Successfully retrieved temporal state definition data','SUCCESS_QUERY_TSDEF');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (11,1,'Successfully retrieved item type data','SUCCESS_QUERY_IT');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (12,2,'Failed to retrieve item type data','FAILED_QUERY_IT');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (13,1,'Successfully retrieved active data','SUCCESS_QUERY_ACTIVE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (14,2,'Failed to retrieve active data','FAILED_QUERY_ACTIVE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (116,1,'Audit successful','SUCCESS_SAVE_AUDIT');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (117,2,'Audit Failed','FAILED_SAVE_AUDIT');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (15,1,'Successfully retrieved login data','SUCCESS_QUERY_LOGIN');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (16,2,'Failed to retrieve login data','FAILED_QUERY_LOGIN');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (17,1,'Successfully retrieved user data','SUCCESS_QUERY_USER');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (18,2,'Failed to retrieve user data','FAILED_QUERY_USER');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (19,1,'Successfully retrieved menu option data','SUCCESS_QUERY_MO');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (20,2,'Failed to retrieve menu option data','FAILED_QUERY_MO');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (118,1,'Successfully retrieved checklist data','SUCCESS_QUERY_CHECKLIST');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (119,2,'Failed to retrieve checklist data','FAILED_QUERY_CHECKLIST');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (120,1,'Successfully saved checklist','SUCCESS_SAVE_CHECKLIST');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (121,2,'Failed to save checklist','FAILED_SAVE_CHECKLIST');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (21,1,'Successfully retrieved state data','SUCCESS_QUERY_STATE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (22,2,'Failed to retrieve state data','FAILED_QUERY_STATE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (122,1,'Successfully retrieved service data','SUCCESS_QUERY_SERVICE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (123,2,'Failed to retrieve service data','FAILED_QUERY_SERVICE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (23,1,'Successfully retrieved item component data','SUCCESS_QUERY_IC');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (24,2,'Failed to retrieve item component data','FAILED_QUERY_IC');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (25,1,'Successfully saved item component data','SUCCESS_SAVE_IC');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (26,2,'Failed to save item component data','FAILED_SAVE_IC');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (201,2,'Failed to save the checklist as a new checklist','FAILED_SAVEAS_CHECKLIST');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (200,1,'Successfully saved the checklist as a new checklist','SUCCESS_SAVEAS_CHECKLIST');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (202,1,'Successfully retrieved checklist item data','SUCCESS_QUERY_CIE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (203,2,'Failed to retrieve checklist item data','FAILED_QUERY_CIE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (204,1,'Successfully saved checklist item logic','SUCCESS_SAVE_IL');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (205,2,'Failed to save checklist item logic','FAILED_SAVE_IL');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (206,1,'Successfully retrieved checklist item logic','SUCCESS_QUERY_IL');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (207,2,'Failed to retrieve checklist item logic','FAILED_QUERY_IL');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (208,1,'Successfully retrieved checklist item temporal state roles','SUCCESS_QUERY_CIE_TS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (209,2,'Failed to retrieve checklist item temporal state roles','FAILED_QUERY_CIE_TS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (210,1,'Successfully retrieved checklist item outcome state roles','SUCCESS_QUERY_CIE_OS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (211,2,'Failed to retrieve checklist item outcome state roles','FAILED_QUERY_CIE_OS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (212,1,'Successfully retrieved checklist item decision state roles','SUCCESS_QUERY_CIE_DS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (213,2,'Failed to retrieve checklist item decision state roles','FAILED_QUERY_CIE_DS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (214,1,'Successfully retrieved checklist viewable roles','SUCCESS_QUERY_CL_VIEWABLE_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (215,2,'Failed to retrieve checklist viewable roles','FAILED_QUERY_CL_VIEWABLE_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (216,1,'Successfully retrieved checklist read only roles','SUCCESS_QUERY_CL_READ_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (217,2,'Failed to retrieve checklist read only roles','FAILED_QUERY_CL_READ_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (218,1,'Successfully retrieved checklist closeable roles','SUCCESS_QUERY_CL_CLOSE_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (219,2,'Failed to retrieve checklist closeable roles','FAILED_QUERY_CL_CLOSE_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (220,1,'Successfully retrieved user roles','SUCCESS_QUERY_USER_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (221,2,'Failed to retrieve user roles','FAILED_QUERY_USER_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (222,1,'Successfully deleted checklist item temporal state roles','SUCCESS_DELETE_CIE_TS_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (223,2,'Failed to delete checklist item temporal state roles','FAILED_DELETE_CIE_TS_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (224,1,'Successfully deleted checklist item outcome state roles','SUCCESS_DELETE_CIE_OS_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (225,2,'Failed to delete checklist item outcome state roles','FAILED_DELETE_CIE_OS_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (226,1,'Successfully deleted checklist item decision state roles','SUCCESS_DELETE_CIE_DS_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (227,2,'Failed to delete checklist item decision state roles','FAILED_DELETE_CIE_DS_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (228,1,'Successfully deleted checklist viewable roles','SUCCESS_DELETE_CL_VIEWABLE_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (229,2,'Failed to delete checklist viewable roles','FAILED_DELETE_CL_VIEWABLE_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (230,1,'Successfully deleted checklist readonly roles','SUCCESS_DELETE_CL_READ_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (231,2,'Failed to delete checklist readonly roles','FAILED_DELETE_CL_READ_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (232,1,'Successfully deleted checklist closeable roles','SUCCESS_DELETE_CL_CLOSE_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (233,2,'Failed to delete checklist closeable roles','FAILED_DELETE_CL_CLOSE_ROLES');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (234,1,'Successfully saved checklist item','SUCCESS_SAVE_CIE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (235,2,'Failed to save checklist item','FAILED_SAVE_CIE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (236,1,'Successfully saved checklist viewable role','SUCCESS_SAVE_CL_VIEWABLE_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (237,2,'Failed to save checklist viewable role','FAILED_SAVE_CL_VIEWABLE_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (238,1,'Successfully saved checklist closeable role','SUCCESS_SAVE_CL_CLOSEABLE_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (239,2,'Failed to save checklist closeable role','FAILED_SAVE_CL_CLOSEABLE_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (240,1,'Successfully saved checklist read only role','SUCCESS_SAVE_CL_READONLY_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (241,2,'Failed to save checklist read only role','FAILED_SAVE_CL_READONLY_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (242,1,'Successfully saved checklist item temporal state role','SUCCESS_SAVE_CIE_TS_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (243,2,'Failed to save checklist item temporal state role','FAILED_SAVE_CIE_TS_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (244,1,'Successfully saved checklist item outcome state role','SUCCESS_SAVE_CIE_OS_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (245,2,'Failed to save checklist item outcome state role','FAILED_SAVE_CIE_OS_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (246,1,'Successfully saved checklist item decision state role','SUCCESS_SAVE_CIE_DS_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (247,2,'Failed to save checklist item decision state role','FAILED_SAVE_CIE_DS_ROLE');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (27,1,'Successfully deleted item component state data','SUCCESS_DELETE_ICS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (28,2,'Failed to delete item component state data','FAILED_DELETE_ICS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (29,1,'Successfully deleted item component range data','SUCCESS_DELETE_ICR');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (30,2,'Failed to delete item component range data','FAILED_DELETE_ICR');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (31,1,'Successfully deleted item component data','SUCCESS_DELETE_IC');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (32,2,'Failed to delete item component data','FAILED_DELETE_IC');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (33,1,'Successfully retrieved checklist changeable data','SUCCESS_QUERY_CLC');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (34,2,'Failed to retrieve checklist changeable data','FAILED_QUERY_CLC');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (248,1,'Successfully retrieved patient checklist','SUCCESS_QUERY_PATIENT_CHECKLIST');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (249,2,'Failed to retrieve patient checklist','FAILED_QUERY_PATIENT_CHECKLIST');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (252,1,'Successfully retrieved patient checklist items','SUCCESS_QUERY_PAT_CL_ITEMS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (253,2,'Failed to retrieve patient checklist items','FAILED_QUERY_PAT_CL_ITEMS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (254,1,'Successfully retrieved patient item components','SUCCESS_QUERY_PAT_ITEM_COMPONENTS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (255,2,'Failed to retrieve patient item components','FAILED_QUERY_PAT_ITEM_COMPONENTS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (250,1,'Successfully saved patient checklist','SUCCESS_SAVE_PAT_CHECKLIST');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (251,2,'Failed to save patient checklist','FAILED_SAVE_PAT_CHECKLIST');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (256,1,'Successfully retrieved patient items','SUCCESS_QUERY_PAT_ITEMS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (257,2,'Failed to retrieve patient items','FAILED_QUERY_PAT_ITEMS');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (1000,1,'Query successful: ','query_successful');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (1001,2,'Query failed: ','query_failed');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (1002,1,'Insert successful: ','insert_successful');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (1003,2,'Insert failed: ','insert_failed');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (1004,1,'Update successful: ','update_successful');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (1005,2,'Update failed: ','update_failed');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (1006,1,'Delete successful: ','delete_successful');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (1007,2,'Delete failed: ','delete_failed');
Insert into VAPPCT.FX_PCK_STATUS (PCK_STATUS_ID,STATE_ID,PCK_STATUS_COMMENT,PCK_STATUS_LABEL) values (2000,2,'Invalid Session! ','INVALID_SESSION');
REM INSERTING into VAPPCT.FX_SESSION
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('38F7F3S3045348KO1B4600386','v5ngixmyjpfaif55qlldtx45','127.0.0.1','20001',to_date('18-DEC-12','DD-MON-RR'),to_date('18-DEC-12','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('381DBUF304554849357600389','gxjnf5uaeeivul3zyth4ac55','127.0.0.1','20001',to_date('18-DEC-12','DD-MON-RR'),to_date('18-DEC-12','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('38U1PYO30459484ANC7600393','moc0ak45xzaha3ussdmt4jzh','127.0.0.1','20001',to_date('18-DEC-12','DD-MON-RR'),to_date('18-DEC-12','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('38WPD1U3048748CGH6M600402','nfkbdvvp1hut4g451ybeoz45','127.0.0.1','20001',to_date('18-DEC-12','DD-MON-RR'),to_date('18-DEC-12','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('38ZH9RE30487483H7ID600402','jd2sltbvcxnllu55weoxqwad','127.0.0.1','20001',to_date('18-DEC-12','DD-MON-RR'),to_date('18-DEC-12','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('372UGYR1527348WXYH2611500','l1w5sa550oxc4tfd2gmx1uiv','127.0.0.1','20001',to_date('16-JAN-13','DD-MON-RR'),to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46G0VCA24091486HLNK611523','kuu3xt55rhmq3m3lclt0ys55','127.0.0.1','20001',to_date('16-JAN-13','DD-MON-RR'),to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('37662O21534548PPLUU611536','5qnavs45etzwa2blgugcis3e','127.0.0.1','20001',to_date('16-JAN-13','DD-MON-RR'),to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('48AFZG25112348TE9YO611606','yh3otgnmhyj3yr2xl0lm2t45','127.0.0.1','20001',to_date('16-JAN-13','DD-MON-RR'),to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('48IHDR151151486YKCW611613','tip5zs452okfdknn5lgegcue','127.0.0.1','20001',to_date('16-JAN-13','DD-MON-RR'),to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46AYIAI24305481ZBGO611620','2ykyvo451vtrxwyv4x3megvk','127.0.0.1','20001',to_date('16-JAN-13','DD-MON-RR'),to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46G3M3Z2430748XVEDI611624','h4awxa55hp1jh055lsskce45','127.0.0.1','20001',to_date('16-JAN-13','DD-MON-RR'),to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('48987DI5118748N2GOH611632','fb0s3kenvvzxosibzuy2232n','127.0.0.1','20001',to_date('16-JAN-13','DD-MON-RR'),to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('37S8OA01548548N4WN1611650','kkdgvqiaqv0rf245kl3wh5qk','127.0.0.1','20001',to_date('16-JAN-13','DD-MON-RR'),to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('42U0KLR4775748PX042611919','5m2zmjbuzcdx0b45cucrpviu','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('42UQ3YK4775948JCKQH611927','rw2yctbdtfscbbqcoekr2wj4','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('4258U0847761480UMW6611934','mr03x055xe42eoyx2c5kh0y0','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('42C672L47803485VMCD611965','rvnbxyqvi4ete055suyqpnre','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('51GP5MV2583948XGWBJ612085','tf03wdvpwqrtwsmyzqcdzvu1','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('463RR1T2445948WI5WL612093','5a23kbn2y0uhma55veevf445','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46Q55BS2446148BJ1IF612097','kigafdey3b0dkku3lhqr3q55','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('468QMTP244634871GKA612099','elaicwrnmbfvriyplveo4vbl','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('51DUCZW2585548LR56P612108','bmaz04uixb4l3bneljiuajmv','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('48XQ2I357149483NFIG612119','wkmx0bqhtdr5orbc154nzsy0','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('48ZEL475718148XDS74612137','earbd4nzunm0fz55ntozkb2x','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('486J4A05718748QX7QI612139','hdn3uz3wfexiti55q1x5dmro','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('51VZI4W2589148BFSA4612158','1con1wikh4o2qxiq553hgvf1','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('42YKQYP4791748EOM0S612172','hwinfh3tavldwsizzo4nshbs','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('48X76745722148NQ9UG612181','4grixl45wmkfoimj4mosa1yp','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('428CJAO4793348GELSD612192','f13mwgmjkdjqjxjd0com2jyt','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('42X1VJ547935480RAZH612201','wknefxaj4reorhbbe4sfen55','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('42GCUVV479374866WB6612203','peero045ppb1gkeb4u14riv4','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('48CVJLK5725548Y6ODC612212','z5blhp550wqunb55xu3pnn55','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('42ZB9B94794548D5J2T612221','2x5wte55xpidw0vthctolkeo','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('48NDA9V572694858TE9612229','enpaihimxavjb3552avcs1z0','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('517E8SO2599348YKQZM612240','1mbyll55amwfbt45yytkwqar','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('4252YD34797548YMU4K612252','z4lyw1jlyxsd34451dhd3afx','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('42IC7354797748SH954612261','lprcyjbcqfohsm55unlrzv55','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46D96T42460148AAAWL612270','jjmeuc550whwru45ve4zhm45','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('51IW8362603548CLINR612284','gfwuml450qpycv55brnse0zl','172.19.110.132','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('513DXWD26599480VPJK612450','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('486ECMY5852948HGJAC612583','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('48LUZ5158713480WJPZ612618','yqq4jhisqoo5a4ulbkde5y45','127.0.0.1','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('51ZG0WX270714842F2W612638','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46XYKGN25989484O6EJ614034','umx3rpb2ctwilk45eqvccj3a','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46UM6M22602748FLOM0614053','ojfwp12rnaxjbz55hzso4045','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46WFTT02604348SCEJD614069','ipu30n453hm5hv55mmlni0y4','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46VNT4B2605948Y7O8N614093','iouzbufpwh55bk550a4ve555','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46TS5EP2605948WEBR1614093','iouzbufpwh55bk550a4ve555','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('466M7F02606148M5GK2614095','0dhduhub23ntvravjjd3yo32','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46ONZ7A2606748NZHJO614098','rhu3x0fmao2aif555ph1kd55','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('464UMZG2607548P8U1V614100','ooz0m0ikgzbts2ejtqjhcm45','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46BR17H2608748JQBWX614110','oqf0oo2bwz1hyt45vs4zui2t','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46FWCIZ26089486J46P614112','wv5ej545knq4huno4xvrbjbb','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('38R87IZ30439489F2AT600371','hdqs4t451f12rp45vh2tueyx','127.0.0.1','20001',to_date('18-DEC-12','DD-MON-RR'),to_date('18-DEC-12','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46M7DTD2615348304JR614147','ljiskw55plk1qfjebi3csc2w','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46ZIXZ22620948W4NAF614181','xqenac551l4yg5552qczap3g','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('18BJ7QF919748SDMXU614582','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('51ZZ8253154348F4EFB614622','xnvhg445aqus2d55l5ccla55','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46OWG7H2766948QP1RW620357','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46VNV9Y2773948RO6NS620412','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46FSAIU2774348D6T7Z620419','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('181RAJS1233548P7PT0620428','xd3wkn450ukige455yqmxr2j','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('18DI82F1233748TW7WX620430','20fieq451ttxac55wg1j0eqx','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('18UJ6ZC1242148IL9IN620443','0abkvl55bsbcoj45upqonp45','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('513C58I3240748RF294620449','voxp0vqghdhwea55awe2fq35','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('51VNWNV3240948QLUIF620453','cjdza055ylxc5grbucapfxfz','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('51RZEM83240948YJ48T620453','vokyfwalf121r155i00stu55','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('37J5I2U1002148UWQ9V608470','idharx55gus3m355rs4p1ije','127.0.0.1','20001',to_date('08-JAN-13','DD-MON-RR'),to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('37HTHKI1003148O0D68608498','njmfuubpao3anv23ctz53v45','127.0.0.1','20001',to_date('08-JAN-13','DD-MON-RR'),to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('377G39Q1007548I0HG8608522','2fwjawzjgjq4lrbikdzio445','127.0.0.1','20001',to_date('08-JAN-13','DD-MON-RR'),to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('379PIZB1008348LCQKV608538','44pqkauxpv5eqx55uebfj345','127.0.0.1','20001',to_date('08-JAN-13','DD-MON-RR'),to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('37KK6IK1002148T9H2F608470','l5xrqg55raany255yj45yf45','127.0.0.1','20001',to_date('08-JAN-13','DD-MON-RR'),to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('383XXRI37748X71K0608549','xma25rjyxm4law55kmu0zx45','127.0.0.1','20001',to_date('08-JAN-13','DD-MON-RR'),to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('48FRM005062748DSDAN611180','aqligr45xurbkj45yip10u55','127.0.0.1','20001',to_date('15-JAN-13','DD-MON-RR'),to_date('15-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('37XIL6O1420948Y02U7611222','2sfisx453kduanjxr2utufaa','127.0.0.1','20001',to_date('15-JAN-13','DD-MON-RR'),to_date('15-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('51JEZ1Q30199489C85M614600','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('384DSUK29948BVK3S608508','njmfuubpao3anv23ctz53v45','127.0.0.1','20001',to_date('08-JAN-13','DD-MON-RR'),to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('188JO8D1207748BW1P7620363','gdh0pcab5ditcri4prquva45','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('18UZCHS12105480Z5D0620374','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46X5HR52776948TO7RI620433','k2qxib55dcnff4it34xeot55','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('51D935C3240548PVQPA620439','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('46L5NZ727175482YLWS614604','1msn2hysrplmdm554kkkqm45','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('135LY3LQ4769148R56W6611077','ez25bi55ufnanw45m4m2o055','127.0.0.1','20001',to_date('15-JAN-13','DD-MON-RR'),to_date('15-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('123L95SV5262948UVG4L611082','tiux2k550ot52v55kiwmbj55','127.0.0.1','20001',to_date('15-JAN-13','DD-MON-RR'),to_date('15-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('131RHL9S2142548OHFMZ611089','nzv5j555oh0nkz55jrzwhl55','127.0.0.1','20001',to_date('15-JAN-13','DD-MON-RR'),to_date('15-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('119XO1VQ1763948B3144611182','bdra2gb0lwc0vv45tpiyeqyc','127.0.0.1','20001',to_date('15-JAN-13','DD-MON-RR'),to_date('15-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('135R8KCX50211485NBQP611193','jqc4fsycfdolzc55u1rrdx45','127.0.0.1','20001',to_date('15-JAN-13','DD-MON-RR'),to_date('15-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('123R7HMS5383348RUQPD611203','pgdbot2bq3tyle31pvlc2s45','127.0.0.1','20001',to_date('15-JAN-13','DD-MON-RR'),to_date('15-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('120YFJKR3017748C7M00611599','nxwyb445nmrcho552mrzav45','127.0.0.1','20001',to_date('16-JAN-13','DD-MON-RR'),to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('131I0WZQ213434898HXF611073','ez25bi55ufnanw45m4m2o055','127.0.0.1','20001',to_date('15-JAN-13','DD-MON-RR'),to_date('15-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('123BKF1U5532748LV7U2611954','rmjy542e0vitzv551jwc5xra','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('103UQKC84843483O3Y4612149','5jvl4s24chhz1r55xmfdgqvu','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('1204AUIY3170748U2K3Q612600','5sdyxd551e5tkj45jexbkw55','127.0.0.1','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('120RPAXA3621548EDR3H614109','31z4hv55b4xvvn45o00ragvw','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('123LYIZJ5661148J6TFX614625','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('124NBJT24375948M3KN3620352','d5f1o0qvdufx2f45u0zdru45','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('132VFBVQ13453483XG4Y620456','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('103WFUR0597948OJMDO612607','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('123AF2GK5634748T8A8I614400','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('123UQJXD5659348JAZH7614620','v5e0offtktf5gv3ftfmesy45','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('124AZ8IW4423148AYI3P620446','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('1201TT4T1663548SQRQ1600712','hmbdjyun4qy4ohbs1yorntvd','172.19.110.136','20001',to_date('19-DEC-12','DD-MON-RR'),to_date('19-DEC-12','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('123F43655688148LLPAC620343','peekbdqsbhbrcdr5s40d0q45','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('135PDPTK5294748VIJ4Z612061','fee3ho450riycyn0cu5dj3bm','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('120BDWVR3076348JNQU6612072','ej3jiermojx0z045oskd2g22','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('129K7EKF2689548K4V44612667','qd1cejfttp1rl53ro5enzyjm','127.0.0.1','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('129LSIH12689748HB66G614019','nwoan52onvnltgieq4vnoe55','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('124TK68K43145489TS9A614360','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('126J2S7A1495148AZQ4M612016','ganlqt55kwyij1454aduj0ql','127.0.0.1','20001',to_date('17-JAN-13','DD-MON-RR'),to_date('17-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('119D3S591863148FPKDD612468','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('120MN0HU3182548RABOM612645','tyf1tdqsw1fjuhjljbbql1ik','127.0.0.1','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('124V6NUE3327148S17DX600725','hmbdjyun4qy4ohbs1yorntvd','172.19.110.136','20001',to_date('19-DEC-12','DD-MON-RR'),to_date('19-DEC-12','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('103IOGU56085488ND19612651','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('135SP9GU53143489T9DQ612771','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('119VUW351975748FGDON612802','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('18-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('1322KT9J1135548S4OX6614103','u4cjezid2lqolw55j3wcjp55','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('1327JUOB1141948FMFUA614128','qhxulv45y4kjbj55v2dlox45','127.0.0.1','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('21-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('131MM1502560748A32QI614329','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('21-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('131WVBHF2646348ZYVQ6614635','xnvhg445aqus2d55l5ccla55','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('1277SYVJ46131488NSSS614646','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('123Y102C5708148MOZO6620365','n2mjw2yg50tspeerosmqiwrb','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('1238DLH85708348DAUHO620368','k3u5sc55nlm4uvn4gz3ivwvl','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('131WTY5Y26671480DJC3620413','im0fb145d0tl2tysktgchdqi','127.0.0.1','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('127BXGFO4666348EW5I8620431','00w0xw55z2nvxd45g2wjgx45','172.19.110.132','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.FX_SESSION (FX_SESSION_ID,ASP_SESSION_ID,CLIENT_IP,USER_ID,SESSION_CREATED,SESSION_UPDATED) values ('127E4NIE46663484ZAU2620431','anbs50alwii4bt55tu5tc3et','172.19.110.136','20001',to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.FX_VAPPCTCOMM_EVENT
Insert into VAPPCT.FX_VAPPCTCOMM_EVENT (EVENT_NAME,EVENT_DETAILS,EVENT_DATE,IP_ADDRESS,USER_ID,SESSION_ID) values ('ERROR_XFER_LAB','patient:391 note:-1',to_date('15-JAN-13','DD-MON-RR'),'127.0.0.1',20001,'pgdbot2bq3tyle31pvlc2s45');
Insert into VAPPCT.FX_VAPPCTCOMM_EVENT (EVENT_NAME,EVENT_DETAILS,EVENT_DATE,IP_ADDRESS,USER_ID,SESSION_ID) values ('ProcessLab','There is no logged in connection',to_date('15-JAN-13','DD-MON-RR'),'127.0.0.1',20001,'pgdbot2bq3tyle31pvlc2s45');
REM INSERTING into VAPPCT.STAT_ACTIVE
Insert into VAPPCT.STAT_ACTIVE (ACTIVE_ID,ACTIVE_LABEL) values (1,'Active');
Insert into VAPPCT.STAT_ACTIVE (ACTIVE_ID,ACTIVE_LABEL) values (2,'Inactive');
REM INSERTING into VAPPCT.STAT_CHECKLIST_STATE
Insert into VAPPCT.STAT_CHECKLIST_STATE (CHECKLIST_STATE_ID,CHECKLIST_STATE_LABEL) values (3,'Cancelled');
Insert into VAPPCT.STAT_CHECKLIST_STATE (CHECKLIST_STATE_ID,CHECKLIST_STATE_LABEL) values (2,'Closed');
Insert into VAPPCT.STAT_CHECKLIST_STATE (CHECKLIST_STATE_ID,CHECKLIST_STATE_LABEL) values (1,'Open');
REM INSERTING into VAPPCT.STAT_DS_DEFINITION
Insert into VAPPCT.STAT_DS_DEFINITION (DS_DEFINITION_ID,DS_DEFINITION_LABEL,STATE_ID) values (1,'Unknown',3);
Insert into VAPPCT.STAT_DS_DEFINITION (DS_DEFINITION_ID,DS_DEFINITION_LABEL,STATE_ID) values (2,'Go',2);
Insert into VAPPCT.STAT_DS_DEFINITION (DS_DEFINITION_ID,DS_DEFINITION_LABEL,STATE_ID) values (3,'NoGo',4);
REM INSERTING into VAPPCT.STAT_ITEM_TYPE
Insert into VAPPCT.STAT_ITEM_TYPE (ITEM_TYPE_ID,ITEM_TYPE_LABEL) values (4,'Collection');
Insert into VAPPCT.STAT_ITEM_TYPE (ITEM_TYPE_ID,ITEM_TYPE_LABEL) values (1,'Laboratory');
Insert into VAPPCT.STAT_ITEM_TYPE (ITEM_TYPE_ID,ITEM_TYPE_LABEL) values (5,'Note Title');
Insert into VAPPCT.STAT_ITEM_TYPE (ITEM_TYPE_ID,ITEM_TYPE_LABEL) values (3,'Question Free Text');
Insert into VAPPCT.STAT_ITEM_TYPE (ITEM_TYPE_ID,ITEM_TYPE_LABEL) values (2,'Question Selection');
REM INSERTING into VAPPCT.STAT_MENU_OPTION
Insert into VAPPCT.STAT_MENU_OPTION (MENU_OPTION_ID,MENU_OPTION_LABEL,MENU_OPTION_URL,SORT_ORDER,MENU_LEVEL) values (9,'Single Patient View','sp_single_patient.aspx',9,2);
Insert into VAPPCT.STAT_MENU_OPTION (MENU_OPTION_ID,MENU_OPTION_LABEL,MENU_OPTION_URL,SORT_ORDER,MENU_LEVEL) values (3,'Assign Checklist','ac_assign_checklist.aspx',4,1);
Insert into VAPPCT.STAT_MENU_OPTION (MENU_OPTION_ID,MENU_OPTION_LABEL,MENU_OPTION_URL,SORT_ORDER,MENU_LEVEL) values (4,'Variable Editor','ve_variable_editor.aspx',5,1);
Insert into VAPPCT.STAT_MENU_OPTION (MENU_OPTION_ID,MENU_OPTION_LABEL,MENU_OPTION_URL,SORT_ORDER,MENU_LEVEL) values (5,'Item Editor','ie_item_editor.aspx',6,1);
Insert into VAPPCT.STAT_MENU_OPTION (MENU_OPTION_ID,MENU_OPTION_LABEL,MENU_OPTION_URL,SORT_ORDER,MENU_LEVEL) values (1,'Multi Patient','mp_multi_patient.aspx',2,1);
Insert into VAPPCT.STAT_MENU_OPTION (MENU_OPTION_ID,MENU_OPTION_LABEL,MENU_OPTION_URL,SORT_ORDER,MENU_LEVEL) values (2,'Patient Lookup','pl_patient_lookup.aspx',3,1);
Insert into VAPPCT.STAT_MENU_OPTION (MENU_OPTION_ID,MENU_OPTION_LABEL,MENU_OPTION_URL,SORT_ORDER,MENU_LEVEL) values (7,'Help','app_help.aspx',8,1);
Insert into VAPPCT.STAT_MENU_OPTION (MENU_OPTION_ID,MENU_OPTION_LABEL,MENU_OPTION_URL,SORT_ORDER,MENU_LEVEL) values (6,'Checklist Editor','ce_checklist_editor.aspx',7,1);
Insert into VAPPCT.STAT_MENU_OPTION (MENU_OPTION_ID,MENU_OPTION_LABEL,MENU_OPTION_URL,SORT_ORDER,MENU_LEVEL) values (8,'Home','VAPPCTHome.aspx',1,1);
REM INSERTING into VAPPCT.STAT_OS_DEFINITION
Insert into VAPPCT.STAT_OS_DEFINITION (OS_DEFINITION_ID,OS_DEFINITION_LABEL,STATE_ID) values (3,'Abnormal',4);
Insert into VAPPCT.STAT_OS_DEFINITION (OS_DEFINITION_ID,OS_DEFINITION_LABEL,STATE_ID) values (1,'Unknown',3);
Insert into VAPPCT.STAT_OS_DEFINITION (OS_DEFINITION_ID,OS_DEFINITION_LABEL,STATE_ID) values (2,'Normal',2);
REM INSERTING into VAPPCT.STAT_PLACE_HOLDER
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (201,'Sex','Sex',200,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (202,'Age','Age',200,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (101,'If','if',100,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (102,'Then','then',100,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (103,'Else','else',100,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (111,'and','and',110,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (112,'or','or',110,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (113,'equals','=',110,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (114,'not equals','<>',110,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (115,'greater than','>',110,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (116,'less than','<',110,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (117,'greater than or equal to','>=',110,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (118,'less than or equal to','<=',110,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (511,'Good','Good',510,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (512,'Bad','Bad',510,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (513,'Unknown','Unknown',510,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (521,'Male','Male',520,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (522,'Female','Female',520,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (531,'VistA','VistA',530,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (532,'VAPPCT','VAPPCT',530,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (451,'Value','Value',450,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (461,'Legal Min','LegalMin',460,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (462,'Critical Low','CriticalLow',460,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (463,'Low','Low',460,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (464,'High','High',460,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (465,'Critical High','CriticalHigh',460,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (466,'Legal Max','LegalMax',460,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (481,'State','State',480,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (401,'Date','Date',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (402,'Source','Source',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (403,'Exists','Exists',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (404,'Lookback Time','LookbackTime',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (405,'Temporal State Time Period','TSTimePeriod',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (406,'Temporal State Time Period Date','TSTimePeriodDate',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (710,'Cancel','Cancel',700,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (720,'Disable','Disable',700,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (730,'Set','Set',700,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (731,'Temporal State','TemporalState',730,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (732,'Outcome State','OutcomeState',730,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (733,'Decision State','DecisionState',730,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (104,'Semicolon',';',100,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (200,'Patient','Patient',200,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (100,'Operator','Operator',100,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (500,'Static','Static',500,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (510,'State','State',500,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (520,'Sex','Sex',500,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (530,'Source','Source',500,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (400,'Patient Item','PatientItem',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (700,'Action','Action',700,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (460,'Range','Range',450,1);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (480,'State','State',450,1);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (711,'Checklist','Checklist',710,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (721,'Item','Item',720,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (450,'Component','Component',400,1);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (407,'Summary State State','SummaryState.State',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (408,'Temporal State State','TemporalState.State',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (409,'Outcome State State','OutcomeState.State',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (410,'Decision State State','DecisionState.State',400,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (540,'Value','Value',500,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (541,'Selected','Selected',540,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (542,'Not Selected','NotSelected',540,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (110,'Boolean','Boolean',100,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (130,'Arithmetic','Arithmetic',100,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (131,'Add','+',130,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (132,'Subtract','-',130,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (133,'Multiply','*',130,2);
Insert into VAPPCT.STAT_PLACE_HOLDER (PLACE_HOLDER_ID,PLACE_HOLDER_LABEL,PLACE_HOLDER_SYNTAX,PH_PARENT_ID,IS_GROUP) values (134,'Divide','/',130,2);
REM INSERTING into VAPPCT.STAT_SEX
Insert into VAPPCT.STAT_SEX (SEX_ID,SEX_LABEL,SEX_ABBREVIATION) values (1,'Male','M');
Insert into VAPPCT.STAT_SEX (SEX_ID,SEX_LABEL,SEX_ABBREVIATION) values (2,'Female','F');
Insert into VAPPCT.STAT_SEX (SEX_ID,SEX_LABEL,SEX_ABBREVIATION) values (3,'Unknown','U');
REM INSERTING into VAPPCT.STAT_SOURCE_TYPE
Insert into VAPPCT.STAT_SOURCE_TYPE (SOURCE_TYPE_ID,SOURCE_TYPE_LABEL) values (2,'VAPPCT');
Insert into VAPPCT.STAT_SOURCE_TYPE (SOURCE_TYPE_ID,SOURCE_TYPE_LABEL) values (1,'VistA');
REM INSERTING into VAPPCT.STAT_STATE
Insert into VAPPCT.STAT_STATE (STATE_ID,STATE_LABEL) values (4,'Bad');
Insert into VAPPCT.STAT_STATE (STATE_ID,STATE_LABEL) values (2,'Good');
Insert into VAPPCT.STAT_STATE (STATE_ID,STATE_LABEL) values (1,'Not Selected');
Insert into VAPPCT.STAT_STATE (STATE_ID,STATE_LABEL) values (3,'Unknown');
REM INSERTING into VAPPCT.STAT_TIME_UNIT
Insert into VAPPCT.STAT_TIME_UNIT (TIME_UNIT_ID,TIME_UNIT_LABEL) values (1,'Day(s)');
Insert into VAPPCT.STAT_TIME_UNIT (TIME_UNIT_ID,TIME_UNIT_LABEL) values (2,'Hour(s)');
Insert into VAPPCT.STAT_TIME_UNIT (TIME_UNIT_ID,TIME_UNIT_LABEL) values (3,'Minute(s)');
REM INSERTING into VAPPCT.STAT_TRUE_FALSE
Insert into VAPPCT.STAT_TRUE_FALSE (TRUE_FALSE_ID,TRUE_LABEL,ACTIVE_LABEL,DEFAULT_LABEL,YES_LABEL,ENABLE_LABEL,OVERRIDE_LABEL,SELECTED_LABEL) values (1,'True','Active','Default','Yes','Enable','Overridden','Selected');
Insert into VAPPCT.STAT_TRUE_FALSE (TRUE_FALSE_ID,TRUE_LABEL,ACTIVE_LABEL,DEFAULT_LABEL,YES_LABEL,ENABLE_LABEL,OVERRIDE_LABEL,SELECTED_LABEL) values (2,'False','Inactive','Not Default','No','Disable','Not Overridden','Not Selected');
REM INSERTING into VAPPCT.STAT_TS_DEFINITION
Insert into VAPPCT.STAT_TS_DEFINITION (TS_DEFINITION_ID,TS_DEFINITION_LABEL,STATE_ID) values (1,'Unknown',3);
Insert into VAPPCT.STAT_TS_DEFINITION (TS_DEFINITION_ID,TS_DEFINITION_LABEL,STATE_ID) values (2,'Completed',2);
Insert into VAPPCT.STAT_TS_DEFINITION (TS_DEFINITION_ID,TS_DEFINITION_LABEL,STATE_ID) values (3,'Not Completed',4);
REM INSERTING into VAPPCT.STAT_UR_MO
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (1,4);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (1,5);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (1,6);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (1,7);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (1,8);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (2,1);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (2,2);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (2,3);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (2,7);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (2,8);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (2,9);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (3,1);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (3,2);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (3,3);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (3,7);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (3,8);
Insert into VAPPCT.STAT_UR_MO (USER_ROLE_ID,MENU_OPTION_ID) values (3,9);
REM INSERTING into VAPPCT.STAT_USER_ROLE
Insert into VAPPCT.STAT_USER_ROLE (USER_ROLE_ID,USER_ROLE_LABEL,SECURITY_KEY) values (1,'Administrator','MAGDISP ADMIN');
Insert into VAPPCT.STAT_USER_ROLE (USER_ROLE_ID,USER_ROLE_LABEL,SECURITY_KEY) values (3,'Doctor','PROVIDER');
Insert into VAPPCT.STAT_USER_ROLE (USER_ROLE_ID,USER_ROLE_LABEL,SECURITY_KEY) values (2,'Nurse','ROR VA IRM');
REM INSERTING into VAPPCT.STAT_XFER_SYSTEM
Insert into VAPPCT.STAT_XFER_SYSTEM (XFER_SYSTEM_ID,XFER_SYSTEM) values (1,'MDWS');
REM INSERTING into VAPPCT.USR_CHECKLIST
Insert into VAPPCT.USR_CHECKLIST (CHECKLIST_ID,CHECKLIST_LABEL,SERVICE_ID,CHECKLIST_DESCRIPTION,ACTIVE_ID,NOTE_TITLE_TAG,NOTE_TITLE_CLINIC_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1343,'Pre-Op Checklist Surgical Items',387,'OR Debriefing Checklist',1,'SURGERY NOTES',239,20001,to_date('22-JAN-13','DD-MON-RR'),20001,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_CHECKLIST (CHECKLIST_ID,CHECKLIST_LABEL,SERVICE_ID,CHECKLIST_DESCRIPTION,ACTIVE_ID,NOTE_TITLE_TAG,NOTE_TITLE_CLINIC_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1342,'Checklist One',388,'test',1,'ADMISSION  [NURSING ADMISSION ASSESSMENT ]',422,20001,to_date('22-JAN-13','DD-MON-RR'),20001,to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.USR_CLI_DS
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1102,2,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1102,3,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1103,1,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1103,2,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1103,3,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1062,1,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1062,2,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1062,3,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1063,1,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1063,2,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1063,3,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1097,1,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1097,2,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1097,3,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1343,1102,1,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1342,1096,2,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1342,1096,3,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1342,1103,1,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1342,1098,1,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1342,1098,2,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1342,1098,3,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1342,1096,1,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1342,1103,2,1);
Insert into VAPPCT.USR_CLI_DS (CHECKLIST_ID,ITEM_ID,DS_ID,ACTIVE_ID) values (1342,1103,3,1);
REM INSERTING into VAPPCT.USR_CLI_DS_EDIT
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1342,1096,1);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1342,1096,2);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1342,1096,3);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1342,1098,1);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1342,1098,2);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1342,1098,3);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1342,1103,1);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1342,1103,2);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1342,1103,3);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1343,1062,3);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1343,1063,3);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1343,1097,2);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1343,1097,3);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1343,1102,3);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1343,1103,2);
Insert into VAPPCT.USR_CLI_DS_EDIT (CHECKLIST_ID,ITEM_ID,USER_ROLE_ID) values (1343,1103,3);
REM INSERTING into VAPPCT.USR_CLI_OS
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1102,2,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1102,3,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1103,1,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1103,2,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1103,3,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1062,1,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1062,2,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1062,3,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1063,1,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1063,2,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1063,3,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1097,1,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1097,2,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1097,3,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1343,1102,1,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1342,1096,2,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1342,1096,3,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1342,1103,1,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1342,1098,1,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1342,1098,2,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1342,1098,3,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1342,1096,1,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1342,1103,2,1);
Insert into VAPPCT.USR_CLI_OS (CHECKLIST_ID,ITEM_ID,OS_ID,ACTIVE_ID) values (1342,1103,3,1);
REM INSERTING into VAPPCT.USR_CLI_TS
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1102,2,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1102,3,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1103,1,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1103,2,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1103,3,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1062,1,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1062,2,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1062,3,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1063,1,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1063,2,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1063,3,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1097,1,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1097,2,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1097,3,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1343,1102,1,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1342,1096,2,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1342,1096,3,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1342,1103,1,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1342,1098,1,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1342,1098,2,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1342,1098,3,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1342,1096,1,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1342,1103,2,1);
Insert into VAPPCT.USR_CLI_TS (CHECKLIST_ID,ITEM_ID,TS_ID,ACTIVE_ID) values (1342,1103,3,1);
REM INSERTING into VAPPCT.USR_CL_CLOSEABLE
Insert into VAPPCT.USR_CL_CLOSEABLE (CHECKLIST_ID,USER_ROLE_ID) values (1342,1);
Insert into VAPPCT.USR_CL_CLOSEABLE (CHECKLIST_ID,USER_ROLE_ID) values (1342,2);
Insert into VAPPCT.USR_CL_CLOSEABLE (CHECKLIST_ID,USER_ROLE_ID) values (1342,3);
Insert into VAPPCT.USR_CL_CLOSEABLE (CHECKLIST_ID,USER_ROLE_ID) values (1343,2);
Insert into VAPPCT.USR_CL_CLOSEABLE (CHECKLIST_ID,USER_ROLE_ID) values (1343,3);
REM INSERTING into VAPPCT.USR_CL_ITEM
Insert into VAPPCT.USR_CL_ITEM (CHECKLIST_ID,ITEM_ID,CLI_TS_TIME_PERIOD,TIME_UNIT_ID,SORT_ORDER,ACTIVE_ID,LOGIC) values (1343,1097,12,2,1,1,'if {Date} < {TSTimePeriodDate} then TemporalState.Set(DefaultBadState) else TemporalState.Set(DefaultGoodState); if {SummaryState.State} = {State.Good} then OutcomeState.Set(DefaultGoodState);if {SummaryState.State} = {State.Unknown} then OutcomeState.Set(DefaultUnknownState);if {SummaryState.State} = {State.Bad} then OutcomeState.Set(DefaultBadState); if {TemporalState.State} <> {State.Good} or {OutcomeState.State} <> {State.Good} then DecisionState.Set(DefaultBadState) else DecisionState.Set(DefaultGoodState);');
Insert into VAPPCT.USR_CL_ITEM (CHECKLIST_ID,ITEM_ID,CLI_TS_TIME_PERIOD,TIME_UNIT_ID,SORT_ORDER,ACTIVE_ID,LOGIC) values (1343,1102,9999,1,2,1,'if {Date} < {TSTimePeriodDate} then TemporalState.Set(DefaultBadState) else TemporalState.Set(DefaultGoodState); if {SummaryState.State} = {State.Good} then OutcomeState.Set(DefaultGoodState);if {SummaryState.State} = {State.Unknown} then OutcomeState.Set(DefaultUnknownState);if {SummaryState.State} = {State.Bad} then OutcomeState.Set(DefaultBadState); if {TemporalState.State} <> {State.Good} or {OutcomeState.State} <> {State.Good} then DecisionState.Set(DefaultBadState) else DecisionState.Set(DefaultGoodState);');
Insert into VAPPCT.USR_CL_ITEM (CHECKLIST_ID,ITEM_ID,CLI_TS_TIME_PERIOD,TIME_UNIT_ID,SORT_ORDER,ACTIVE_ID,LOGIC) values (1343,1103,9999,3,3,1,'if {Date} < {TSTimePeriodDate} then TemporalState.Set(DefaultBadState) else TemporalState.Set(DefaultGoodState); if {SummaryState.State} = {State.Good} then OutcomeState.Set(DefaultGoodState);if {SummaryState.State} = {State.Unknown} then OutcomeState.Set(DefaultUnknownState);if {SummaryState.State} = {State.Bad} then OutcomeState.Set(DefaultBadState); if {TemporalState.State} <> {State.Good} or {OutcomeState.State} <> {State.Good} then DecisionState.Set(DefaultBadState) else DecisionState.Set(DefaultGoodState);');
Insert into VAPPCT.USR_CL_ITEM (CHECKLIST_ID,ITEM_ID,CLI_TS_TIME_PERIOD,TIME_UNIT_ID,SORT_ORDER,ACTIVE_ID,LOGIC) values (1343,1062,60,2,4,1,'if {Date} < {TSTimePeriodDate} then TemporalState.Set(DefaultBadState) else TemporalState.Set(DefaultGoodState); if {SummaryState.State} = {State.Good} then OutcomeState.Set(DefaultGoodState);if {SummaryState.State} = {State.Unknown} then OutcomeState.Set(DefaultUnknownState);if {SummaryState.State} = {State.Bad} then OutcomeState.Set(DefaultBadState); if {TemporalState.State} <> {State.Good} or {OutcomeState.State} <> {State.Good} then DecisionState.Set(DefaultBadState) else DecisionState.Set(DefaultGoodState);');
Insert into VAPPCT.USR_CL_ITEM (CHECKLIST_ID,ITEM_ID,CLI_TS_TIME_PERIOD,TIME_UNIT_ID,SORT_ORDER,ACTIVE_ID,LOGIC) values (1343,1063,200,2,5,1,'if {Date} < {TSTimePeriodDate} then TemporalState.Set(DefaultBadState) else TemporalState.Set(DefaultGoodState); if {SummaryState.State} = {State.Good} then OutcomeState.Set(DefaultGoodState);if {SummaryState.State} = {State.Unknown} then OutcomeState.Set(DefaultUnknownState);if {SummaryState.State} = {State.Bad} then OutcomeState.Set(DefaultBadState); if {TemporalState.State} <> {State.Good} or {OutcomeState.State} <> {State.Good} then DecisionState.Set(DefaultBadState) else DecisionState.Set(DefaultGoodState);');
Insert into VAPPCT.USR_CL_ITEM (CHECKLIST_ID,ITEM_ID,CLI_TS_TIME_PERIOD,TIME_UNIT_ID,SORT_ORDER,ACTIVE_ID,LOGIC) values (1342,1103,9999,1,3,1,'if {Date} < {TSTimePeriodDate} then TemporalState.Set(DefaultBadState) else TemporalState.Set(DefaultGoodState); if {SummaryState.State} = {State.Good} then OutcomeState.Set(DefaultGoodState);if {SummaryState.State} = {State.Unknown} then OutcomeState.Set(DefaultUnknownState);if {SummaryState.State} = {State.Bad} then OutcomeState.Set(DefaultBadState); if {TemporalState.State} <> {State.Good} or {OutcomeState.State} <> {State.Good} then DecisionState.Set(DefaultBadState) else DecisionState.Set(DefaultGoodState);');
Insert into VAPPCT.USR_CL_ITEM (CHECKLIST_ID,ITEM_ID,CLI_TS_TIME_PERIOD,TIME_UNIT_ID,SORT_ORDER,ACTIVE_ID,LOGIC) values (1342,1098,9999,1,1,1,'if {Date} < {TSTimePeriodDate} then TemporalState.Set(DefaultBadState) else TemporalState.Set(DefaultGoodState); if {SummaryState.State} = {State.Good} then OutcomeState.Set(DefaultGoodState);if {SummaryState.State} = {State.Unknown} then OutcomeState.Set(DefaultUnknownState);if {SummaryState.State} = {State.Bad} then OutcomeState.Set(DefaultBadState); if {TemporalState.State} <> {State.Good} or {OutcomeState.State} <> {State.Good} then DecisionState.Set(DefaultBadState) else DecisionState.Set(DefaultGoodState);');
Insert into VAPPCT.USR_CL_ITEM (CHECKLIST_ID,ITEM_ID,CLI_TS_TIME_PERIOD,TIME_UNIT_ID,SORT_ORDER,ACTIVE_ID,LOGIC) values (1342,1096,9999,1,2,1,'if {Date} < {TSTimePeriodDate} then TemporalState.Set(DefaultBadState) else TemporalState.Set(DefaultGoodState); if {SummaryState.State} = {State.Good} then OutcomeState.Set(DefaultGoodState);if {SummaryState.State} = {State.Unknown} then OutcomeState.Set(DefaultUnknownState);if {SummaryState.State} = {State.Bad} then OutcomeState.Set(DefaultBadState); if {TemporalState.State} <> {State.Good} or {OutcomeState.State} <> {State.Good} then DecisionState.Set(DefaultBadState) else DecisionState.Set(DefaultGoodState);');
REM INSERTING into VAPPCT.USR_CL_READ_ONLY
Insert into VAPPCT.USR_CL_READ_ONLY (CHECKLIST_ID,USER_ROLE_ID) values (1343,1);
REM INSERTING into VAPPCT.USR_CL_TIU
Insert into VAPPCT.USR_CL_TIU (CHECKLIST_ID,USER_ROLE_ID) values (1343,3);
Insert into VAPPCT.USR_CL_TIU (CHECKLIST_ID,USER_ROLE_ID) values (1342,2);
Insert into VAPPCT.USR_CL_TIU (CHECKLIST_ID,USER_ROLE_ID) values (1342,1);
Insert into VAPPCT.USR_CL_TIU (CHECKLIST_ID,USER_ROLE_ID) values (1342,3);
REM INSERTING into VAPPCT.USR_CL_VIEWABLE
Insert into VAPPCT.USR_CL_VIEWABLE (CHECKLIST_ID,USER_ROLE_ID) values (1342,1);
Insert into VAPPCT.USR_CL_VIEWABLE (CHECKLIST_ID,USER_ROLE_ID) values (1342,2);
Insert into VAPPCT.USR_CL_VIEWABLE (CHECKLIST_ID,USER_ROLE_ID) values (1342,3);
Insert into VAPPCT.USR_CL_VIEWABLE (CHECKLIST_ID,USER_ROLE_ID) values (1343,1);
Insert into VAPPCT.USR_CL_VIEWABLE (CHECKLIST_ID,USER_ROLE_ID) values (1343,2);
Insert into VAPPCT.USR_CL_VIEWABLE (CHECKLIST_ID,USER_ROLE_ID) values (1343,3);
REM INSERTING into VAPPCT.USR_DECISION_STATE
Insert into VAPPCT.USR_DECISION_STATE (DS_ID,DS_LABEL,DS_DEFINITION_ID,IS_ACTIVE,IS_DEFAULT) values (3,'NoGo',3,1,1);
Insert into VAPPCT.USR_DECISION_STATE (DS_ID,DS_LABEL,DS_DEFINITION_ID,IS_ACTIVE,IS_DEFAULT) values (1,'Unknown',1,1,1);
Insert into VAPPCT.USR_DECISION_STATE (DS_ID,DS_LABEL,DS_DEFINITION_ID,IS_ACTIVE,IS_DEFAULT) values (2,'Go',2,1,1);
REM INSERTING into VAPPCT.USR_IC_RANGE
Insert into VAPPCT.USR_IC_RANGE (ITEM_ID,ITEM_COMPONENT_ID,IC_RANGE_ID,UNITS,LEGAL_MIN,CRITICAL_LOW,LOW,HIGH,CRITICAL_HIGH,LEGAL_MAX) values (1098,1266,659,'g/mL',0,50,100,200,500,600);
Insert into VAPPCT.USR_IC_RANGE (ITEM_ID,ITEM_COMPONENT_ID,IC_RANGE_ID,UNITS,LEGAL_MIN,CRITICAL_LOW,LOW,HIGH,CRITICAL_HIGH,LEGAL_MAX) values (1099,1267,660,'mg/L',0,0,1,10,20,30);
Insert into VAPPCT.USR_IC_RANGE (ITEM_ID,ITEM_COMPONENT_ID,IC_RANGE_ID,UNITS,LEGAL_MIN,CRITICAL_LOW,LOW,HIGH,CRITICAL_HIGH,LEGAL_MAX) values (1117,1293,679,'mg/dL',0,0.3,0.59,1.21,1.5,2);
REM INSERTING into VAPPCT.USR_IC_STATE
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1102,1272,697,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1102,1273,698,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1103,1274,699,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1103,1275,700,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1061,1216,666,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1061,1217,667,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1061,1218,668,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1061,1219,669,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1062,1220,670,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1062,1221,671,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1063,1222,672,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1063,1223,673,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1063,1224,674,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1064,1225,675,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1064,1226,676,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1065,1227,677,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1065,1228,678,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1065,1229,679,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1065,1230,680,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1066,1231,681,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1066,1232,682,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1066,1233,683,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1067,1234,684,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1067,1235,685,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1067,1236,686,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1068,1237,687,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1068,1238,688,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1068,1239,689,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1069,1240,690,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1069,1241,691,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1069,1242,692,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1070,1243,693,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1070,1244,694,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1070,1245,695,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1056,1206,657,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1056,1207,658,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1057,1208,659,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1057,1209,660,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1058,1210,661,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1058,1211,662,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1060,1213,663,2);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1060,1214,664,4);
Insert into VAPPCT.USR_IC_STATE (ITEM_ID,ITEM_COMPONENT_ID,IC_STATE_ID,STATE_ID) values (1060,1215,665,3);
REM INSERTING into VAPPCT.USR_ITEM
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1097,'Collection Identity Verification',448,'collection1',0,1,4,'-1',20001,to_date('08-JAN-13','DD-MON-RR'),20001,to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1098,'GLUCOSE',488,'mapped to glucose1',9999,1,1,'175^GLUCOSE',20001,to_date('08-JAN-13','DD-MON-RR'),20001,to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1099,'SODIUM',488,'mapped to sodium',9999,1,1,'176^SODIUM',20001,to_date('08-JAN-13','DD-MON-RR'),20001,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1100,'Collection of Glucose and Sodium',488,'collection of glucose and sodium',0,1,4,'-1',20001,to_date('08-JAN-13','DD-MON-RR'),20001,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1117,'CREATININE',488,'Mapped to Creatinine',9999,1,1,'173^CREATININE',20001,to_date('16-JAN-13','DD-MON-RR'),20001,to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1119,'ANESTHESIA  [ANESTHESIA PREOP ASSESSMENT   ]',448,'Anesthesia Pre Op Assessment',9999,1,5,'ANESTHESIA  [ANESTHESIA PREOP ASSESSMENT   ]',20001,to_date('16-JAN-13','DD-MON-RR'),20001,to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1096,'Collection of OR Briefing Items 1',448,'ok',0,1,4,'-1',20001,to_date('08-JAN-13','DD-MON-RR'),20001,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1061,'Surgical Fire Risk Assessment Score',448,'Surgical Fire Risk Assessment Scoring  
-Procedure site or incision above the xiphoid (1 if Yes, 0 if No)  
  
Please add numbers for each of these items to calculate score.  
-Open oxygen source (face mask/ nasal cannula) (1 if Yes, 0 if No)  
-Ignition source (cautery, laser, fiberoptic light source) (1 if Yes, 0 if No)',3,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1102,'Has Medication been verified?',489,'Yes or no',2222,1,2,'-1',20001,to_date('09-JAN-13','DD-MON-RR'),20001,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1103,'Are all instruments available?',489,'Yes or no',9999,1,2,'-1',20001,to_date('09-JAN-13','DD-MON-RR'),20001,to_date('09-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1104,'Collection Triage',489,'Collection Triage',0,1,4,'-1',20001,to_date('09-JAN-13','DD-MON-RR'),20001,to_date('09-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1118,'Name and Location of VA clinic closest to Veteran''s home',489,'Ask Veteran which VA clinic is closest to their home',9999,1,3,'-1',20001,to_date('16-JAN-13','DD-MON-RR'),20001,to_date('16-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1062,'Surgeon''s description of Procedure',448,'Review expected course, key points of case, estimated length, and timing.',2,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1063,'Intra-op Medications/ Fluids',448,'Intra-op Medications/ Fluids',2,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1064,'High Risk Meds/Fluids: Review safety plan/timing',448,'Please select whether safety plan/timing for High Risk Meds/Fluids has been reviewed.',9,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1065,'Topical',448,'Please Select',2,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1066,'Pre-op Imaging reviewed and verified',448,'Pre-op imaging has been reviewed and verified.',3,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1067,'Fluoro, x-ray or ultrasound needed',448,'Fluoro, x-ray or ultrasound needed',9,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1068,'Equipment/instruments/implants in OR',448,'Verify if equipment/instruments/implants are in OR',2,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1069,'Pathology notified for frozen section',448,'Pathology notified for frozen section',15,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1070,'Will there be a specimen',448,'Will there be a specimen?',15,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1071,'Issue(s) Identified:',448,'Please enter any issues identified.',15,1,3,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1056,'Patient Name Verified',448,'Select whether the Patient''s name has been verified.',2,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1057,'Patient SS# Verified',448,'Select whether the patient''s Social Security Number has been verified.',2,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1058,'Procedure Verified',448,'Select whether procedure has been verified.',2,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1059,'Estimated Length of Operation',448,'Please enter estimated length of Operation (please indicate whether minutes or hours)',9,1,3,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1060,'Laterality/Position with Safety Checkl Complete',448,'Safety Check: Lines, Sheets, Cables Free from bed Rail?',2,1,2,'-1',20001,to_date('26-NOV-12','DD-MON-RR'),20001,to_date('26-NOV-12','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1101,'Pre-Op Checklist 1',489,'free text question',20,1,3,'-1',20001,to_date('08-JAN-13','DD-MON-RR'),20001,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_ITEM (ITEM_ID,ITEM_LABEL,ITEM_GROUP_ID,ITEM_DESCRIPTION,LOOKBACK_TIME,ACTIVE_ID,ITEM_TYPE_ID,MAP_ID,CREATED_BY,DATE_CREATED,LAST_UPDATED_BY,DATE_LAST_UPDATED) values (1116,'Anesthetic Management Items',448,'Please enter an x to select items or enter relevant response',2000,1,3,'-1',20001,to_date('15-JAN-13','DD-MON-RR'),20001,to_date('15-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.USR_ITEM_COLLECTION
Insert into VAPPCT.USR_ITEM_COLLECTION (COLLECTION_ITEM_ID,ITEM_ID,SORT_ORDER) values (1097,1056,1);
Insert into VAPPCT.USR_ITEM_COLLECTION (COLLECTION_ITEM_ID,ITEM_ID,SORT_ORDER) values (1097,1057,2);
Insert into VAPPCT.USR_ITEM_COLLECTION (COLLECTION_ITEM_ID,ITEM_ID,SORT_ORDER) values (1100,1098,1);
Insert into VAPPCT.USR_ITEM_COLLECTION (COLLECTION_ITEM_ID,ITEM_ID,SORT_ORDER) values (1100,1099,2);
Insert into VAPPCT.USR_ITEM_COLLECTION (COLLECTION_ITEM_ID,ITEM_ID,SORT_ORDER) values (1096,1066,1);
Insert into VAPPCT.USR_ITEM_COLLECTION (COLLECTION_ITEM_ID,ITEM_ID,SORT_ORDER) values (1096,1056,2);
Insert into VAPPCT.USR_ITEM_COLLECTION (COLLECTION_ITEM_ID,ITEM_ID,SORT_ORDER) values (1096,1061,3);
Insert into VAPPCT.USR_ITEM_COLLECTION (COLLECTION_ITEM_ID,ITEM_ID,SORT_ORDER) values (1104,1102,1);
Insert into VAPPCT.USR_ITEM_COLLECTION (COLLECTION_ITEM_ID,ITEM_ID,SORT_ORDER) values (1104,1103,2);
REM INSERTING into VAPPCT.USR_ITEM_COMPONENT
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1098,1266,'Value1',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1099,1267,'Value',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1117,1293,'Value',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1119,1296,'Text',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1102,1272,'Yes1',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1102,1273,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1103,1274,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1103,1275,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1118,1294,'Name1',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1118,1295,'Location',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1061,1217,'1',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1061,1218,'2',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1061,1219,'3',4,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1062,1220,'Surgeon has gone over procedure',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1062,1221,'Surgeon has not gone over procedure',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1063,1222,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1063,1223,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1063,1224,'NA',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1064,1225,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1064,1226,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1065,1227,'1:1000 Epinephrine',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1065,1228,'50:50 H2O2NS',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1065,1229,'Papaverine',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1065,1230,'Other: Please enter in Comment area',4,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1066,1231,'Yes ',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1066,1232,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1066,1233,'NA',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1067,1234,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1067,1235,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1067,1236,'NA',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1068,1237,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1068,1238,'No (if these should be in OR)',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1068,1239,'NA',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1069,1240,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1069,1241,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1069,1242,'N/A',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1070,1243,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1070,1244,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1070,1245,'NA',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1071,1246,'Issue(s) Identified:',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1056,1206,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1056,1207,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1057,1208,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1057,1209,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1058,1210,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1058,1211,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1059,1212,'Estimated Length',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1060,1213,'Yes',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1060,1214,'No',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1060,1215,'Other (Please Explain in Comments)',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1101,1268,'Name verified',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1101,1269,'SSN verified',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1101,1270,'Area Clear',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1101,1271,'Instruments Ready',4,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1116,1286,'Allergies: NKA',1,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1116,1287,'Allergies: Yes',2,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1116,1288,'IV antibiotics: Yes',3,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1116,1289,'IV antibioics: NA',4,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1116,1290,'Re-dose: Yes',5,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1116,1291,'Re-does: NA',6,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1116,1292,'Enter ASA Classification #:',7,1);
Insert into VAPPCT.USR_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,ITEM_COMPONENT_LABEL,SORT_ORDER,ACTIVE_ID) values (1061,1216,'0',1,1);
REM INSERTING into VAPPCT.USR_ITEM_GROUP
Insert into VAPPCT.USR_ITEM_GROUP (ITEM_GROUP_ID,ITEM_GROUP_LABEL,IS_ACTIVE) values (488,'Laboratory',1);
Insert into VAPPCT.USR_ITEM_GROUP (ITEM_GROUP_ID,ITEM_GROUP_LABEL,IS_ACTIVE) values (489,'Triage',1);
Insert into VAPPCT.USR_ITEM_GROUP (ITEM_GROUP_ID,ITEM_GROUP_LABEL,IS_ACTIVE) values (508,'Time Out',2);
Insert into VAPPCT.USR_ITEM_GROUP (ITEM_GROUP_ID,ITEM_GROUP_LABEL,IS_ACTIVE) values (509,'OR Debriefing',1);
Insert into VAPPCT.USR_ITEM_GROUP (ITEM_GROUP_ID,ITEM_GROUP_LABEL,IS_ACTIVE) values (448,'OR Briefing',1);
REM INSERTING into VAPPCT.USR_OUTCOME_STATE
Insert into VAPPCT.USR_OUTCOME_STATE (OS_ID,OS_LABEL,OS_DEFINITION_ID,IS_ACTIVE,IS_DEFAULT) values (2,'Normal',2,1,1);
Insert into VAPPCT.USR_OUTCOME_STATE (OS_ID,OS_LABEL,OS_DEFINITION_ID,IS_ACTIVE,IS_DEFAULT) values (3,'Abnormal',3,1,1);
Insert into VAPPCT.USR_OUTCOME_STATE (OS_ID,OS_LABEL,OS_DEFINITION_ID,IS_ACTIVE,IS_DEFAULT) values (1,'Unknown',1,1,1);
REM INSERTING into VAPPCT.USR_PAT_CHECKLIST
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100762',1342,to_date('22-JAN-13','DD-MON-RR'),null,4,2,6708,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('756',1342,to_date('22-JAN-13','DD-MON-RR'),null,4,2,6713,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('747',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6661,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100663',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6666,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100660',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6670,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100557',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6676,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100555',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6682,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100455',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6686,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100452',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6692,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100251',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6699,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100256',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6700,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('314',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6705,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('751',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6653,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100767',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6656,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('520',1342,to_date('22-JAN-13','DD-MON-RR'),null,4,2,6710,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100761',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6669,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('748',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6674,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100558',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6679,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100552',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6683,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100458',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6687,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100456',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6693,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100254',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6697,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100257',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6701,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('756',1342,to_date('22-JAN-13','DD-MON-RR'),null,4,2,6711,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('756',1342,to_date('22-JAN-13','DD-MON-RR'),null,4,2,6712,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('755',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6659,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100759',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6660,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100657',1343,to_date('22-JAN-13','DD-MON-RR'),null,4,1,6646,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100665',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6649,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100763',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6650,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('750',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6657,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100658',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6663,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('752',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6668,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100659',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6672,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100554',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6677,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100556',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6681,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100454',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6685,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100250',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6694,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100255',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6696,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100253',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6702,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('756',1343,to_date('22-JAN-13','DD-MON-RR'),null,4,2,6709,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('520',1342,to_date('22-JAN-13','DD-MON-RR'),to_date('19-FEB-13','DD-MON-RR'),4,2,6644,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('724',1343,to_date('22-JAN-13','DD-MON-RR'),null,4,2,6647,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100662',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6652,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100762',1343,to_date('22-JAN-13','DD-MON-RR'),null,4,2,6654,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100661',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6655,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100664',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6664,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('753',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6665,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('749',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6673,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100553',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6678,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100550',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6680,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100451',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6689,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100453',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6691,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100259',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6698,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100252',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6703,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('211',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6706,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('754',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6651,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100666',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6658,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100765',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6662,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100764',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6667,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100760',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6671,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100549',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6675,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100448',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6684,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100459',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6688,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100457',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6690,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100258',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6695,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('711',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6704,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('296',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6707,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('724',1342,to_date('22-JAN-13','DD-MON-RR'),null,4,3,6714,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100758',1343,to_date('22-JAN-13','DD-MON-RR'),null,4,2,6645,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CHECKLIST (PATIENT_ID,CHECKLIST_ID,ASSIGNMENT_DATE,PROCEDURE_DATE,STATE_ID,CHECKLIST_STATE_ID,PAT_CL_ID,CL_VERSION_DATE,CL_VERSION_PROMPTED) values ('100766',1343,to_date('22-JAN-13','DD-MON-RR'),null,3,1,6648,to_date('22-JAN-13','DD-MON-RR'),to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.USR_PAT_CLI_OVERRIDE
Insert into VAPPCT.USR_PAT_CLI_OVERRIDE (PAT_CL_ID,CHECKLIST_ID,ITEM_ID,USER_ID,TS_ID,OS_ID,DS_ID,OVERRIDE_DATE,OVERRIDE_COMMENT) values (6699,1343,1097,20001,2,1,2,to_date('22-JAN-13','DD-MON-RR'),'Ok to go');
Insert into VAPPCT.USR_PAT_CLI_OVERRIDE (PAT_CL_ID,CHECKLIST_ID,ITEM_ID,USER_ID,TS_ID,OS_ID,DS_ID,OVERRIDE_DATE,OVERRIDE_COMMENT) values (6667,1343,1097,20001,2,1,2,to_date('22-JAN-13','DD-MON-RR'),'All checked');
REM INSERTING into VAPPCT.USR_PAT_CL_ITEM
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100766',1343,1062,3,1,3,6648,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100766',1343,1063,3,1,3,6648,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100766',1343,1097,3,1,3,6648,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100766',1343,1102,3,1,3,6648,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100766',1343,1103,3,1,3,6648,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('754',1343,1062,3,1,3,6651,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('754',1343,1063,3,1,3,6651,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('754',1343,1097,3,1,3,6651,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('754',1343,1102,3,1,3,6651,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('754',1343,1103,3,1,3,6651,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100666',1343,1062,3,1,3,6658,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100666',1343,1063,3,1,3,6658,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100666',1343,1097,3,1,3,6658,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100666',1343,1102,3,1,3,6658,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100666',1343,1103,3,1,3,6658,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100765',1343,1062,3,1,3,6662,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100765',1343,1063,3,1,3,6662,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100765',1343,1097,3,1,3,6662,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100765',1343,1102,3,1,3,6662,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100765',1343,1103,3,1,3,6662,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100764',1343,1062,2,2,2,6667,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100764',1343,1063,2,2,2,6667,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100764',1343,1097,2,1,2,6667,1,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100764',1343,1102,2,2,2,6667,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100764',1343,1103,2,2,2,6667,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100760',1343,1062,3,1,3,6671,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100760',1343,1063,3,1,3,6671,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100760',1343,1097,3,1,3,6671,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100760',1343,1102,3,1,3,6671,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100760',1343,1103,3,1,3,6671,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100549',1343,1062,3,1,3,6675,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100549',1343,1063,3,1,3,6675,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100549',1343,1097,3,1,3,6675,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100549',1343,1102,3,1,3,6675,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100549',1343,1103,3,1,3,6675,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100448',1343,1062,3,1,3,6684,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100448',1343,1063,3,1,3,6684,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100448',1343,1097,3,1,3,6684,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100448',1343,1102,3,1,3,6684,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100448',1343,1103,3,1,3,6684,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100459',1343,1062,3,1,3,6688,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100459',1343,1063,3,1,3,6688,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100459',1343,1097,3,1,3,6688,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100459',1343,1102,3,1,3,6688,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100459',1343,1103,3,1,3,6688,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100457',1343,1062,3,1,3,6690,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100457',1343,1063,3,1,3,6690,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100457',1343,1097,3,1,3,6690,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100457',1343,1102,3,1,3,6690,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100457',1343,1103,3,1,3,6690,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100258',1343,1062,3,1,3,6695,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100258',1343,1063,3,1,3,6695,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100258',1343,1097,3,1,3,6695,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100258',1343,1102,3,1,3,6695,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100258',1343,1103,3,1,3,6695,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('711',1343,1062,3,1,3,6704,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('711',1343,1063,3,1,3,6704,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('711',1343,1097,3,1,3,6704,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('711',1343,1102,3,1,3,6704,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('711',1343,1103,3,1,3,6704,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('296',1343,1062,3,1,3,6707,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('296',1343,1063,3,1,3,6707,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100758',1343,1062,3,1,3,6645,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100758',1343,1063,3,1,3,6645,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100758',1343,1097,3,1,3,6645,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100758',1343,1102,3,1,3,6645,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100758',1343,1103,3,1,3,6645,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('296',1343,1097,3,1,3,6707,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('296',1343,1102,3,1,3,6707,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('296',1343,1103,3,1,3,6707,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('724',1342,1096,3,1,3,6714,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('724',1342,1098,3,1,3,6714,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('724',1342,1103,3,1,3,6714,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('724',1343,1062,3,1,3,6647,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('724',1343,1063,3,1,3,6647,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('724',1343,1097,3,1,3,6647,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('724',1343,1102,3,1,3,6647,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('724',1343,1103,3,1,3,6647,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100662',1343,1062,3,1,3,6652,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100662',1343,1063,3,1,3,6652,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100662',1343,1097,3,1,3,6652,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100662',1343,1102,3,1,3,6652,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100662',1343,1103,3,1,3,6652,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100762',1343,1062,3,1,3,6654,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100762',1343,1063,3,1,3,6654,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100762',1343,1097,3,1,3,6654,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100762',1343,1102,3,1,3,6654,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100762',1343,1103,3,1,3,6654,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100661',1343,1062,3,1,3,6655,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100661',1343,1063,3,1,3,6655,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100661',1343,1097,3,1,3,6655,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100661',1343,1102,3,1,3,6655,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100661',1343,1103,3,1,3,6655,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100664',1343,1062,3,1,3,6664,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100664',1343,1063,3,1,3,6664,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100664',1343,1097,3,1,3,6664,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100664',1343,1102,3,1,3,6664,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100664',1343,1103,3,1,3,6664,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('753',1343,1062,3,1,3,6665,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('753',1343,1063,3,1,3,6665,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('753',1343,1097,3,1,3,6665,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('753',1343,1102,3,1,3,6665,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('753',1343,1103,3,1,3,6665,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('749',1343,1062,3,1,3,6673,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('749',1343,1063,3,1,3,6673,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('749',1343,1097,3,1,3,6673,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('749',1343,1102,3,1,3,6673,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('749',1343,1103,3,1,3,6673,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100553',1343,1062,3,1,3,6678,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100553',1343,1063,3,1,3,6678,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100553',1343,1097,3,1,3,6678,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100553',1343,1102,3,1,3,6678,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100553',1343,1103,3,1,3,6678,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100550',1343,1062,3,1,3,6680,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100550',1343,1063,3,1,3,6680,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100550',1343,1097,3,1,3,6680,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100550',1343,1102,3,1,3,6680,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100550',1343,1103,3,1,3,6680,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100451',1343,1062,3,1,3,6689,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100451',1343,1063,3,1,3,6689,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100451',1343,1097,3,1,3,6689,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100451',1343,1102,3,1,3,6689,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100451',1343,1103,3,1,3,6689,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100453',1343,1062,3,1,3,6691,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100453',1343,1063,3,1,3,6691,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100453',1343,1097,3,1,3,6691,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100453',1343,1102,3,1,3,6691,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100453',1343,1103,3,1,3,6691,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100259',1343,1062,3,1,3,6698,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100259',1343,1063,3,1,3,6698,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100259',1343,1097,3,1,3,6698,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100259',1343,1102,3,1,3,6698,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100259',1343,1103,3,1,3,6698,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100252',1343,1062,3,1,3,6703,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100252',1343,1063,3,1,3,6703,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100252',1343,1097,3,1,3,6703,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100252',1343,1102,3,1,3,6703,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100252',1343,1103,3,1,3,6703,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('211',1343,1062,3,1,3,6706,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('211',1343,1063,3,1,3,6706,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('211',1343,1097,3,1,3,6706,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('211',1343,1102,3,1,3,6706,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('211',1343,1103,3,1,3,6706,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('520',1342,1096,2,1,3,6710,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('520',1342,1098,3,1,3,6710,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('520',1342,1103,2,2,2,6710,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100657',1343,1062,3,1,3,6646,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100657',1343,1063,3,1,3,6646,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100657',1343,1097,3,1,3,6646,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100657',1343,1102,3,1,3,6646,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100657',1343,1103,3,1,3,6646,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100665',1343,1062,3,1,3,6649,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100665',1343,1063,3,1,3,6649,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100665',1343,1097,3,1,3,6649,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100665',1343,1102,3,1,3,6649,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100665',1343,1103,3,1,3,6649,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100763',1343,1062,3,1,3,6650,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100763',1343,1063,3,1,3,6650,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100763',1343,1097,3,1,3,6650,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100763',1343,1102,3,1,3,6650,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100763',1343,1103,3,1,3,6650,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('750',1343,1062,3,1,3,6657,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('750',1343,1063,3,1,3,6657,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('750',1343,1097,3,1,3,6657,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('750',1343,1102,3,1,3,6657,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('750',1343,1103,3,1,3,6657,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100658',1343,1062,3,1,3,6663,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100658',1343,1063,3,1,3,6663,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100658',1343,1097,3,1,3,6663,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100658',1343,1102,3,1,3,6663,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100658',1343,1103,3,1,3,6663,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('752',1343,1062,3,1,3,6668,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('752',1343,1063,3,1,3,6668,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('752',1343,1097,3,1,3,6668,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('752',1343,1102,3,1,3,6668,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('752',1343,1103,3,1,3,6668,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100659',1343,1062,3,1,3,6672,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100659',1343,1063,3,1,3,6672,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100659',1343,1097,3,1,3,6672,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100659',1343,1102,3,1,3,6672,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100659',1343,1103,3,1,3,6672,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100554',1343,1062,3,1,3,6677,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100554',1343,1063,3,1,3,6677,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100554',1343,1097,3,1,3,6677,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100554',1343,1102,3,1,3,6677,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100554',1343,1103,3,1,3,6677,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100556',1343,1062,3,1,3,6681,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100556',1343,1063,3,1,3,6681,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100556',1343,1097,3,1,3,6681,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100556',1343,1102,3,1,3,6681,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100556',1343,1103,3,1,3,6681,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100454',1343,1062,3,1,3,6685,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100454',1343,1063,3,1,3,6685,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100454',1343,1097,3,1,3,6685,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100454',1343,1102,3,1,3,6685,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100454',1343,1103,3,1,3,6685,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100250',1343,1062,3,1,3,6694,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100250',1343,1063,3,1,3,6694,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100250',1343,1097,3,1,3,6694,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100250',1343,1102,3,1,3,6694,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100250',1343,1103,3,1,3,6694,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100255',1343,1062,3,1,3,6696,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100255',1343,1063,3,1,3,6696,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100255',1343,1097,3,1,3,6696,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100255',1343,1102,3,1,3,6696,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100255',1343,1103,3,1,3,6696,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100253',1343,1062,3,1,3,6702,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100253',1343,1063,3,1,3,6702,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100253',1343,1097,3,1,3,6702,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100253',1343,1102,3,1,3,6702,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100253',1343,1103,3,1,3,6702,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1343,1062,3,1,3,6709,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1343,1063,3,1,3,6709,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1343,1097,3,1,3,6709,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1343,1102,3,1,3,6709,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1343,1103,3,1,3,6709,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('520',1342,1096,2,1,3,6644,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('520',1342,1098,3,1,3,6644,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('520',1342,1103,2,2,2,6644,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100767',1343,1062,3,1,3,6656,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100767',1343,1063,3,1,3,6656,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100767',1343,1097,3,1,3,6656,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100767',1343,1102,3,1,3,6656,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100767',1343,1103,3,1,3,6656,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('747',1343,1062,3,1,3,6661,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('747',1343,1063,3,1,3,6661,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('747',1343,1097,3,1,3,6661,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('747',1343,1102,3,1,3,6661,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('747',1343,1103,3,1,3,6661,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100663',1343,1062,3,1,3,6666,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100663',1343,1063,3,1,3,6666,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100663',1343,1097,3,1,3,6666,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100663',1343,1102,3,1,3,6666,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100663',1343,1103,3,1,3,6666,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100660',1343,1062,3,1,3,6670,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100660',1343,1063,3,1,3,6670,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100660',1343,1097,3,1,3,6670,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100660',1343,1102,3,1,3,6670,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100660',1343,1103,3,1,3,6670,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100557',1343,1062,3,1,3,6676,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100557',1343,1063,3,1,3,6676,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100557',1343,1097,3,1,3,6676,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100557',1343,1102,3,1,3,6676,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100557',1343,1103,3,1,3,6676,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100555',1343,1062,3,1,3,6682,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100555',1343,1063,3,1,3,6682,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100555',1343,1097,3,1,3,6682,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100555',1343,1102,3,1,3,6682,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100555',1343,1103,3,1,3,6682,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100455',1343,1062,3,1,3,6686,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100455',1343,1063,3,1,3,6686,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100455',1343,1097,3,1,3,6686,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100455',1343,1102,3,1,3,6686,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100455',1343,1103,3,1,3,6686,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100452',1343,1062,3,1,3,6692,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100452',1343,1063,3,1,3,6692,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100452',1343,1097,3,1,3,6692,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100452',1343,1102,3,1,3,6692,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100452',1343,1103,3,1,3,6692,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100251',1343,1062,2,2,2,6699,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100251',1343,1063,2,2,2,6699,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100251',1343,1097,2,1,2,6699,1,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100251',1343,1102,2,2,2,6699,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100251',1343,1103,2,2,2,6699,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100256',1343,1062,3,1,3,6700,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100256',1343,1063,3,1,3,6700,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100256',1343,1097,3,1,3,6700,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100256',1343,1102,3,1,3,6700,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100256',1343,1103,3,1,3,6700,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('314',1343,1062,3,1,3,6705,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('314',1343,1063,3,1,3,6705,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('314',1343,1097,3,1,3,6705,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('314',1343,1102,3,1,3,6705,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('314',1343,1103,3,1,3,6705,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('751',1343,1062,3,1,3,6653,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('751',1343,1063,3,1,3,6653,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('751',1343,1097,3,1,3,6653,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('751',1343,1102,3,1,3,6653,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('751',1343,1103,3,1,3,6653,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100759',1343,1062,3,1,3,6660,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100759',1343,1063,3,1,3,6660,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100759',1343,1097,3,1,3,6660,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100759',1343,1102,3,1,3,6660,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100759',1343,1103,3,1,3,6660,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100761',1343,1062,3,1,3,6669,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100761',1343,1063,3,1,3,6669,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100761',1343,1097,3,1,3,6669,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100761',1343,1102,3,1,3,6669,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100761',1343,1103,3,1,3,6669,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('748',1343,1062,3,1,3,6674,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('748',1343,1063,3,1,3,6674,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('748',1343,1097,3,1,3,6674,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('748',1343,1102,3,1,3,6674,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('748',1343,1103,3,1,3,6674,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100558',1343,1062,3,1,3,6679,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100558',1343,1063,3,1,3,6679,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100558',1343,1097,3,1,3,6679,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100558',1343,1102,3,1,3,6679,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100558',1343,1103,3,1,3,6679,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100552',1343,1062,3,1,3,6683,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100552',1343,1063,3,1,3,6683,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100552',1343,1097,3,1,3,6683,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100552',1343,1102,3,1,3,6683,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100552',1343,1103,3,1,3,6683,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100458',1343,1062,3,1,3,6687,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100458',1343,1063,3,1,3,6687,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100458',1343,1097,3,1,3,6687,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100458',1343,1102,3,1,3,6687,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100458',1343,1103,3,1,3,6687,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100456',1343,1062,3,1,3,6693,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100456',1343,1063,3,1,3,6693,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100456',1343,1097,3,1,3,6693,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100456',1343,1102,3,1,3,6693,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100456',1343,1103,3,1,3,6693,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100254',1343,1062,3,1,3,6697,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100254',1343,1063,3,1,3,6697,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100254',1343,1097,3,1,3,6697,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100254',1343,1102,3,1,3,6697,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100254',1343,1103,3,1,3,6697,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100257',1343,1062,3,1,3,6701,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100257',1343,1063,3,1,3,6701,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100257',1343,1097,3,1,3,6701,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100257',1343,1102,3,1,3,6701,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100257',1343,1103,3,1,3,6701,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1342,1096,3,1,3,6711,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1342,1098,3,1,3,6711,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1342,1103,3,1,3,6711,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1342,1096,3,1,3,6712,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1342,1098,3,1,3,6712,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1342,1103,3,1,3,6712,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('755',1343,1062,3,1,3,6659,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('755',1343,1063,3,1,3,6659,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('755',1343,1097,3,1,3,6659,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('755',1343,1102,3,1,3,6659,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('755',1343,1103,3,1,3,6659,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100762',1342,1096,3,1,3,6708,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100762',1342,1098,3,1,3,6708,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('100762',1342,1103,3,1,3,6708,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1342,1096,3,1,3,6713,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1342,1098,3,1,3,6713,1,2,null);
Insert into VAPPCT.USR_PAT_CL_ITEM (PATIENT_ID,CHECKLIST_ID,ITEM_ID,TS_ID,OS_ID,DS_ID,PAT_CL_ID,IS_ENABLED,IS_OVERRIDDEN,OVERRIDE_DATE) values ('756',1342,1103,3,1,3,6713,1,2,null);
REM INSERTING into VAPPCT.USR_PAT_CL_ITEM_CMNT
REM INSERTING into VAPPCT.USR_PAT_ITEM
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19782,'100251',to_date('22-JAN-13','DD-MON-RR'),2,1063);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19783,'100251',to_date('22-JAN-13','DD-MON-RR'),2,1056);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19784,'100251',to_date('22-JAN-13','DD-MON-RR'),2,1057);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19785,'100251',to_date('22-JAN-13','DD-MON-RR'),2,1102);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19786,'100764',to_date('22-JAN-13','DD-MON-RR'),2,1056);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19787,'100764',to_date('22-JAN-13','DD-MON-RR'),2,1057);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19780,'100251',to_date('22-JAN-13','DD-MON-RR'),2,1103);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19781,'100251',to_date('22-JAN-13','DD-MON-RR'),2,1062);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19778,'520',to_date('22-JAN-13','DD-MON-RR'),2,1061);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19779,'520',to_date('22-JAN-13','DD-MON-RR'),2,1103);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19776,'520',to_date('22-JAN-13','DD-MON-RR'),2,1066);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19777,'520',to_date('22-JAN-13','DD-MON-RR'),2,1056);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19790,'100764',to_date('22-JAN-13','DD-MON-RR'),2,1062);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19791,'100764',to_date('22-JAN-13','DD-MON-RR'),2,1063);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19788,'100764',to_date('22-JAN-13','DD-MON-RR'),2,1102);
Insert into VAPPCT.USR_PAT_ITEM (PAT_ITEM_ID,PATIENT_ID,ENTRY_DATE,SOURCE_TYPE_ID,ITEM_ID) values (19789,'100764',to_date('22-JAN-13','DD-MON-RR'),2,1103);
REM INSERTING into VAPPCT.USR_PAT_ITEM_CMNT
REM INSERTING into VAPPCT.USR_PAT_ITEM_COMPONENT
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1103,1274,'1',19789);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1103,1275,'2',19789);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1062,1220,'1',19790);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1062,1221,'2',19790);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1063,1222,'1',19791);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1063,1223,'2',19791);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1063,1224,'2',19791);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1102,1272,'1',19788);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1102,1273,'2',19788);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1062,1220,'1',19781);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1062,1221,'2',19781);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1063,1222,'1',19782);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1063,1223,'2',19782);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1063,1224,'2',19782);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1056,1206,'1',19783);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1056,1207,'2',19783);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1057,1208,'1',19784);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1057,1209,'2',19784);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1102,1272,'1',19785);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1102,1273,'2',19785);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1056,1206,'1',19786);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1056,1207,'2',19786);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1057,1208,'1',19787);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1057,1209,'2',19787);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1103,1274,'1',19780);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1103,1275,'2',19780);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1066,1233,'2',19776);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1056,1206,'1',19777);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1056,1207,'2',19777);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1061,1216,'2',19778);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1061,1217,'1',19778);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1061,1218,'2',19778);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1061,1219,'2',19778);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1103,1274,'1',19779);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1103,1275,'2',19779);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1066,1231,'1',19776);
Insert into VAPPCT.USR_PAT_ITEM_COMPONENT (ITEM_ID,ITEM_COMPONENT_ID,COMPONENT_VALUE,PAT_ITEM_ID) values (1066,1232,'2',19776);
REM INSERTING into VAPPCT.USR_SERVICE
Insert into VAPPCT.USR_SERVICE (SERVICE_ID,SERVICE_LABEL,IS_ACTIVE) values (367,'Triage',1);
Insert into VAPPCT.USR_SERVICE (SERVICE_ID,SERVICE_LABEL,IS_ACTIVE) values (387,'OR Debriefing',1);
Insert into VAPPCT.USR_SERVICE (SERVICE_ID,SERVICE_LABEL,IS_ACTIVE) values (388,'CABG',1);
Insert into VAPPCT.USR_SERVICE (SERVICE_ID,SERVICE_LABEL,IS_ACTIVE) values (327,'OR Briefing1',2);
REM INSERTING into VAPPCT.USR_TEMPORAL_STATE
Insert into VAPPCT.USR_TEMPORAL_STATE (TS_ID,TS_LABEL,TS_DEFINITION_ID,IS_ACTIVE,IS_DEFAULT) values (3,'Not Completed',3,1,1);
Insert into VAPPCT.USR_TEMPORAL_STATE (TS_ID,TS_LABEL,TS_DEFINITION_ID,IS_ACTIVE,IS_DEFAULT) values (2,'Completed',2,1,1);
Insert into VAPPCT.USR_TEMPORAL_STATE (TS_ID,TS_LABEL,TS_DEFINITION_ID,IS_ACTIVE,IS_DEFAULT) values (1,'Unknown',1,1,1);
REM INSERTING into VAPPCT.UTL_CLINIC
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (137,'COMP AND PEN',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (246,'CWT CLINIC',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (228,'DENTAL',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (62,'DERMATOLOGY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (285,'DIABETIC',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (191,'DIABETIC TELERET READER LOCAL',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (193,'DIABETIC TELERET READER REMOTE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (190,'DIABETIC TELERETINAL IMAGER',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (133,'EMPLOYEE HEALTH',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (422,'ENDOCRINE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (23,'GENERAL MEDICINE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (298,'GENERAL SURGERY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (229,'HEMATOLOGY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (128,'MAMMOGRAM',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (17,'MENTAL HYGIENE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (26,'MENTAL HYGIENE-OPC',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (114,'NUCLEAR MEDICINE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (234,'OBSERVATION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (127,'PLASTIC SURGERY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (233,'PODIATRY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (32,'PRIMARY CARE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (31,'SOCIAL WORK',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (239,'SURGICAL CLINIC',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (168,'ULTRASOUND',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (64,'AUDIOLOGY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_CLINIC (CLINIC_ID,CLINIC_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (195,'CARDIOLOGY',1,to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.UTL_CLINIC_PATIENT
REM INSERTING into VAPPCT.UTL_LAB_TEST
REM INSERTING into VAPPCT.UTL_NOTE_TITLE
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (40,'ADDICTION  [ASI-ADDICTION SEVERITY INDEX]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (40,'ASI  [ASI-ADDICTION SEVERITY INDEX]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (40,'ASI-ADDICTION SEVERITY INDEX',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1348,'ADHESIONS  [C&P STOMACH, DUODENUM, AND PERITONEAL ADHESIONS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (8,'ADIR  [ADVANCE DIRECTIVE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (8,'ADVANCE  [ADVANCE DIRECTIVE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (8,'ADVANCE DIRECTIVE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1653,'ADMISSION  [NURSING ADMISSION ASSESSMENT ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1653,'ASSESSMENT  [NURSING ADMISSION ASSESSMENT ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1632,'ADVANCE  [ADVANCE DIRECTIVE COMPLETED]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1632,'ADVANCE DIRECTIVE COMPLETED',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (17,'ADVERSE  [ADVERSE REACTION/ALLERGY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (17,'ADVERSE REACTION/ALLERGY',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (17,'ALLERGY  [ADVERSE REACTION/ALLERGY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1405,'ADVERSE  [DISCLOSURE OF ADVERSE EVENT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1296,'AID  [C&P AID AND ATTENDANCE OR HOUSEBOUND EXAM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1296,'ATTENDANCE  [C&P AID AND ATTENDANCE OR HOUSEBOUND EXAM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1296,'C&P AID AND ATTENDANCE OR HOUSEBOUND EXAM',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1342,'AMPUTATIONS  [C&P RESIDUALS OF AMPUTATIONS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1659,'ANESTHESIA  [ANESTHESIA POSTOP ASSESSMENT   ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1659,'ANESTHESIA POSTOP ASSESSMENT   ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1659,'ASSESSMENT  [ANESTHESIA POSTOP ASSESSMENT   ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1658,'ANESTHESIA  [ANESTHESIA PREOP ASSESSMENT   ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1658,'ANESTHESIA PREOP ASSESSMENT   ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1658,'ASSESSMENT  [ANESTHESIA PREOP ASSESSMENT   ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1328,'ANKLE  [C&P JOINTS (SHOULDER, ELBOW, WRIST, HIP, KNEE, ANKLE)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1341,'ANUS  [C&P RECTUM AND ANUS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1297,'ARRHYTHMIAS  [C&P ARRHYTHMIAS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1297,'C&P ARRHYTHMIAS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1298,'ARTERIES  [C&P ARTERIES, VEINS AND MISC]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (826,'ASSESSMENT  [INTERDISCIPLINARY INITIAL PHYSICIAN ASSESSMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (819,'ASSESSMENT  [NF PREOP/HOLDING ASSESSMENT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1651,'ASSESSMENT  [NURSING PREOP ASSESSMENT   ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1366,'ASSESSMENT  [SCI CRAIG HANDICAP ASSESSMENT&REPORTING TECHNIQUE-SHORT FORM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1660,'ATTENDING  [ATTENDING NOTE  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1660,'ATTENDING NOTE  ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1299,'AUDIO  [C&P AUDIO]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1267,'BENEFIT  [TRANSITIONAL PHARMACY BENEFIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1329,'BLADDER  [C&P LIVER, GALL BLADDER, AND PANCREAS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1300,'BONES  [C&P BONES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1301,'BRAIN  [C&P BRAIN AND SPINAL CORD]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1320,'BREAST  [C&P GYNECOLOGICAL CONDITIONS AND DISORDERS OF THE BREAST]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1320,'C&P GYNECOLOGICAL CONDITIONS AND DISORDERS OF THE BREAST',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1298,'C&P ARTERIES, VEINS AND MISC',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1299,'C&P AUDIO',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1300,'C&P BONES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1301,'C&P BRAIN AND SPINAL CORD',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1302,'C&P CHRONIC FATIGUE SYNDROME',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1303,'C&P COLD INJURY PROTOCOL',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1304,'C&P CRANIAL NERVES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1306,'C&P DENTAL AND ORAL',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1307,'C&P DIABETES MELLITUS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1308,'C&P DIGESTIVE CONDITIONS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1309,'C&P EAR DISEASE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1310,'C&P EATING DISORDERS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1311,'C&P ENDOCRINE DISEASES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1312,'C&P EPILEPSY AND NARCOLEPSY',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1313,'C&P ESOPHAGUS AND HIATAL HERNIA',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1293,'C&P EXAMINATION',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1314,'C&P EYE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1315,'C&P FEET',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1316,'C&P FIBROMYALGIA',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1317,'C&P GENERAL MEDICAL',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1318,'C&P GENITOURINARY',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1319,'C&P GULF WAR PROTOCOL',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1321,'C&P HAND, THUMB AND FINGERS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1322,'C&P HEART',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1323,'C&P HEMIC DISORDERS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1324,'C&P HIV-RELATED ILLNESS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1325,'C&P HYPERTENSION',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1326,'C&P INFECTIOUS, IMMUNE AND NUTRITIONAL DISABILITIES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1327,'C&P INTESTINES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1328,'C&P JOINTS (SHOULDER, ELBOW, WRIST, HIP, KNEE, ANKLE)',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1329,'C&P LIVER, GALL BLADDER, AND PANCREAS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1330,'C&P LYMPHATIC DISORDERS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1331,'C&P MENTAL DISORDERS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1332,'C&P MOUTH, LIPS, AND TONGUE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1294,'C&P MULTIPLE EXAM',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1333,'C&P MUSCLES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1334,'C&P NEUROLOGICAL DISORDERS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1335,'C&P NOSE, SINUS, LARYNX, AND PHARYNX',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1336,'C&P PERIPHERAL NERVES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1337,'C&P PRISONER OF WAR PROTOCOL',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1338,'C&P PTSD, INITIAL EVALUATION',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1339,'C&P PTSD, REVIEW',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1340,'C&P PULMONARY TUBERCULOSIS AND MYCOBACTERIAL DISEASES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1341,'C&P RECTUM AND ANUS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1342,'C&P RESIDUALS OF AMPUTATIONS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1343,'C&P RESPIRATORY',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1344,'C&P SCARS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1345,'C&P SENSE OF SMELL AND TASTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1346,'C&P SKIN DISEASES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1347,'C&P SPINE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1348,'C&P STOMACH, DUODENUM, AND PERITONEAL ADHESIONS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1349,'C&P THYROID AND PARATHYROID DISEASES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (4,'CALL  [HOMELESS CALL CENTER REFERRAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1633,'CARDIOLOGY  [CARDIOLOGY NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1633,'CARDIOLOGY NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1619,'CARE  [CARE COORDINATION HOME TELEHEALTH DISCHARGE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1619,'CARE COORDINATION HOME TELEHEALTH DISCHARGE NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1620,'CARE  [CARE COORDINATION HOME TELEHEALTH EDUCATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1620,'CARE COORDINATION HOME TELEHEALTH EDUCATION NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1621,'CARE  [CARE COORDINATION HOME TELEHEALTH EVALUATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1621,'CARE COORDINATION HOME TELEHEALTH EVALUATION NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1622,'CARE  [CARE COORDINATION HOME TELEHEALTH EVALUATION TREATMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1622,'CARE COORDINATION HOME TELEHEALTH EVALUATION TREATMENT PLAN',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1617,'CARE  [CARE COORDINATION HOME TELEHEALTH SCREENING CONSULT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1617,'CARE COORDINATION HOME TELEHEALTH SCREENING CONSULT',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1623,'CARE  [CARE COORDINATION HOME TELEHEALTH SUBSEQUENT EVAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1623,'CARE COORDINATION HOME TELEHEALTH SUBSEQUENT EVAL NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1624,'CARE  [CARE COORDINATION HOME TELEHEALTH SUMMARY OF EPISODE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1624,'CARE COORDINATION HOME TELEHEALTH SUMMARY OF EPISODE NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1625,'CARE  [CARE COORDINATION HOME TELEHEALTH TELEPHONE ENCOUNTER NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1625,'CARE COORDINATION HOME TELEHEALTH TELEPHONE ENCOUNTER NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1626,'CARE  [CARE COORDINATION HOME TELEHEALTH VIDEO VISIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1626,'CARE COORDINATION HOME TELEHEALTH VIDEO VISIT NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (822,'CARE  [INTERDISCIPLINARY PLAN-CARE MANAGEMENT (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (22,'CARE  [PRIMARY CARE GENERAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (18,'CARE  [PRIMARY CARE TELEPHONE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (16,'CARE  [PRIMARY CARE VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1356,'CATEGORY  [PATIENT RECORD FLAG CATEGORY II - INFECTIOUS DISEASE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1355,'CATEGORY  [PATIENT RECORD FLAG CATEGORY II - RESEARCH STUDY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1353,'CATEGORY  [PATIENT RECORD FLAG CATEGORY II - RISK, FALL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1354,'CATEGORY  [PATIENT RECORD FLAG CATEGORY II - RISK, WANDERING]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (4,'CENTER  [HOMELESS CALL CENTER REFERRAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1295,'ACROMEGALY  [C&P ACROMEGALY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1295,'C&P ACROMEGALY',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1302,'CHRONIC  [C&P CHRONIC FATIGUE SYNDROME]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (6,'CLINIC  [GI CLINIC NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (5,'CLINIC  [MOVE! CLINIC VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1391,'CLINIC  [VISUAL IMPAIRMENT CLINIC INITIAL VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (15,'CLINICAL  [CLINICAL WARNING]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (15,'CLINICAL WARNING',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (15,'CW  [CLINICAL WARNING]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (20,'CN  [CRISIS NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (20,'CRISIS  [CRISIS NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (20,'CRISIS NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1303,'COLD  [C&P COLD INJURY PROTOCOL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1632,'COMPLETED  [ADVANCE DIRECTIVE COMPLETED]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1308,'CONDITIONS  [C&P DIGESTIVE CONDITIONS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1320,'CONDITIONS  [C&P GYNECOLOGICAL CONDITIONS AND DISORDERS OF THE BREAST]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1387,'CONSENT  [IMED CONSENT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1656,'CONSENT  [INFORMED CONSENT ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1617,'CONSULT  [CARE COORDINATION HOME TELEHEALTH SCREENING CONSULT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1617,'COORDINATION  [CARE COORDINATION HOME TELEHEALTH SCREENING CONSULT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1627,'CONSULT  [DIABETIC RETINOPATHY SURVEILLANCE CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1627,'DIABETIC  [DIABETIC RETINOPATHY SURVEILLANCE CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1628,'CONSULT  [DIABETIC TELERETINAL IMAGING CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (9,'CONSULT  [DIETICIAN CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1631,'CONSULT  [GENERIC CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1630,'CONSULT  [OPHTHALMOLOGIST CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1637,'CONSULT  [VEHU IMAGING CONSULT RESULT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1619,'COORDINATION  [CARE COORDINATION HOME TELEHEALTH DISCHARGE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1620,'COORDINATION  [CARE COORDINATION HOME TELEHEALTH EDUCATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1621,'COORDINATION  [CARE COORDINATION HOME TELEHEALTH EVALUATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1622,'COORDINATION  [CARE COORDINATION HOME TELEHEALTH EVALUATION TREATMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1623,'COORDINATION  [CARE COORDINATION HOME TELEHEALTH SUBSEQUENT EVAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1624,'COORDINATION  [CARE COORDINATION HOME TELEHEALTH SUMMARY OF EPISODE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1625,'COORDINATION  [CARE COORDINATION HOME TELEHEALTH TELEPHONE ENCOUNTER NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1626,'COORDINATION  [CARE COORDINATION HOME TELEHEALTH VIDEO VISIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1301,'CORD  [C&P BRAIN AND SPINAL CORD]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1366,'CRAIG  [SCI CRAIG HANDICAP ASSESSMENT&REPORTING TECHNIQUE-SHORT FORM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1304,'CRANIAL  [C&P CRANIAL NERVES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (117,'CRISIS',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1306,'DENTAL  [C&P DENTAL AND ORAL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1634,'DERMATOLOGY  [DERMATOLOGY NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1634,'DERMATOLOGY NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1307,'DIABETES  [C&P DIABETES MELLITUS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1627,'DIABETIC RETINOPATHY SURVEILLANCE CONSULT NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1628,'DIABETIC  [DIABETIC TELERETINAL IMAGING CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1628,'DIABETIC TELERETINAL IMAGING CONSULT NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1367,'DIENER  [SCI DIENER SATISFACTION WITH LIFE SCALE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (9,'DIETICIAN  [DIETICIAN CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (9,'DIETICIAN CONSULT NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1308,'DIGESTIVE  [C&P DIGESTIVE CONDITIONS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1632,'DIRECTIVE  [ADVANCE DIRECTIVE COMPLETED]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (8,'DIRECTIVE  [ADVANCE DIRECTIVE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1326,'DISABILITIES  [C&P INFECTIOUS, IMMUNE AND NUTRITIONAL DISABILITIES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1619,'DISCHARGE  [CARE COORDINATION HOME TELEHEALTH DISCHARGE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1655,'DISCHARGE  [NURSING DISCHARGE INSTRUCTIONS ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1405,'DISCLOSURE  [DISCLOSURE OF ADVERSE EVENT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1405,'DISCLOSURE OF ADVERSE EVENT NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1405,'EVENT  [DISCLOSURE OF ADVERSE EVENT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1309,'DISEASE  [C&P EAR DISEASE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1309,'EAR  [C&P EAR DISEASE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1356,'DISEASE  [PATIENT RECORD FLAG CATEGORY II - INFECTIOUS DISEASE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1311,'DISEASES  [C&P ENDOCRINE DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1311,'ENDOCRINE  [C&P ENDOCRINE DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1340,'DISEASES  [C&P PULMONARY TUBERCULOSIS AND MYCOBACTERIAL DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1346,'DISEASES  [C&P SKIN DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1349,'DISEASES  [C&P THYROID AND PARATHYROID DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1310,'DISORDERS  [C&P EATING DISORDERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1310,'EATING  [C&P EATING DISORDERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1320,'DISORDERS  [C&P GYNECOLOGICAL CONDITIONS AND DISORDERS OF THE BREAST]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1323,'DISORDERS  [C&P HEMIC DISORDERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1330,'DISORDERS  [C&P LYMPHATIC DISORDERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1331,'DISORDERS  [C&P MENTAL DISORDERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1334,'DISORDERS  [C&P NEUROLOGICAL DISORDERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1348,'DUODENUM  [C&P STOMACH, DUODENUM, AND PERITONEAL ADHESIONS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1620,'EDUCATION  [CARE COORDINATION HOME TELEHEALTH EDUCATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1328,'ELBOW  [C&P JOINTS (SHOULDER, ELBOW, WRIST, HIP, KNEE, ANKLE)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1625,'ENCOUNTER  [CARE COORDINATION HOME TELEHEALTH TELEPHONE ENCOUNTER NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1312,'EPILEPSY  [C&P EPILEPSY AND NARCOLEPSY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1624,'EPISODE  [CARE COORDINATION HOME TELEHEALTH SUMMARY OF EPISODE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1313,'ESOPHAGUS  [C&P ESOPHAGUS AND HIATAL HERNIA]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1623,'EVAL  [CARE COORDINATION HOME TELEHEALTH SUBSEQUENT EVAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1338,'EVALUATION  [C&P PTSD, INITIAL EVALUATION]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1621,'EVALUATION  [CARE COORDINATION HOME TELEHEALTH EVALUATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1622,'EVALUATION  [CARE COORDINATION HOME TELEHEALTH EVALUATION TREATMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1649,'EVALUATION  [NURSING SURGICAL EVALUATION UNIT  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1296,'EXAM  [C&P AID AND ATTENDANCE OR HOUSEBOUND EXAM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1294,'EXAM  [C&P MULTIPLE EXAM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1390,'EXAM  [VISUAL IMPAIRMENT MEDICAL EXAM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1293,'EXAMINATION  [C&P EXAMINATION]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1314,'EYE  [C&P EYE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (832,'FALL  [FALL RISK]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (832,'FALL RISK',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1353,'FALL  [PATIENT RECORD FLAG CATEGORY II - RISK, FALL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1353,'FLAG  [PATIENT RECORD FLAG CATEGORY II - RISK, FALL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1302,'FATIGUE  [C&P CHRONIC FATIGUE SYNDROME]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1315,'FEET  [C&P FEET]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1316,'FIBROMYALGIA  [C&P FIBROMYALGIA]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1321,'FINGERS  [C&P HAND, THUMB AND FINGERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1321,'HAND  [C&P HAND, THUMB AND FINGERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1356,'FLAG  [PATIENT RECORD FLAG CATEGORY II - INFECTIOUS DISEASE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1355,'FLAG  [PATIENT RECORD FLAG CATEGORY II - RESEARCH STUDY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1354,'FLAG  [PATIENT RECORD FLAG CATEGORY II - RISK, WANDERING]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1366,'FORM  [SCI CRAIG HANDICAP ASSESSMENT&REPORTING TECHNIQUE-SHORT FORM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1366,'HANDICAP  [SCI CRAIG HANDICAP ASSESSMENT&REPORTING TECHNIQUE-SHORT FORM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1364,'FUNCTIONAL  [SCI FUNCTIONAL INDEPENDENCE MEASURE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (17,'GADR  [ADVERSE REACTION/ALLERGY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1329,'GALL  [C&P LIVER, GALL BLADDER, AND PANCREAS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1317,'GENERAL  [C&P GENERAL MEDICAL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1657,'GENERAL  [GENERAL SURGERY RESIDENT NOTE  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1657,'GENERAL SURGERY RESIDENT NOTE  ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1388,'GENERAL  [IMED GENERAL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (22,'GENERAL  [PRIMARY CARE GENERAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1365,'GENERAL  [SCI GENERAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1631,'GENERIC  [GENERIC CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1631,'GENERIC CONSULT NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1318,'GENITOURINARY  [C&P GENITOURINARY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (6,'GI CLINIC NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1319,'GULF  [C&P GULF WAR PROTOCOL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1320,'GYNECOLOGICAL  [C&P GYNECOLOGICAL CONDITIONS AND DISORDERS OF THE BREAST]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (134,'H&P',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1322,'HEART  [C&P HEART]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1323,'HEMIC  [C&P HEMIC DISORDERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1313,'HERNIA  [C&P ESOPHAGUS AND HIATAL HERNIA]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1313,'HIATAL  [C&P ESOPHAGUS AND HIATAL HERNIA]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1328,'HIP  [C&P JOINTS (SHOULDER, ELBOW, WRIST, HIP, KNEE, ANKLE)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1324,'HIV  [C&P HIV-RELATED ILLNESS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (819,'HOLDING  [NF PREOP/HOLDING ASSESSMENT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1619,'HOME  [CARE COORDINATION HOME TELEHEALTH DISCHARGE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1620,'HOME  [CARE COORDINATION HOME TELEHEALTH EDUCATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1621,'HOME  [CARE COORDINATION HOME TELEHEALTH EVALUATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1622,'HOME  [CARE COORDINATION HOME TELEHEALTH EVALUATION TREATMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1617,'HOME  [CARE COORDINATION HOME TELEHEALTH SCREENING CONSULT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1623,'HOME  [CARE COORDINATION HOME TELEHEALTH SUBSEQUENT EVAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1624,'HOME  [CARE COORDINATION HOME TELEHEALTH SUMMARY OF EPISODE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1625,'HOME  [CARE COORDINATION HOME TELEHEALTH TELEPHONE ENCOUNTER NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1626,'HOME  [CARE COORDINATION HOME TELEHEALTH VIDEO VISIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (4,'HOMELESS  [HOMELESS CALL CENTER REFERRAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (4,'HOMELESS CALL CENTER REFERRAL NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1296,'HOUSEBOUND  [C&P AID AND ATTENDANCE OR HOUSEBOUND EXAM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (134,'HP  [H&P]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1259,'HYPERTENSION',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1325,'HYPERTENSION  [C&P HYPERTENSION]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1324,'ILLNESS  [C&P HIV-RELATED ILLNESS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1628,'IMAGING  [DIABETIC TELERETINAL IMAGING CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1637,'IMAGING  [VEHU IMAGING CONSULT RESULT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1387,'IMED  [IMED CONSENT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1387,'IMED CONSENT',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1388,'IMED  [IMED GENERAL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1388,'IMED GENERAL',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1326,'IMMUNE  [C&P INFECTIOUS, IMMUNE AND NUTRITIONAL DISABILITIES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1326,'INFECTIOUS  [C&P INFECTIOUS, IMMUNE AND NUTRITIONAL DISABILITIES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1391,'IMPAIRMENT  [VISUAL IMPAIRMENT CLINIC INITIAL VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1391,'INITIAL  [VISUAL IMPAIRMENT CLINIC INITIAL VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1390,'IMPAIRMENT  [VISUAL IMPAIRMENT MEDICAL EXAM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1364,'INDEPENDENCE  [SCI FUNCTIONAL INDEPENDENCE MEASURE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (40,'INDEX  [ASI-ADDICTION SEVERITY INDEX]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1356,'INFECTIOUS  [PATIENT RECORD FLAG CATEGORY II - INFECTIOUS DISEASE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1656,'INFORMED  [INFORMED CONSENT ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1656,'INFORMED CONSENT ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1338,'INITIAL  [C&P PTSD, INITIAL EVALUATION]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (826,'INITIAL  [INTERDISCIPLINARY INITIAL PHYSICIAN ASSESSMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (826,'INTERDISCIPLINARY  [INTERDISCIPLINARY INITIAL PHYSICIAN ASSESSMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (826,'INTERDISCIPLINARY INITIAL PHYSICIAN ASSESSMENT PLAN',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1303,'INJURY  [C&P COLD INJURY PROTOCOL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1655,'INSTRUCTIONS  [NURSING DISCHARGE INSTRUCTIONS ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (822,'INTERDISCIPLINARY  [INTERDISCIPLINARY PLAN-CARE MANAGEMENT (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (822,'INTERDISCIPLINARY PLAN-CARE MANAGEMENT (M)',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (823,'INTERDISCIPLINARY  [INTERDISCIPLINARY PLAN-NURSING (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (824,'INTERDISCIPLINARY  [INTERDISCIPLINARY PLAN-NUTRITION (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (825,'INTERDISCIPLINARY  [INTERDISCIPLINARY PLAN-SOCIAL WORK (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (825,'INTERDISCIPLINARY PLAN-SOCIAL WORK (M)',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (822,'MANAGEMENT  [INTERDISCIPLINARY PLAN-CARE MANAGEMENT (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (823,'INTERDISCIPLINARY PLAN-NURSING (M)',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (824,'INTERDISCIPLINARY PLAN-NUTRITION (M)',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1327,'INTESTINES  [C&P INTESTINES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1328,'JOINTS  [C&P JOINTS (SHOULDER, ELBOW, WRIST, HIP, KNEE, ANKLE)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1328,'KNEE  [C&P JOINTS (SHOULDER, ELBOW, WRIST, HIP, KNEE, ANKLE)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1335,'LARYNX  [C&P NOSE, SINUS, LARYNX, AND PHARYNX]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1335,'NOSE  [C&P NOSE, SINUS, LARYNX, AND PHARYNX]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1367,'LIFE  [SCI DIENER SATISFACTION WITH LIFE SCALE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1332,'LIPS  [C&P MOUTH, LIPS, AND TONGUE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1332,'MOUTH  [C&P MOUTH, LIPS, AND TONGUE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1329,'LIVER  [C&P LIVER, GALL BLADDER, AND PANCREAS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1330,'LYMPHATIC  [C&P LYMPHATIC DISORDERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (163,'LYMPHOMA',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1364,'MEASURE  [SCI FUNCTIONAL INDEPENDENCE MEASURE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1317,'MEDICAL  [C&P GENERAL MEDICAL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1390,'MEDICAL  [VISUAL IMPAIRMENT MEDICAL EXAM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1669,'MEDICATION  [MEDICATION RECONCILIATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1669,'MEDICATION RECONCILIATION NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1650,'MEDICATION  [MEDICATION RECONCILIATION]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1650,'MEDICATION RECONCILIATION',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (833,'MEDICATION  [OUTSIDE MEDICATION]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1307,'MELLITUS  [C&P DIABETES MELLITUS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1331,'MENTAL  [C&P MENTAL DISORDERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1298,'MISC  [C&P ARTERIES, VEINS AND MISC]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (5,'MOVE  [MOVE! CLINIC VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (5,'MOVE! CLINIC VISIT',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1294,'MULTIPLE  [C&P MULTIPLE EXAM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1333,'MUSCLES  [C&P MUSCLES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1340,'MYCOBACTERIAL  [C&P PULMONARY TUBERCULOSIS AND MYCOBACTERIAL DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1312,'NARCOLEPSY  [C&P EPILEPSY AND NARCOLEPSY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1304,'NERVES  [C&P CRANIAL NERVES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1336,'NERVES  [C&P PERIPHERAL NERVES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1334,'NEUROLOGICAL  [C&P NEUROLOGICAL DISORDERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (819,'NF PREOP/HOLDING ASSESSMENT',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1660,'NOTE  [ATTENDING NOTE  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1633,'NOTE  [CARDIOLOGY NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1619,'NOTE  [CARE COORDINATION HOME TELEHEALTH DISCHARGE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1620,'NOTE  [CARE COORDINATION HOME TELEHEALTH EDUCATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1621,'NOTE  [CARE COORDINATION HOME TELEHEALTH EVALUATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1623,'NOTE  [CARE COORDINATION HOME TELEHEALTH SUBSEQUENT EVAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1624,'NOTE  [CARE COORDINATION HOME TELEHEALTH SUMMARY OF EPISODE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1625,'NOTE  [CARE COORDINATION HOME TELEHEALTH TELEPHONE ENCOUNTER NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1626,'NOTE  [CARE COORDINATION HOME TELEHEALTH VIDEO VISIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (20,'NOTE  [CRISIS NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1634,'NOTE  [DERMATOLOGY NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1627,'NOTE  [DIABETIC RETINOPATHY SURVEILLANCE CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1628,'NOTE  [DIABETIC TELERETINAL IMAGING CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (9,'NOTE  [DIETICIAN CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1405,'NOTE  [DISCLOSURE OF ADVERSE EVENT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1657,'NOTE  [GENERAL SURGERY RESIDENT NOTE  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1631,'NOTE  [GENERIC CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (6,'NOTE  [GI CLINIC NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (4,'NOTE  [HOMELESS CALL CENTER REFERRAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1669,'NOTE  [MEDICATION RECONCILIATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (116,'NOTE  [NURSING NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (116,'NURSING  [NURSING NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (116,'NURSING NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1630,'NOTE  [OPHTHALMOLOGIST CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1630,'OPHTHALMOLOGIST  [OPHTHALMOLOGIST CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1630,'OPHTHALMOLOGIST CONSULT NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1635,'NOTE  [OPHTHALMOLOGY NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1635,'OPHTHALMOLOGY  [OPHTHALMOLOGY NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1635,'OPHTHALMOLOGY NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (22,'NOTE  [PRIMARY CARE GENERAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1365,'NOTE  [SCI GENERAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1267,'NOTE  [TRANSITIONAL PHARMACY BENEFIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (125,'NOTES  [SURGERY NOTES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (823,'NURSING  [INTERDISCIPLINARY PLAN-NURSING (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1653,'NURSING  [NURSING ADMISSION ASSESSMENT ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1653,'NURSING ADMISSION ASSESSMENT ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1655,'NURSING  [NURSING DISCHARGE INSTRUCTIONS ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1655,'NURSING DISCHARGE INSTRUCTIONS ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1651,'NURSING  [NURSING PREOP ASSESSMENT   ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1651,'NURSING PREOP ASSESSMENT   ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1654,'NURSING  [NURSING REASSESSMENT  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1654,'NURSING REASSESSMENT  ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1649,'NURSING  [NURSING SURGICAL EVALUATION UNIT  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1649,'NURSING SURGICAL EVALUATION UNIT  ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (824,'NUTRITION  [INTERDISCIPLINARY PLAN-NUTRITION (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1326,'NUTRITIONAL  [C&P INFECTIOUS, IMMUNE AND NUTRITIONAL DISABILITIES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1306,'ORAL  [C&P DENTAL AND ORAL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (833,'OUTSIDE  [OUTSIDE MEDICATION]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (833,'OUTSIDE MEDICATION',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1329,'PANCREAS  [C&P LIVER, GALL BLADDER, AND PANCREAS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1349,'PARATHYROID  [C&P THYROID AND PARATHYROID DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (123,'PATIENT  [PATIENT ED]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (123,'PATIENT ED',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1356,'PATIENT  [PATIENT RECORD FLAG CATEGORY II - INFECTIOUS DISEASE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1356,'PATIENT RECORD FLAG CATEGORY II - INFECTIOUS DISEASE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1355,'PATIENT  [PATIENT RECORD FLAG CATEGORY II - RESEARCH STUDY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1355,'PATIENT RECORD FLAG CATEGORY II - RESEARCH STUDY',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1353,'PATIENT  [PATIENT RECORD FLAG CATEGORY II - RISK, FALL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1353,'PATIENT RECORD FLAG CATEGORY II - RISK, FALL',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1354,'PATIENT  [PATIENT RECORD FLAG CATEGORY II - RISK, WANDERING]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1354,'PATIENT RECORD FLAG CATEGORY II - RISK, WANDERING',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1652,'PATIENT  [PROCEDURE PATIENT SITE VERIFICATION  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1652,'PROCEDURE  [PROCEDURE PATIENT SITE VERIFICATION  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1652,'PROCEDURE PATIENT SITE VERIFICATION  ',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1336,'PERIPHERAL  [C&P PERIPHERAL NERVES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1348,'PERITONEAL  [C&P STOMACH, DUODENUM, AND PERITONEAL ADHESIONS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1267,'PHARMACY  [TRANSITIONAL PHARMACY BENEFIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1335,'PHARYNX  [C&P NOSE, SINUS, LARYNX, AND PHARYNX]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (826,'PHYSICIAN  [INTERDISCIPLINARY INITIAL PHYSICIAN ASSESSMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (826,'PLAN  [INTERDISCIPLINARY INITIAL PHYSICIAN ASSESSMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1622,'PLAN  [CARE COORDINATION HOME TELEHEALTH EVALUATION TREATMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (822,'PLAN  [INTERDISCIPLINARY PLAN-CARE MANAGEMENT (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (823,'PLAN  [INTERDISCIPLINARY PLAN-NURSING (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (824,'PLAN  [INTERDISCIPLINARY PLAN-NUTRITION (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (825,'PLAN  [INTERDISCIPLINARY PLAN-SOCIAL WORK (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1659,'POSTOP  [ANESTHESIA POSTOP ASSESSMENT   ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1658,'PREOP  [ANESTHESIA PREOP ASSESSMENT   ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (819,'PREOP  [NF PREOP/HOLDING ASSESSMENT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1651,'PREOP  [NURSING PREOP ASSESSMENT   ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (22,'PRIMARY  [PRIMARY CARE GENERAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (22,'PRIMARY CARE GENERAL NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (18,'PRIMARY  [PRIMARY CARE TELEPHONE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (18,'PRIMARY CARE TELEPHONE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (16,'PRIMARY  [PRIMARY CARE VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (16,'PRIMARY CARE VISIT',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1337,'PRISONER  [C&P PRISONER OF WAR PROTOCOL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1337,'PROTOCOL  [C&P PRISONER OF WAR PROTOCOL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1303,'PROTOCOL  [C&P COLD INJURY PROTOCOL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1319,'PROTOCOL  [C&P GULF WAR PROTOCOL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1338,'PTSD  [C&P PTSD, INITIAL EVALUATION]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1339,'PTSD  [C&P PTSD, REVIEW]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1339,'REVIEW  [C&P PTSD, REVIEW]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1340,'PULMONARY  [C&P PULMONARY TUBERCULOSIS AND MYCOBACTERIAL DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (17,'REACTION  [ADVERSE REACTION/ALLERGY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1654,'REASSESSMENT  [NURSING REASSESSMENT  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1669,'RECONCILIATION  [MEDICATION RECONCILIATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1650,'RECONCILIATION  [MEDICATION RECONCILIATION]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1356,'RECORD  [PATIENT RECORD FLAG CATEGORY II - INFECTIOUS DISEASE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1355,'RECORD  [PATIENT RECORD FLAG CATEGORY II - RESEARCH STUDY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1355,'RESEARCH  [PATIENT RECORD FLAG CATEGORY II - RESEARCH STUDY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1353,'RECORD  [PATIENT RECORD FLAG CATEGORY II - RISK, FALL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1353,'RISK  [PATIENT RECORD FLAG CATEGORY II - RISK, FALL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1354,'RECORD  [PATIENT RECORD FLAG CATEGORY II - RISK, WANDERING]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1354,'RISK  [PATIENT RECORD FLAG CATEGORY II - RISK, WANDERING]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (126,'RECOVERY  [RECOVERY ROOM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (126,'RECOVERY ROOM',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (126,'ROOM  [RECOVERY ROOM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1341,'RECTUM  [C&P RECTUM AND ANUS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (4,'REFERRAL  [HOMELESS CALL CENTER REFERRAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1324,'RELATED  [C&P HIV-RELATED ILLNESS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1366,'REPORTING  [SCI CRAIG HANDICAP ASSESSMENT&REPORTING TECHNIQUE-SHORT FORM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1366,'SCI  [SCI CRAIG HANDICAP ASSESSMENT&REPORTING TECHNIQUE-SHORT FORM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1366,'SCI CRAIG HANDICAP ASSESSMENT&REPORTING TECHNIQUE-SHORT FORM',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1366,'SCIC  [SCI CRAIG HANDICAP ASSESSMENT&REPORTING TECHNIQUE-SHORT FORM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1657,'RESIDENT  [GENERAL SURGERY RESIDENT NOTE  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1342,'RESIDUALS  [C&P RESIDUALS OF AMPUTATIONS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1343,'RESPIRATORY  [C&P RESPIRATORY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1637,'RESULT  [VEHU IMAGING CONSULT RESULT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1627,'RETINOPATHY  [DIABETIC RETINOPATHY SURVEILLANCE CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (832,'RISK  [FALL RISK]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1367,'SATISFACTION  [SCI DIENER SATISFACTION WITH LIFE SCALE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1367,'SCALE  [SCI DIENER SATISFACTION WITH LIFE SCALE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1367,'SCI  [SCI DIENER SATISFACTION WITH LIFE SCALE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1367,'SCI DIENER SATISFACTION WITH LIFE SCALE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1367,'SCIS  [SCI DIENER SATISFACTION WITH LIFE SCALE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1344,'SCARS  [C&P SCARS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1364,'SCI  [SCI FUNCTIONAL INDEPENDENCE MEASURE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1364,'SCI FUNCTIONAL INDEPENDENCE MEASURE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1364,'SCIF  [SCI FUNCTIONAL INDEPENDENCE MEASURE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1365,'SCI  [SCI GENERAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1365,'SCI GENERAL NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1365,'SCIG  [SCI GENERAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1617,'SCREENING  [CARE COORDINATION HOME TELEHEALTH SCREENING CONSULT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1345,'SENSE  [C&P SENSE OF SMELL AND TASTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1345,'SMELL  [C&P SENSE OF SMELL AND TASTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1345,'TASTE  [C&P SENSE OF SMELL AND TASTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (40,'SEVERITY  [ASI-ADDICTION SEVERITY INDEX]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1366,'SHORT  [SCI CRAIG HANDICAP ASSESSMENT&REPORTING TECHNIQUE-SHORT FORM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1366,'TECHNIQUE  [SCI CRAIG HANDICAP ASSESSMENT&REPORTING TECHNIQUE-SHORT FORM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1328,'SHOULDER  [C&P JOINTS (SHOULDER, ELBOW, WRIST, HIP, KNEE, ANKLE)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1335,'SINUS  [C&P NOSE, SINUS, LARYNX, AND PHARYNX]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1652,'SITE  [PROCEDURE PATIENT SITE VERIFICATION  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1346,'SKIN  [C&P SKIN DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (825,'SOCIAL  [INTERDISCIPLINARY PLAN-SOCIAL WORK (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1301,'SPINAL  [C&P BRAIN AND SPINAL CORD]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1347,'SPINE  [C&P SPINE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1348,'STOMACH  [C&P STOMACH, DUODENUM, AND PERITONEAL ADHESIONS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1355,'STUDY  [PATIENT RECORD FLAG CATEGORY II - RESEARCH STUDY]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1623,'SUBSEQUENT  [CARE COORDINATION HOME TELEHEALTH SUBSEQUENT EVAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1623,'TELEHEALTH  [CARE COORDINATION HOME TELEHEALTH SUBSEQUENT EVAL NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1624,'SUMMARY  [CARE COORDINATION HOME TELEHEALTH SUMMARY OF EPISODE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1624,'TELEHEALTH  [CARE COORDINATION HOME TELEHEALTH SUMMARY OF EPISODE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1657,'SURGERY  [GENERAL SURGERY RESIDENT NOTE  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (125,'SURGERY  [SURGERY NOTES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (125,'SURGERY NOTES',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1649,'SURGICAL  [NURSING SURGICAL EVALUATION UNIT  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1649,'UNIT  [NURSING SURGICAL EVALUATION UNIT  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1627,'SURVEILLANCE  [DIABETIC RETINOPATHY SURVEILLANCE CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1302,'SYNDROME  [C&P CHRONIC FATIGUE SYNDROME]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1619,'TELEHEALTH  [CARE COORDINATION HOME TELEHEALTH DISCHARGE NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1620,'TELEHEALTH  [CARE COORDINATION HOME TELEHEALTH EDUCATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1621,'TELEHEALTH  [CARE COORDINATION HOME TELEHEALTH EVALUATION NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1622,'TELEHEALTH  [CARE COORDINATION HOME TELEHEALTH EVALUATION TREATMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1622,'TREATMENT  [CARE COORDINATION HOME TELEHEALTH EVALUATION TREATMENT PLAN]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1617,'TELEHEALTH  [CARE COORDINATION HOME TELEHEALTH SCREENING CONSULT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1625,'TELEHEALTH  [CARE COORDINATION HOME TELEHEALTH TELEPHONE ENCOUNTER NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1625,'TELEPHONE  [CARE COORDINATION HOME TELEHEALTH TELEPHONE ENCOUNTER NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1626,'TELEHEALTH  [CARE COORDINATION HOME TELEHEALTH VIDEO VISIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (18,'TELEPHONE  [PRIMARY CARE TELEPHONE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1628,'TELERETINAL  [DIABETIC TELERETINAL IMAGING CONSULT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1321,'THUMB  [C&P HAND, THUMB AND FINGERS]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1349,'THYROID  [C&P THYROID AND PARATHYROID DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1332,'TONGUE  [C&P MOUTH, LIPS, AND TONGUE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1267,'TRANSITIONAL  [TRANSITIONAL PHARMACY BENEFIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1267,'TRANSITIONAL PHARMACY BENEFIT NOTE',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1340,'TUBERCULOSIS  [C&P PULMONARY TUBERCULOSIS AND MYCOBACTERIAL DISEASES]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1637,'VEHU  [VEHU IMAGING CONSULT RESULT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1637,'VEHU IMAGING CONSULT RESULT',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1298,'VEINS  [C&P ARTERIES, VEINS AND MISC]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1652,'VERIFICATION  [PROCEDURE PATIENT SITE VERIFICATION  ]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1626,'VIDEO  [CARE COORDINATION HOME TELEHEALTH VIDEO VISIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1626,'VISIT  [CARE COORDINATION HOME TELEHEALTH VIDEO VISIT NOTE]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (5,'VISIT  [MOVE! CLINIC VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (16,'VISIT  [PRIMARY CARE VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1391,'VISIT  [VISUAL IMPAIRMENT CLINIC INITIAL VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1391,'VISUAL  [VISUAL IMPAIRMENT CLINIC INITIAL VISIT]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1391,'VISUAL IMPAIRMENT CLINIC INITIAL VISIT',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1390,'VISUAL  [VISUAL IMPAIRMENT MEDICAL EXAM]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1390,'VISUAL IMPAIRMENT MEDICAL EXAM',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1354,'WANDERING  [PATIENT RECORD FLAG CATEGORY II - RISK, WANDERING]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1319,'WAR  [C&P GULF WAR PROTOCOL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1337,'WAR  [C&P PRISONER OF WAR PROTOCOL]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (15,'WARNING  [CLINICAL WARNING]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (825,'WORK  [INTERDISCIPLINARY PLAN-SOCIAL WORK (M)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_NOTE_TITLE (NOTE_TITLE_TAG,NOTE_TITLE_LABEL,NOTE_TITLE_DETAILS,XFER_SYSTEM_ID,XFER_DATE) values (1328,'WRIST  [C&P JOINTS (SHOULDER, ELBOW, WRIST, HIP, KNEE, ANKLE)]',null,1,to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.UTL_PATIENT
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100748','INPATIENT',null,'FORTY','666000840',null,3,'FORTY,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100647','OUTPATIENT',null,'FORTY','666000640',null,3,'FORTY,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100756','INPATIENT',null,'FORTYEIGHT','666000848',null,3,'FORTYEIGHT,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100655','OUTPATIENT',null,'FORTYEIGHT','666000648',null,3,'FORTYEIGHT,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('745','PATIENT',null,'FORTYEIGHT','666000048',null,3,'FORTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100753','INPATIENT',null,'FORTYFIVE','666000845',null,3,'FORTYFIVE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100652','OUTPATIENT',null,'FORTYFIVE','666000645',null,3,'FORTYFIVE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('168','PATIENT',null,'FORTYFIVE','666000045',null,3,'FORTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100752','INPATIENT',null,'FORTYFOUR','666000844',null,3,'FORTYFOUR,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100651','OUTPATIENT',null,'FORTYFOUR','666000644',null,3,'FORTYFOUR,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('692','PATIENT',null,'FORTYFOUR','666000044',null,3,'FORTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100757','INPATIENT',null,'FORTYNINE','666000849',null,3,'FORTYNINE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100656','OUTPATIENT',null,'FORTYNINE','666000649',null,3,'FORTYNINE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('746','PATIENT',null,'FORTYNINE','666000049',null,3,'FORTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100749','INPATIENT',null,'FORTYONE','666000841',null,3,'FORTYONE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100648','OUTPATIENT',null,'FORTYONE','666000641',null,3,'FORTYONE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('600','PATIENT',null,'FORTYONE','666000041',null,3,'FORTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100755','INPATIENT',null,'FORTYSEVEN','666000847',null,3,'FORTYSEVEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100654','OUTPATIENT',null,'FORTYSEVEN','666000647',null,3,'FORTYSEVEN,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('744','PATIENT',null,'FORTYSEVEN','666000047',null,3,'FORTYSEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100754','INPATIENT',null,'FORTYSIX','666000846',null,3,'FORTYSIX,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100653','OUTPATIENT',null,'FORTYSIX','666000646',null,3,'FORTYSIX,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('301','PATIENT',null,'FORTYSIX','666000046',null,3,'FORTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100751','INPATIENT',null,'FORTYTHREE','666000843',null,3,'FORTYTHREE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100650','OUTPATIENT',null,'FORTYTHREE','666000643',null,3,'FORTYTHREE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('569','PATIENT',null,'FORTYTHREE','666000043',null,3,'FORTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100750','INPATIENT',null,'FORTYTWO','666000842',null,3,'FORTYTWO,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100649','OUTPATIENT',null,'FORTYTWO','666000642',null,3,'FORTYTWO,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('620','PATIENT',null,'FORTYTWO','666000042',null,3,'FORTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100812','IMAGEPATIENT',null,'FOUR','666061004',null,3,'FOUR,IMAGEPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100712','INPATIENT',null,'FOUR','666000804',null,3,'FOUR,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100611','OUTPATIENT',null,'FOUR','666000604',null,3,'FOUR,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('229','PATIENT',null,'FOUR','666000004',null,3,'FOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100399','PATIENT',null,'FOURHUNDRED','666000400',null,3,'FOURHUNDRED,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100407','PATIENT',null,'FOURHUNDREDEIGHT','666000408',null,3,'FOURHUNDREDEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100417','PATIENT',null,'FOURHUNDREDEIGHTEEN','666000418',null,3,'FOURHUNDREDEIGHTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100480','PATIENT',null,'FOURHUNDREDEIGHTY','666000480',null,3,'FOURHUNDREDEIGHTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100600','PAT',null,'FOURHUNDREDEIGHTYEIGHT','666000488',null,3,'FOURHUNDREDEIGHTYEIGHT,PAT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100485','PATIENT',null,'FOURHUNDREDEIGHTYFIVE','666000485',null,3,'FOURHUNDREDEIGHTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100484','PATIENT',null,'FOURHUNDREDEIGHTYFOUR','666000484',null,3,'FOURHUNDREDEIGHTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100488','PATIENT',null,'FOURHUNDREDEIGHTYNINE','666000489',null,3,'FOURHUNDREDEIGHTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100481','PATIENT',null,'FOURHUNDREDEIGHTYONE','666000481',null,3,'FOURHUNDREDEIGHTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100487','PATIENT',null,'FOURHUNDREDEIGHTYSEVEN','666000487',null,3,'FOURHUNDREDEIGHTYSEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('520','PATIENT',null,'FORTY','666000040',null,3,'FORTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('66','PATIENT',null,'ZZZRETFOURSEVENTYTWO','666229999',null,3,'ZZZRETFOURSEVENTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('126','PATIENT',null,'ZZZRETIREDSIXTEEN','666545454',null,3,'ZZZRETIREDSIXTEEN,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('144','PATIENT',null,'ZZZRETIREDONEEIGHT','666535333',null,3,'ZZZRETIREDONEEIGHT,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('202','PATIENT',null,'ZZZRETIREDSIXTYTWO','666030379',null,3,'ZZZRETIREDSIXTYTWO,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('296','PATIENT',null,'ZZZRETIREDFIFTY','666032319',null,3,'ZZZRETIREDFIFTY,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('421','PATIENT',null,'ZZZRETIREDTWELVE','666040549',null,3,'ZZZRETIREDTWELVE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('97','PATIENT',null,'ZZZRETIREDONEFOUR','666747744',null,3,'ZZZRETIREDONEFOUR,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('110','PATIENT',null,'ZZZRETFOUREIGHTYTWO','666884884',null,3,'ZZZRETFOUREIGHTYTWO,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('314','PATIENT',null,'ZZZRETSIXFIFTYTHREE','666518352',null,3,'ZZZRETSIXFIFTYTHREE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('711','PATIENT',null,'ZZZRETFOURFIFTYEIGHT','666909955',null,3,'ZZZRETFOURFIFTYEIGHT,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100015','ONE-PATIENT',null,'BCMA','666330001',null,3,'BCMA,ONE-PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100016','TWO-PATIENT',null,'BCMA','666330002',null,3,'BCMA,TWO-PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('171','PATIENT',null,'ZZZRETIREDTHIRTYEIGHT','666451234',null,3,'ZZZRETIREDTHIRTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('211','PATIENT',null,'ZZZRETTWOFIFTYTHREE','666434444',null,3,'ZZZRETTWOFIFTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('248','PATIENT',null,'ZZZRETFIVESIXTYEIGHT','666347347',null,3,'ZZZRETFIVESIXTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('249','PATIENT',null,'ZZZRETSIXNINETYONE','666551425',null,3,'ZZZRETSIXNINETYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('309','PATIENT',null,'ZZZRETONEFORTY','666050654',null,3,'ZZZRETONEFORTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('727','PATIENT',null,'ZZZRETSIXFORTYONE','666222302',null,3,'ZZZRETSIXFORTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('730','PATIENT',null,'ZZZRETIREDFOURTEEN','666874747',null,3,'ZZZRETIREDFOURTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100816','IMAGEPATIENT',null,'EIGHT','666061008',null,3,'EIGHT,IMAGEPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100716','INPATIENT',null,'EIGHT','666000808',null,3,'EIGHT,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100615','OUTPATIENT',null,'EIGHT','666000608',null,3,'EIGHT,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('3','PATIENT',null,'EIGHT','666000008',null,3,'EIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100826','IMAGEPATIENT',null,'EIGHTEEN','666061018',null,3,'EIGHTEEN,IMAGEPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100726','INPATIENT',null,'EIGHTEEN','666000818',null,3,'EIGHTEEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100625','OUTPATIENT',null,'EIGHTEEN','666000618',null,3,'EIGHTEEN,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('149','PATIENT',null,'EIGHTEEN','666000018',null,3,'EIGHTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100286','PATIENT',null,'ONEHUNDREDEIGHTYSIX','666000186',null,3,'ONEHUNDREDEIGHTYSIX,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100283','PATIENT',null,'ONEHUNDREDEIGHTYTHREE','666000183',null,3,'ONEHUNDREDEIGHTYTHREE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100282','PATIENT',null,'ONEHUNDREDEIGHTYTWO','666000182',null,3,'ONEHUNDREDEIGHTYTWO,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('232','PATIENT',null,'ONEHUNDREDELEVEN','666000111',null,3,'ONEHUNDREDELEVEN,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('238','PATIENT',null,'ONEHUNDREDFIFTEEN','666000115',null,3,'ONEHUNDREDFIFTEEN,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100250','PATIENT',null,'ONEHUNDREDFIFTY','666000150',null,3,'ONEHUNDREDFIFTY,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100258','PATIENT',null,'ONEHUNDREDFIFTYEIGHT','666000158',null,3,'ONEHUNDREDFIFTYEIGHT,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100255','PATIENT',null,'ONEHUNDREDFIFTYFIVE','666000155',null,3,'ONEHUNDREDFIFTYFIVE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100254','PATIENT',null,'ONEHUNDREDFIFTYFOUR','666000154',null,3,'ONEHUNDREDFIFTYFOUR,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100259','PATIENT',null,'ONEHUNDREDFIFTYNINE','666000159',null,3,'ONEHUNDREDFIFTYNINE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100251','PATIENT',null,'ONEHUNDREDFIFTYONE','666000151',null,3,'ONEHUNDREDFIFTYONE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100257','PATIENT',null,'ONEHUNDREDFIFTYSEVEN','666000157',null,3,'ONEHUNDREDFIFTYSEVEN,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100256','PATIENT',null,'ONEHUNDREDFIFTYSIX','666000156',null,3,'ONEHUNDREDFIFTYSIX,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100253','PATIENT',null,'ONEHUNDREDFIFTYTHREE','666000153',null,3,'ONEHUNDREDFIFTYTHREE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100252','PATIENT',null,'ONEHUNDREDFIFTYTWO','666000152',null,3,'ONEHUNDREDFIFTYTWO,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('244','PATIENT',null,'ONEHUNDREDFIVE','666000105',null,3,'ONEHUNDREDFIVE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100139','PATIENT',null,'ONEHUNDREDFORTY','666000140',null,3,'ONEHUNDREDFORTY,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100248','PATIENT',null,'ONEHUNDREDFORTYEIGHT','666000148',null,3,'ONEHUNDREDFORTYEIGHT,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100144','PATIENT',null,'ONEHUNDREDFORTYFIVE','666000145',null,3,'ONEHUNDREDFORTYFIVE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100143','PATIENT',null,'ONEHUNDREDFORTYFOUR','666000144',null,3,'ONEHUNDREDFORTYFOUR,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100249','PATIENT',null,'ONEHUNDREDFORTYNINE','666000149',null,3,'ONEHUNDREDFORTYNINE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100140','PATIENT',null,'ONEHUNDREDFORTYONE','666000141',null,3,'ONEHUNDREDFORTYONE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100247','PATIENT',null,'ONEHUNDREDFORTYSEVEN','666000147',null,3,'ONEHUNDREDFORTYSEVEN,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100145','PATIENT',null,'ONEHUNDREDFORTYSIX','666000146',null,3,'ONEHUNDREDFORTYSIX,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100142','PATIENT',null,'ONEHUNDREDFORTYTHREE','666000143',null,3,'ONEHUNDREDFORTYTHREE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100141','PATIENT',null,'ONEHUNDREDFORTYTWO','666000142',null,3,'ONEHUNDREDFORTYTWO,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('362','PATIENT',null,'ONEHUNDREDFOUR','666000104',null,3,'ONEHUNDREDFOUR,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('235','PATIENT',null,'ONEHUNDREDFOURTEEN','666000114',null,3,'ONEHUNDREDFOURTEEN,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100281','PATIENT',null,'ONEHUNDREDEIGHTYONE','666000181',null,3,'ONEHUNDREDEIGHTYONE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100287','PATIENT',null,'ONEHUNDREDEIGHTYSEVEN','666000187',null,3,'ONEHUNDREDEIGHTYSEVEN,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100758','INPATIENT',null,'FIFTY','666000850',null,3,'FIFTY,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100657','OUTPATIENT',null,'FIFTY','666000650',null,3,'FIFTY,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('724','PATIENT',null,'FIFTY','666000050',null,3,'FIFTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100766','INPATIENT',null,'FIFTYEIGHT','666000858',null,3,'FIFTYEIGHT,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100665','OUTPATIENT',null,'FIFTYEIGHT','666000658',null,3,'FIFTYEIGHT,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('754','PATIENT',null,'FIFTYEIGHT','666000058',null,3,'FIFTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100763','INPATIENT',null,'FIFTYFIVE','666000855',null,3,'FIFTYFIVE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100662','OUTPATIENT',null,'FIFTYFIVE','666000655',null,3,'FIFTYFIVE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('751','PATIENT',null,'FIFTYFIVE','666000055',null,3,'FIFTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100762','INPATIENT',null,'FIFTYFOUR','666000854',null,3,'FIFTYFOUR,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100661','OUTPATIENT',null,'FIFTYFOUR','666000654',null,3,'FIFTYFOUR,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('750','PATIENT',null,'FIFTYFOUR','666000054',null,3,'FIFTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100767','INPATIENT',null,'FIFTYNINE','666000859',null,3,'FIFTYNINE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100666','OUTPATIENT',null,'FIFTYNINE','666000659',null,3,'FIFTYNINE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('755','PATIENT',null,'FIFTYNINE','666000059',null,3,'FIFTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100759','INPATIENT',null,'FIFTYONE','666000851',null,3,'FIFTYONE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100658','OUTPATIENT',null,'FIFTYONE','666000651',null,3,'FIFTYONE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('747','PATIENT',null,'FIFTYONE','666000051',null,3,'FIFTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100765','INPATIENT',null,'FIFTYSEVEN','666000857',null,3,'FIFTYSEVEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100664','OUTPATIENT',null,'FIFTYSEVEN','666000657',null,3,'FIFTYSEVEN,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('753','PATIENT',null,'FIFTYSEVEN','666000057',null,3,'FIFTYSEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100764','INPATIENT',null,'FIFTYSIX','666000856',null,3,'FIFTYSIX,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100663','OUTPATIENT',null,'FIFTYSIX','666000656',null,3,'FIFTYSIX,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('752','PATIENT',null,'FIFTYSIX','666000056',null,3,'FIFTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100761','INPATIENT',null,'FIFTYTHREE','666000853',null,3,'FIFTYTHREE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100660','OUTPATIENT',null,'FIFTYTHREE','666000653',null,3,'FIFTYTHREE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('749','PATIENT',null,'FIFTYTHREE','666000053',null,3,'FIFTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100760','INPATIENT',null,'FIFTYTWO','666000852',null,3,'FIFTYTWO,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100659','OUTPATIENT',null,'FIFTYTWO','666000652',null,3,'FIFTYTWO,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('748','PATIENT',null,'FIFTYTWO','666000052',null,3,'FIFTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('16','ADMISSION',null,'FIRSTTIME','666122545',null,3,'FIRSTTIME,ADMISSION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100813','IMAGEPATIENT',null,'FIVE','666061005',null,3,'FIVE,IMAGEPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100713','INPATIENT',null,'FIVE','666000805',null,3,'FIVE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100612','OUTPATIENT',null,'FIVE','666000605',null,3,'FIVE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('231','PATIENT',null,'FIVE','666000005',null,3,'FIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100499','PATIENT',null,'FIVEHUNDRED','666000500',null,3,'FIVEHUNDRED,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100506','PATIENT',null,'FIVEHUNDREDEIGHT','666000508',null,3,'FIVEHUNDREDEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100517','PATIENT',null,'FIVEHUNDREDEIGHTEEN','666000518',null,3,'FIVEHUNDREDEIGHTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100579','PATIENT',null,'FIVEHUNDREDEIGHTY','666000580',null,3,'FIVEHUNDREDEIGHTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100587','PATIENT',null,'FIVEHUNDREDEIGHTYEIGHT','666000588',null,3,'FIVEHUNDREDEIGHTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100584','PATIENT',null,'FIVEHUNDREDEIGHTYFIVE','666000585',null,3,'FIVEHUNDREDEIGHTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100583','PATIENT',null,'FIVEHUNDREDEIGHTYFOUR','666000584',null,3,'FIVEHUNDREDEIGHTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100588','PATIENT',null,'FIVEHUNDREDEIGHTYNINE','666000589',null,3,'FIVEHUNDREDEIGHTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100580','PATIENT',null,'FIVEHUNDREDEIGHTYONE','666000581',null,3,'FIVEHUNDREDEIGHTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100788','INPATIENT',null,'EIGHTY','666000880',null,3,'EIGHTY,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100687','OUTPATIENT',null,'EIGHTY','666000680',null,3,'EIGHTY,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('433','PATIENT',null,'EIGHTY','666000080',null,3,'EIGHTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100796','INPATIENT',null,'EIGHTYEIGHT','666000888',null,3,'EIGHTYEIGHT,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100695','OUTPATIENT',null,'EIGHTYEIGHT','666000688',null,3,'EIGHTYEIGHT,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100001','PATIENT',null,'EIGHTYEIGHT','666000088',null,3,'EIGHTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100793','INPATIENT',null,'EIGHTYFIVE','666000885',null,3,'EIGHTYFIVE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100692','OUTPATIENT',null,'EIGHTYFIVE','666000685',null,3,'EIGHTYFIVE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('779','PATIENT',null,'EIGHTYFIVE','666000085',null,3,'EIGHTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100792','INPATIENT',null,'EIGHTYFOUR','666000884',null,3,'EIGHTYFOUR,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100691','OUTPATIENT',null,'EIGHTYFOUR','666000684',null,3,'EIGHTYFOUR,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('778','PATIENT',null,'EIGHTYFOUR','666000084',null,3,'EIGHTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100797','INPATIENT',null,'EIGHTYNINE','666000889',null,3,'EIGHTYNINE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100696','OUTPATIENT',null,'EIGHTYNINE','666000689',null,3,'EIGHTYNINE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100002','PATIENT',null,'EIGHTYNINE','666000089',null,3,'EIGHTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100789','INPATIENT',null,'EIGHTYONE','666000881',null,3,'EIGHTYONE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100688','OUTPATIENT',null,'EIGHTYONE','666000681',null,3,'EIGHTYONE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('775','PATIENT',null,'EIGHTYONE','666000081',null,3,'EIGHTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100795','INPATIENT',null,'EIGHTYSEVEN','666000887',null,3,'EIGHTYSEVEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100694','OUTPATIENT',null,'EIGHTYSEVEN','666000687',null,3,'EIGHTYSEVEN,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100000','PATIENT',null,'EIGHTYSEVEN','666000087',null,3,'EIGHTYSEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100794','INPATIENT',null,'EIGHTYSIX','666000886',null,3,'EIGHTYSIX,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100693','OUTPATIENT',null,'EIGHTYSIX','666000686',null,3,'EIGHTYSIX,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('780','PATIENT',null,'EIGHTYSIX','666000086',null,3,'EIGHTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100791','INPATIENT',null,'EIGHTYTHREE','666000883',null,3,'EIGHTYTHREE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100690','OUTPATIENT',null,'EIGHTYTHREE','666000683',null,3,'EIGHTYTHREE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('777','PATIENT',null,'EIGHTYTHREE','666000083',null,3,'EIGHTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100790','INPATIENT',null,'EIGHTYTWO','666000882',null,3,'EIGHTYTWO,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100689','OUTPATIENT',null,'EIGHTYTWO','666000682',null,3,'EIGHTYTWO,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('776','PATIENT',null,'EIGHTYTWO','666000082',null,3,'EIGHTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100819','IMAGEPATIENT',null,'ELEVEN','666061011',null,3,'ELEVEN,IMAGEPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100719','INPATIENT',null,'ELEVEN','666000811',null,3,'ELEVEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100618','OUTPATIENT',null,'ELEVEN','666000611',null,3,'ELEVEN,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('224','PATIENT',null,'ELEVEN','666000011',null,3,'ELEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('18','ONE',null,'EMPLOYEE','666323045',null,3,'EMPLOYEE,ONE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100823','IMAGPATIENT',null,'FIFTEEN','666061015',null,3,'FIFTEEN,IMAGPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100723','INPATIENT',null,'FIFTEEN','666000815',null,3,'FIFTEEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100622','OUTPATIENT',null,'FIFTEEN','666000615',null,3,'FIFTEEN,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('69','PATIENT',null,'FIFTEEN','666000015',null,3,'FIFTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100768','INPATIENT',null,'SIXTY','666000860',null,3,'SIXTY,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100667','OUTPATIENT',null,'SIXTY','666000660',null,3,'SIXTY,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('756','PATIENT',null,'SIXTY','666000060',null,3,'SIXTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100776','INPATIENT',null,'SIXTYEIGHT','666000868',null,3,'SIXTYEIGHT,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100675','OUTPATIENT',null,'SIXTYEIGHT','666000668',null,3,'SIXTYEIGHT,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('764','PATIENT',null,'SIXTYEIGHT','666000068',null,3,'SIXTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100773','INPATIENT',null,'SIXTYFIVE','666000865',null,3,'SIXTYFIVE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100672','OUTPATIENT',null,'SIXTYFIVE','666000665',null,3,'SIXTYFIVE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('761','PATIENT',null,'SIXTYFIVE','666000065',null,3,'SIXTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100772','INPATIENT',null,'SIXTYFOUR','666000864',null,3,'SIXTYFOUR,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100671','OUTPATIENT',null,'SIXTYFOUR','666000664',null,3,'SIXTYFOUR,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('760','PATIENT',null,'SIXTYFOUR','666000064',null,3,'SIXTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100777','INPATIENT',null,'SIXTYNINE','666000869',null,3,'SIXTYNINE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100676','OUTPATIENT',null,'SIXTYNINE','666000669',null,3,'SIXTYNINE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('765','PATIENT',null,'SIXTYNINE','666000069',null,3,'SIXTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100769','INPATIENT',null,'SIXTYONE','666000861',null,3,'SIXTYONE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100668','OUTPATIENT',null,'SIXTYONE','666000661',null,3,'SIXTYONE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('757','PATIENT',null,'SIXTYONE','666000061',null,3,'SIXTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100775','INPATIENT',null,'SIXTYSEVEN','666000867',null,3,'SIXTYSEVEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100674','OUTPATIENT',null,'SIXTYSEVEN','666000667',null,3,'SIXTYSEVEN,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('763','PATIENT',null,'SIXTYSEVEN','666000067',null,3,'SIXTYSEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100774','INPATIENT',null,'SIXTYSIX','666000866',null,3,'SIXTYSIX,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100673','OUTPATIENT',null,'SIXTYSIX','666000666',null,3,'SIXTYSIX,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('762','PATIENT',null,'SIXTYSIX','666000066',null,3,'SIXTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100771','INPATIENT',null,'SIXTYTHREE','666000863',null,3,'SIXTYTHREE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100670','OUTPATIENT',null,'SIXTYTHREE','666000663',null,3,'SIXTYTHREE,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('759','PATIENT',null,'SIXTYTHREE','666000063',null,3,'SIXTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100770','INPATIENT',null,'SIXTYTWO','666000862',null,3,'SIXTYTWO,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100669','OUTPATIENT',null,'SIXTYTWO','666000662',null,3,'SIXTYTWO,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('758','PATIENT',null,'SIXTYTWO','666000062',null,3,'SIXTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100818','IMAGEPATIENT',null,'TEN','666061010',null,3,'TEN,IMAGEPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100718','INPATIENT',null,'TEN','666000810',null,3,'TEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100617','OUTPATIENT',null,'TEN','666000610',null,3,'TEN,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('8','PATIENT',null,'TEN','666000010',null,3,'TEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100821','IMAGEPATEINT',null,'THIRTEEN','666061013',null,3,'THIRTEEN,IMAGEPATEINT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100721','INPATIENT',null,'THIRTEEN','666000813',null,3,'THIRTEEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100620','OUTPATIENT',null,'THIRTEEN','666000613',null,3,'THIRTEEN,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('228','PATIENT',null,'THIRTEEN','666000013',null,3,'THIRTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100586','PAT',null,'FIVEHUNDREDEIGHTYSEVEN','666000587',null,3,'FIVEHUNDREDEIGHTYSEVEN,PAT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100585','PATIENT',null,'FIVEHUNDREDEIGHTYSIX','666000586',null,3,'FIVEHUNDREDEIGHTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100582','PAT',null,'FIVEHUNDREDEIGHTYTHREE','666000583',null,3,'FIVEHUNDREDEIGHTYTHREE,PAT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100581','PATIENT',null,'FIVEHUNDREDEIGHTYTWO','666000582',null,3,'FIVEHUNDREDEIGHTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100510','PATIENT',null,'FIVEHUNDREDELEVEN','666000511',null,3,'FIVEHUNDREDELEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100514','PATIENT',null,'FIVEHUNDREDFIFTEEN','666000515',null,3,'FIVEHUNDREDFIFTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100549','PATIENT',null,'FIVEHUNDREDFIFTY','666000550',null,3,'FIVEHUNDREDFIFTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100557','PATIENT',null,'FIVEHUNDREDFIFTYEIGHT','666000558',null,3,'FIVEHUNDREDFIFTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100554','PATIENT',null,'FIVEHUNDREDFIFTYFIVE','666000555',null,3,'FIVEHUNDREDFIFTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100553','PATIENT',null,'FIVEHUNDREDFIFTYFOUR','666000554',null,3,'FIVEHUNDREDFIFTYFOUR,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100558','PATIENT',null,'FIVEHUNDREDFIFTYNINE','666000559',null,3,'FIVEHUNDREDFIFTYNINE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100550','PATIENT',null,'FIVEHUNDREDFIFTYONE','666000551',null,3,'FIVEHUNDREDFIFTYONE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100556','PATIENT',null,'FIVEHUNDREDFIFTYSEVEN','666000557',null,3,'FIVEHUNDREDFIFTYSEVEN,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100555','PATIENT',null,'FIVEHUNDREDFIFTYSIX','666000556',null,3,'FIVEHUNDREDFIFTYSIX,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100552','PATIENT',null,'FIVEHUNDREDFIFTYTHREE','666000553',null,3,'FIVEHUNDREDFIFTYTHREE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100627','OUTPATIENT',null,'TWENTY','666000620',null,3,'TWENTY,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('420','PATIENT',null,'TWENTY','666000020',null,3,'TWENTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100736','INPATIENT',null,'TWENTYEIGHT','666000828',null,3,'TWENTYEIGHT,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100635','OUTPATIENT',null,'TWENTYEIGHT','666000628',null,3,'TWENTYEIGHT,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('366','PATIENT',null,'TWENTYEIGHT','666000028',null,3,'TWENTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100733','INPATIENT',null,'TWENTYFIVE','666000825',null,3,'TWENTYFIVE,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100632','OUTPATIENT',null,'TWENTYFIVE','666000625',null,3,'TWENTYFIVE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('728','PATIENT',null,'TWENTYFIVE','666000025',null,3,'TWENTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100732','INPATIENT',null,'TWENTYFOUR','666000824',null,3,'TWENTYFOUR,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100631','OUTPATIENT',null,'TWENTYFOUR','666000624',null,3,'TWENTYFOUR,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('706','PATIENT',null,'TWENTYFOUR','666000024',null,3,'TWENTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100737','INPATIENT',null,'TWENTYNINE','666000829',null,3,'TWENTYNINE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100636','OUTPATIENT',null,'TWENTYNINE','666000629',null,3,'TWENTYNINE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('350','PATIENT',null,'TWENTYNINE','666000029',null,3,'TWENTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100729','INPATIENT',null,'TWENTYONE','666000821',null,3,'TWENTYONE,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100628','OUTPATIENT',null,'TWENTYONE','666000621',null,3,'TWENTYONE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('419','PATIENT',null,'TWENTYONE','666000021',null,3,'TWENTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100735','INPATIENT',null,'TWENTYSEVEN','666000827',null,3,'TWENTYSEVEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100634','OUTPATIENT',null,'TWENTYSEVEN','666000627',null,3,'TWENTYSEVEN,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('407','PATIENT',null,'TWENTYSEVEN','666000027',null,3,'TWENTYSEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100734','INPATIENT',null,'TWENTYSIX','666000826',null,3,'TWENTYSIX,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100633','OUTPATIENT',null,'TWENTYSIX','666000626',null,3,'TWENTYSIX,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('723','PATIENT',null,'TWENTYSIX','666000026',null,3,'TWENTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100731','INPATIENT',null,'TWENTYTHREE','666000823',null,3,'TWENTYTHREE,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100630','OUTPATIENT',null,'TWENTYTHREE','666000623',null,3,'TWENTYTHREE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('722','PATIENT',null,'TWENTYTHREE','666000023',null,3,'TWENTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100730','INPATIENT',null,'TWENTYTWO','666000822',null,3,'TWENTYTWO,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100629','OUTPATIENT',null,'TWENTYTWO','666000622',null,3,'TWENTYTWO,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('715','PATIENT',null,'TWENTYTWO','666000022',null,3,'TWENTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100810','IMAGEPATIENT',null,'TWO','666061002',null,3,'TWO,IMAGEPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100710','INPATIENT',null,'TWO','666000802',null,3,'TWO,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100609','OUTPATIENT',null,'TWO','666000602',null,3,'TWO,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('205','PATIENT',null,'TWO','666000002',null,3,'TWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100146','PATIENT',null,'TWOHUNDRED','666000200',null,3,'TWOHUNDRED,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100828','IMAGEPATIENT',null,'TWENTY','666061020',null,3,'TWENTY,IMAGEPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100728','INPATIENT',null,'TWENTY','666000820',null,3,'TWENTY,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100154','PATIENT',null,'TWOHUNDREDEIGHT','666000208',null,3,'TWOHUNDREDEIGHT,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100164','PATIENT',null,'TWOHUNDREDEIGHTEEN','666000218',null,3,'TWOHUNDREDEIGHTEEN,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100226','PATIENT',null,'TWOHUNDREDEIGHTY','666000280',null,3,'TWOHUNDREDEIGHTY,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100234','PATIENT',null,'TWOHUNDREDEIGHTYEIGHT','666000288',null,3,'TWOHUNDREDEIGHTYEIGHT,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100231','PATIENT',null,'TWOHUNDREDEIGHTYFIVE','666000285',null,3,'TWOHUNDREDEIGHTYFIVE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100230','PATIENT',null,'TWOHUNDREDEIGHTYFOUR','666000284',null,3,'TWOHUNDREDEIGHTYFOUR,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100235','PATIENT',null,'TWOHUNDREDEIGHTYNINE','666000289',null,3,'TWOHUNDREDEIGHTYNINE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100227','PATIENT',null,'TWOHUNDREDEIGHTYONE','666000281',null,3,'TWOHUNDREDEIGHTYONE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100486','PATIENT',null,'FOURHUNDREDEIGHTYSIX','666000486',null,3,'FOURHUNDREDEIGHTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100483','PATIENT',null,'FOURHUNDREDEIGHTYTHREE','666000483',null,3,'FOURHUNDREDEIGHTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100482','PATIENT',null,'FOURHUNDREDEIGHTYTWO','666000482',null,3,'FOURHUNDREDEIGHTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100410','PATIENT',null,'FOURHUNDREDELEVEN','666000411',null,3,'FOURHUNDREDELEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100414','PATIENT',null,'FOURHUNDREDFIFTEEN','666000415',null,3,'FOURHUNDREDFIFTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100448','PATIENT',null,'FOURHUNDREDFIFTY','666000450',null,3,'FOURHUNDREDFIFTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100458','PATIENT',null,'FOURHUNDREDFIFTYEIGHT','666000458',null,3,'FOURHUNDREDFIFTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100455','PATIENT',null,'FOURHUNDREDFIFTYFIVE','666000455',null,3,'FOURHUNDREDFIFTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100454','PATIENT',null,'FOURHUNDREDFIFTYFOUR','666000454',null,3,'FOURHUNDREDFIFTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100459','PATIENT',null,'FOURHUNDREDFIFTYNINE','666000459',null,3,'FOURHUNDREDFIFTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100451','PATIENT',null,'FOURHUNDREDFIFTYONE','666000451',null,3,'FOURHUNDREDFIFTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100457','PATIENT',null,'FOURHUNDREDFIFTYSEVEN','666000457',null,3,'FOURHUNDREDFIFTYSEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100456','PATIENT',null,'FOURHUNDREDFIFTYSIX','666000456',null,3,'FOURHUNDREDFIFTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100453','PATIENT',null,'FOURHUNDREDFIFTYTHREE','666000453',null,3,'FOURHUNDREDFIFTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100452','PATIENT',null,'FOURHUNDREDFIFTYTWO','666000452',null,3,'FOURHUNDREDFIFTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100404','PATIENT',null,'FOURHUNDREDFIVE','666000405',null,3,'FOURHUNDREDFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100439','PATIENT',null,'FOURHUNDREDFORTY','666000440',null,3,'FOURHUNDREDFORTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100446','PATIENT',null,'FOURHUNDREDFORTYEIGHT','666000448',null,3,'FOURHUNDREDFORTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100509','PATIENT',null,'FOURHUNDREDFORTYFIVE','666000445',null,3,'FOURHUNDREDFORTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100443','PATIENT',null,'FOURHUNDREDFORTYFOUR','666000444',null,3,'FOURHUNDREDFORTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100447','PATIENT',null,'FOURHUNDREDFORTYNINE','666000449',null,3,'FOURHUNDREDFORTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100440','PATIENT',null,'FOURHUNDREDFORTYONE','666000441',null,3,'FOURHUNDREDFORTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100445','PATIENT',null,'FOURHUNDREDFORTYSEVEN','666000447',null,3,'FOURHUNDREDFORTYSEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100444','PATIENT',null,'FOURHUNDREDFORTYSIX','666000446',null,3,'FOURHUNDREDFORTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100442','PATIENT',null,'FOURHUNDREDFORTYTHREE','666000443',null,3,'FOURHUNDREDFORTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100441','PATIENT',null,'FOURHUNDREDFORTYTWO','666000442',null,3,'FOURHUNDREDFORTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100403','PATIENT',null,'FOURHUNDREDFOUR','666000404',null,3,'FOURHUNDREDFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100413','PATIENT',null,'FOURHUNDREDFOURTEEN','666000414',null,3,'FOURHUNDREDFOURTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100408','PATIENT',null,'FOURHUNDREDNINE','666000409',null,3,'FOURHUNDREDNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100418','PATIENT',null,'FOURHUNDREDNINETEEN','666000419',null,3,'FOURHUNDREDNINETEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('217','PATIENT',null,'NINE','666000009',null,3,'NINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('253','PATIENT',null,'SEVEN','666000007',null,3,'SEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('204','PATIENT',null,'TWELVE','666000012',null,3,'TWELVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('236','PATIENT',null,'NINETEEN','666000019',null,3,'NINETEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('271','PATIENT',null,'FOURTEEN','666000014',null,3,'FOURTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('428','PATIENT',null,'SEVENTEEN','666000017',null,3,'SEVENTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('201','PATIENT',null,'ZZZRETIREDSIXTYFOUR','666891127',null,3,'ZZZRETIREDSIXTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('391','PATIENT',null,'THIRTY','666000030',null,3,'THIRTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100746','INPATIENT',null,'THIRTYEIGHT','666000838',null,3,'THIRTYEIGHT,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100645','OUTPATIENT',null,'THIRTYEIGHT','666000638',null,3,'THIRTYEIGHT,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('151','PATIENT',null,'THIRTYEIGHT','666000038',null,3,'THIRTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100743','INPATIENT',null,'THIRTYFIVE','666000835',null,3,'THIRTYFIVE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100642','OUTPATIENT',null,'THIRTYFIVE','666000635',null,3,'THIRTYFIVE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('240','PATIENT',null,'THIRTYFIVE','666000035',null,3,'THIRTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100742','INPATIENT',null,'THIRTYFOUR','666000834',null,3,'THIRTYFOUR,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100641','OUTPATIENT',null,'THIRTYFOUR','666000634',null,3,'THIRTYFOUR,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('267','PATIENT',null,'THIRTYFOUR','666000034',null,3,'THIRTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100747','INPATIENT',null,'THIRTYNINE','666000839',null,3,'THIRTYNINE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100646','OUTPATIENT',null,'THIRTYNINE','666000639',null,3,'THIRTYNINE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('347','PATIENT',null,'THIRTYNINE','666000039',null,3,'THIRTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100739','INPATIENT',null,'THIRTYONE','666000831',null,3,'THIRTYONE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100638','OUTPATIENT',null,'THIRTYONE','666000631',null,3,'THIRTYONE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('384','PATIENT',null,'THIRTYONE','666000031',null,3,'THIRTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100745','INPATIENT',null,'THIRTYSEVEN','666000837',null,3,'THIRTYSEVEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100644','OUTPATIENT',null,'THIRTYSEVEN','666000637',null,3,'THIRTYSEVEN,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('218','PATIENT',null,'THIRTYSEVEN','666000037',null,3,'THIRTYSEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100744','INPATIENT',null,'THIRTYSIX','666000836',null,3,'THIRTYSIX,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100643','OUTPATIENT',null,'THIRTYSIX','666000636',null,3,'THIRTYSIX,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('260','PATIENT',null,'THIRTYSIX','666000036',null,3,'THIRTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100741','INPATIENT',null,'THIRTYTHREE','666000833',null,3,'THIRTYTHREE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100640','OUTPATIENT',null,'THIRTYTHREE','666000633',null,3,'THIRTYTHREE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('442','PATIENT',null,'THIRTYTHREE','666000033',null,3,'THIRTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100740','INPATIENT',null,'THIRTYTWO','666000832',null,3,'THIRTYTWO,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100639','OUTPATIENT',null,'THIRTYTWO','666000632',null,3,'THIRTYTWO,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('140','PATIENT',null,'THIRTYTWO','666000032',null,3,'THIRTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100811','IMAGEPATIENT',null,'THREE','666061003',null,3,'THREE,IMAGEPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100711','INPATIENT',null,'THREE','666000803',null,3,'THREE,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100610','OUTPATIENT',null,'THREE','666000603',null,3,'THREE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('25','PATIENT',null,'THREE','666000003',null,3,'THREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100300','PATIENT',null,'THREEHUNDRED','666000300',null,3,'THREEHUNDRED,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100307','PATIENT',null,'THREEHUNDREDEIGHT','666000308',null,3,'THREEHUNDREDEIGHT,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100317','PATIENT',null,'THREEHUNDREDEIGHTEEN','666000318',null,3,'THREEHUNDREDEIGHTEEN,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100379','PATIENT',null,'THREEHUNDREDEIGHTY','666000380',null,3,'THREEHUNDREDEIGHTY,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100387','PAT',null,'THREEHUNDREDEIGHTYEIGHT','666000388',null,3,'THREEHUNDREDEIGHTYEIGHT,PAT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100384','PATIENT',null,'THREEHUNDREDEIGHTYFIVE','666000385',null,3,'THREEHUNDREDEIGHTYFIVE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100383','PATIENT',null,'THREEHUNDREDEIGHTYFOUR','666000384',null,3,'THREEHUNDREDEIGHTYFOUR,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100388','PATIENT',null,'THREEHUNDREDEIGHTYNINE','666000389',null,3,'THREEHUNDREDEIGHTYNINE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100380','PAT',null,'THREEHUNDREDEIGHTYONE','666000381',null,3,'THREEHUNDREDEIGHTYONE,PAT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100386','PAT',null,'THREEHUNDREDEIGHTYSEVEN','666000387',null,3,'THREEHUNDREDEIGHTYSEVEN,PAT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100778','INPATIENT',null,'SEVENTY','666000870',null,3,'SEVENTY,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100677','OUTPATIENT',null,'SEVENTY','666000670',null,3,'SEVENTY,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('768','PATIENT',null,'SEVENTY','666000070',null,3,'SEVENTY,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100738','INPATIENT',null,'THIRTY','666000830',null,3,'THIRTY,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100637','OUTPATIENT',null,'THIRTY','666000630',null,3,'THIRTY,OUTPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100786','INPATIENT',null,'SEVENTYEIGHT','666000878',null,3,'SEVENTYEIGHT,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100685','OUTPATIENT',null,'SEVENTYEIGHT','666000678',null,3,'SEVENTYEIGHT,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('774','PATIENT',null,'SEVENTYEIGHT','666000078',null,3,'SEVENTYEIGHT,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100783','INPATIENT',null,'SEVENTYFIVE','666000875',null,3,'SEVENTYFIVE,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100682','OUTPATIENT',null,'SEVENTYFIVE','666000675',null,3,'SEVENTYFIVE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('771','PATIENT',null,'SEVENTYFIVE','666000075',null,3,'SEVENTYFIVE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100782','INPATIENT',null,'SEVENTYFOUR','666000874',null,3,'SEVENTYFOUR,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100681','OUTPATIENT',null,'SEVENTYFOUR','666000674',null,3,'SEVENTYFOUR,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('770','PATIENT',null,'SEVENTYFOUR','666000074',null,3,'SEVENTYFOUR,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100787','INPATIENT',null,'SEVENTYNINE','666000879',null,3,'SEVENTYNINE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100686','OUTPATIENT',null,'SEVENTYNINE','666000679',null,3,'SEVENTYNINE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('379','PATIENT',null,'SEVENTYNINE','666000079',null,3,'SEVENTYNINE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100779','INPATIENT',null,'SEVENTYONE','666000871',null,3,'SEVENTYONE,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100678','OUTPATIENT',null,'SEVENTYONE','666000671',null,3,'SEVENTYONE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('766','PATIENT',null,'SEVENTYONE','666000071',null,3,'SEVENTYONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100785','INPATIENT',null,'SEVENTYSEVEN','666000877',null,3,'SEVENTYSEVEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100684','OUTPATIENT',null,'SEVENTYSEVEN','666000677',null,3,'SEVENTYSEVEN,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('773','PATIENT',null,'SEVENTYSEVEN','666000077',null,3,'SEVENTYSEVEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100784','INPATIENT',null,'SEVENTYSIX','666000876',null,3,'SEVENTYSIX,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100683','OUTPATIENT',null,'SEVENTYSIX','666000676',null,3,'SEVENTYSIX,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('772','PATIENT',null,'SEVENTYSIX','666000076',null,3,'SEVENTYSIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100781','INPATIENT',null,'SEVENTYTHREE','666000873',null,3,'SEVENTYTHREE,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100680','OUTPATIENT',null,'SEVENTYTHREE','666000673',null,3,'SEVENTYTHREE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('769','PATIENT',null,'SEVENTYTHREE','666000073',null,3,'SEVENTYTHREE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100780','INPATIENT',null,'SEVENTYTWO','666000872',null,3,'SEVENTYTWO,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100679','OUTPATIENT',null,'SEVENTYTWO','666000672',null,3,'SEVENTYTWO,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('767','PATIENT',null,'SEVENTYTWO','666000072',null,3,'SEVENTYTWO,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100814','IMAGEPATIENT',null,'SIX','666061006',null,3,'SIX,IMAGEPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100714','INPATIENT',null,'SIX','666000806',null,3,'SIX,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100613','OUTPATIENT',null,'SIX','666000606',null,3,'SIX,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('418','PATIENT',null,'SIX','666000006',null,3,'SIX,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100599','PATIENT',null,'SIXHUNDRED','666661600',null,3,'SIXHUNDRED,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100606','PATIENT',null,'SIXHUNDREDFIVE','666661605',null,3,'SIXHUNDREDFIVE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100605','PATIENT',null,'SIXHUNDREDFOUR','666661604',null,3,'SIXHUNDREDFOUR,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100602','PATIENT',null,'SIXHUNDREDONE','666661601',null,3,'SIXHUNDREDONE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100604','PATIENT',null,'SIXHUNDREDTHREE','666661603',null,3,'SIXHUNDREDTHREE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100603','PATIENT',null,'SIXHUNDREDTWO','666661602',null,3,'SIXHUNDREDTWO,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100824','IMAGEPATIENT',null,'SIXTEEN','666061016',null,3,'SIXTEEN,IMAGEPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100724','INPATIENT',null,'SIXTEEN','666000816',null,3,'SIXTEEN,INPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100623','OUTPATIENT',null,'SIXTEEN','666000616',null,3,'SIXTEEN,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('146','PATIENT',null,'SIXTEEN','666000016',null,3,'SIXTEEN,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100003','PATIENT',null,'NINETY','666000090',null,3,'NINETY,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100806','INPATIENT',null,'NINETYEIGHT','666000898',null,3,'NINETYEIGHT,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100705','OUTPATIENT',null,'NINETYEIGHT','666000698',null,3,'NINETYEIGHT,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100011','PATIENT',null,'NINETYEIGHT','666000098',null,3,'NINETYEIGHT,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100803','INPATIENT',null,'NINETYFIVE','666000895',null,3,'NINETYFIVE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100702','OUTPATIENT',null,'NINETYFIVE','666000695',null,3,'NINETYFIVE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100008','PATIENT',null,'NINETYFIVE','666000095',null,3,'NINETYFIVE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100802','INPATIENT',null,'NINETYFOUR','666000894',null,3,'NINETYFOUR,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100701','OUTPATIENT',null,'NINETYFOUR','666000694',null,3,'NINETYFOUR,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100007','PATIENT',null,'NINETYFOUR','666000094',null,3,'NINETYFOUR,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100807','INPATIENT',null,'NINETYNINE','666000899',null,3,'NINETYNINE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100706','OUTPATIENT',null,'NINETYNINE','666000699',null,3,'NINETYNINE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100012','PATIENT',null,'NINETYNINE','666000099',null,3,'NINETYNINE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100799','INPATIENT',null,'NINETYONE','666000891',null,3,'NINETYONE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100698','OUTPATIENT',null,'NINETYONE','666000691',null,3,'NINETYONE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100004','PATIENT',null,'NINETYONE','666000091',null,3,'NINETYONE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100805','INPATIENT',null,'NINETYSEVEN','666000897',null,3,'NINETYSEVEN,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100704','OUTPATIENT',null,'NINETYSEVEN','666000697',null,3,'NINETYSEVEN,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100010','PATIENT',null,'NINETYSEVEN','666000097',null,3,'NINETYSEVEN,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100804','INPATIENT',null,'NINETYSIX','666000896',null,3,'NINETYSIX,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100703','OUTPATIENT',null,'NINETYSIX','666000696',null,3,'NINETYSIX,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100009','PATIENT',null,'NINETYSIX','666000096',null,3,'NINETYSIX,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100801','INPATIENT',null,'NINETYTHREE','666000893',null,3,'NINETYTHREE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100700','OUTPATIENT',null,'NINETYTHREE','666000693',null,3,'NINETYTHREE,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100006','PATIENT',null,'NINETYTHREE','666000093',null,3,'NINETYTHREE,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100800','INPATIENT',null,'NINETYTWO','666000892',null,3,'NINETYTWO,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100699','OUTPATIENT',null,'NINETYTWO','666000692',null,3,'NINETYTWO,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100005','PATIENT',null,'NINETYTWO','666000092',null,3,'NINETYTWO,PATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100809','IMAGEPATIENT',null,'ONE','666061001',null,3,'ONE,IMAGEPATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100708','INPATIENT',null,'ONE','666000801',null,3,'ONE,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100608','OUTPATIENT',null,'ONE','666000601',null,3,'ONE,OUTPATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('237','PATIENT',null,'ONE','666000001',null,3,'ONE,PATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100808','INPATIENT',null,'ONEHUNDRED','666000900',null,3,'ONEHUNDRED,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100707','OUTPATIENT',null,'ONEHUNDRED','666000700',null,3,'ONEHUNDRED,OUTPATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100013','PATIENT',null,'ONEHUNDRED','666000100',null,3,'ONEHUNDRED,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('241','PATIENT',null,'ONEHUNDREDEIGHT','666000108',null,3,'ONEHUNDREDEIGHT,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('192','PATIENT',null,'ONEHUNDREDEIGHTEEN','666000118',null,3,'ONEHUNDREDEIGHTEEN,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100280','PATIENT',null,'ONEHUNDREDEIGHTY','666000180',null,3,'ONEHUNDREDEIGHTY,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100288','PATIENT',null,'ONEHUNDREDEIGHTYEIGHT','666000188',null,3,'ONEHUNDREDEIGHTYEIGHT,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100285','PATIENT',null,'ONEHUNDREDEIGHTYFIVE','666000185',null,3,'ONEHUNDREDEIGHTYFIVE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100284','PATIENT',null,'ONEHUNDREDEIGHTYFOUR','666000184',null,3,'ONEHUNDREDEIGHTYFOUR,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100289','PATIENT',null,'ONEHUNDREDEIGHTYNINE','666000189',null,3,'ONEHUNDREDEIGHTYNINE,PATIENT',1,to_date('18-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100798','INPATIENT',null,'NINETY','666000890',null,3,'NINETY,INPATIENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_PATIENT (PATIENT_ID,FIRST_NAME,MIDDLE_INITIAL,LAST_NAME,SSN,DATE_OF_BIRTH,SEX_ID,FULL_NAME,XFER_SYSTEM_ID,XFER_DATE) values ('100697','OUTPATIENT',null,'NINETY','666000690',null,3,'NINETY,OUTPATIENT',1,to_date('08-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.UTL_REGION
Insert into VAPPCT.UTL_REGION (REGION_ID,REGION_NAME,XFER_SYSTEM_ID,XFER_DATE) values (1,'CPM VISN',1,to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.UTL_SITE
Insert into VAPPCT.UTL_SITE (REGION_ID,SITE_ID,SITE_NAME,XFER_SYSTEM_ID,XFER_DATE) values (1,901,'CPM',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SITE (REGION_ID,SITE_ID,SITE_NAME,XFER_SYSTEM_ID,XFER_DATE) values (1,902,'Georgia Tech',1,to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.UTL_SPECIALTY
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (64,'CARDIAC INTENSIVE CARE UNIT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (66,'CARDIAC SURGERY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (19,'CARDIOLOGY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (50,'DOMICILIARY CHV',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (33,'DOMICILIARY PTSD',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (14,'DOMICILLARY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (3,'DRUG TREATMENT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (79,'ED OBSERVATION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (28,'EVAL/BRF TRMT PTSD UNIT(EBTPU)',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (7,'GASTROENTEROLOGY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (41,'GEM INTERMEDIATE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (21,'GEM PSYCHIATRY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (29,'GEN INTERMEDIATE PSYCH',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (9,'GENERAL MEDICINE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (24,'GENERAL SURGERY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (74,'GRECC-GEM-REHAB',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (75,'GRECC-MED',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (26,'HIGH INTENSITY GEN PSYCH INPAT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (76,'HOSPICE FOR ACUTE CARE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (72,'LONG STAY GRECC-NHCU',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (8,'MEDICAL ICU',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (43,'MEDICAL OBSERVATION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (78,'MEDICAL STEP DOWN',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (46,'NEUROLOGY OBSERVATION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (51,'NH HOSPICE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (58,'NH LONG STAY DEMENTIA CARE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (62,'NH LONG STAY SPINAL CORD INJ',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (60,'NH LONG-STAY CONTINUING CARE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (61,'NH LONG-STAY MH RECOVERY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (63,'NH RESPITE CARE (NHCU)',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (57,'NH SHORT STAY DEMENTIA CARE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (53,'NH SHORT STAY REHABILITATION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (54,'NH SHORT STAY RESTORATIVE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (52,'NH SHORT STAY SKILLED NURSING',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (55,'NH SHORT-STAY CONTINUING CARE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (56,'NH SHORT-STAY MH RECOVERY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (5,'ORTHOPEDIC',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (65,'PEDIATRICS',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (69,'PM&R TRANSITIONAL REHAB',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (42,'PODIATRY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (83,'POLYTRAUMA REHAB UNIT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (80,'PSYCH RESID REHAB PROG',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (45,'PSYCHIATRIC OBSERVATION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (81,'PTSD RESID REHAB PROG',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (12,'REHAB MEDICINE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (49,'REHAB MEDICINE OBSERVATION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (73,'SHORT STAY GRECC-GEM-NHCU',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (71,'SHORT STAY GRECC-NHCU',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (4,'SPINAL CORD INJURY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (48,'SPINAL CORD INJURY OBSERVATION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (10,'STROKE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (17,'SUBSTANCE ABUSE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (82,'SUBSTANCE ABUSE RESID PROG',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (44,'SURGICAL OBSERVATION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (70,'SURGICAL STEPDOWN',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (67,'TRANSPLANTATION',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (6,'UROLOGY',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (77,'VASCULAR',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (39,'ALCOHOL DEPENDENCE TRMT UNIT',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_SPECIALTY (SPECIALTY_ID,SPECIALTY_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (68,'ANESTHESIOLOGY',1,to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.UTL_SPECIALTY_PATIENT
REM INSERTING into VAPPCT.UTL_TEAM
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (65,'CAMP 1-9',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (66,'CAMP 10-19',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (76,'CAMP 100-109',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (77,'CAMP 110-END',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (67,'CAMP 20-29',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (68,'CAMP 30-39',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (69,'CAMP 40-49',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (70,'CAMP 50-59',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (71,'CAMP 60-69',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (72,'CAMP 70-79',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (73,'CAMP 80-89',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (74,'CAMP 90-99',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (201,'DIAB RETIN SURV CONSULTS',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (202,'DIAB TELERET READER CONSULTS',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (28,'GEN MED LIST',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (29,'GEN MED WARD LIST',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (58,'GIMC CONSULTS',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (24,'MEDICINE CONSULTS',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (30,'MIKE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (60,'NURSING 5W LIST',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (57,'SBKSURG2',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (25,'SURGERY CONSULTS',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (37,'TEAM B',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (208,'TEAM FOUR',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (204,'TEAM ONE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (207,'TEAM THREE',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (206,'TEAM TWO',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (205,'TEAM ZERO',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (42,'TEAMSLB',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (15,'TOM1 P.P. LIST',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (212,'Team eight',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (215,'Team eleven',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (18,'VAL1',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (180,'WARD101',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (181,'WARD102',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (182,'WARD103',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (183,'WARD104',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (184,'WARD105',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (185,'WARD106',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (186,'WARD107',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (187,'WARD108',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (188,'WARD109',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (189,'WARD110',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (190,'WARD111',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (191,'WARD112',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (192,'WARD113',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (193,'WARD114',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (194,'WARD115',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (195,'WARD116',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (196,'WARD117',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (197,'WARD118',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (198,'WARD119',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (199,'WARD120',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (200,'WARD121',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (106,'WARD28',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (116,'WARD38',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (34,'ZEBRA',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (222,'team eighteen',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (283,'team eighty',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (291,'team eightyeight',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (288,'team eightyfive',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (287,'team eightyfour',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (292,'team eightynine',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (284,'team eightyone',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (290,'team eightyseven',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (289,'team eightysix',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (286,'team eightythree',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (285,'team eightytwo',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (219,'team fifteen',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (253,'team fifty',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (261,'team fiftyeight',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (258,'team fiftyfive',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (257,'team fiftyfour',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (262,'team fiftynine',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (254,'team fiftyone',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (260,'team fiftyseven',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (259,'team fiftysix',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (256,'team fiftythree',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (255,'team fiftytwo',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (209,'team five',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (243,'team forty',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (251,'team fortyeight',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (248,'team fortyfive',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (247,'team fortyfour',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (252,'team fortynine',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (244,'team fortyone',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (250,'team fortyseven',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (249,'team fortysix',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (246,'team fortythree',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (245,'team fortytwo',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (218,'team fourteen',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (213,'team nine',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (223,'team nineteen',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (293,'team ninety',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (301,'team ninetyeight',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (298,'team ninetyfive',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (297,'team ninetyfour',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (302,'team ninetynine',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (294,'team ninetyone',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (300,'team ninetyseven',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (299,'team ninetysix',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (296,'team ninetythree',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (295,'team ninetytwo',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (303,'team onehundred',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (211,'team seven',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (221,'team seventeen',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (273,'team seventy',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (281,'team seventyeight',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (278,'team seventyfive',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (277,'team seventyfour',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (282,'team seventynine',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (274,'team seventyone',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (280,'team seventyseven',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (279,'team seventysix',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (276,'team seventythree',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (275,'team seventytwo',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (210,'team six',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (220,'team sixteen',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (263,'team sixty',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (271,'team sixtyeight',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (268,'team sixtyfive',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (267,'team sixtyfour',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (272,'team sixtynine',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (264,'team sixtyone',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (270,'team sixtyseven',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (269,'team sixtysix',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (266,'team sixtythree',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (265,'team sixtytwo',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (214,'team ten',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (217,'team thirteen',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (234,'team thirty',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (241,'team thirtyeight',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (239,'team thirtyfive',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (238,'team thirtyfour',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (242,'team thirtynine',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (235,'team thirtyone',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (240,'team thirtysix',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (237,'team thirtythree',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (236,'team thirtytwo',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (216,'team twelve',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (224,'team twenty',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (232,'team twentyeight',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (229,'team twentyfive',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (228,'team twentyfour',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (233,'team twentynine',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (225,'team twentyone',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (231,'team twentyseven',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (230,'team twentysix',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (227,'team twentythree',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (226,'team twentytwo',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (203,'C.VEHUIMAGING',1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_TEAM (TEAM_ID,TEAM_LABEL,XFER_SYSTEM_ID,XFER_DATE) values (62,'CAMP',1,to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.UTL_TEAM_PATIENT
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'140');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'146');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'151');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'168');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'204');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'205');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'217');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'218');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'224');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'228');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'229');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'231');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'236');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'237');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'240');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'25');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'253');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'260');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'267');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'271');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'3');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'301');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'347');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'350');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'366');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'379');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'384');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'391');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'407');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'418');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'419');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'420');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'428');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'433');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'442');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'520');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'569');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'600');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'620');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'69');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'692');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'706');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'715');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'722');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'723');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'724');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'728');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'744');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'745');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'746');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'747');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'748');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'749');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'750');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'751');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'752');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'753');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'754');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'755');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'756');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'757');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'758');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'759');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'760');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'761');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'762');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'763');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'764');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'765');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'766');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'767');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'768');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'769');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'770');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'771');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'772');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'773');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'774');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'775');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'776');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'777');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'778');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'779');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'780');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (62,'8');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (65,'205');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (65,'217');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (65,'229');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (65,'231');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (65,'237');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (65,'25');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (65,'253');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (65,'3');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (65,'418');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (68,'140');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (68,'151');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (68,'218');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (68,'240');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (68,'260');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (68,'267');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (68,'347');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (68,'384');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (68,'391');
Insert into VAPPCT.UTL_TEAM_PATIENT (TEAM_ID,PATIENT_ID) values (68,'442');
REM INSERTING into VAPPCT.UTL_USER
Insert into VAPPCT.UTL_USER (USER_NAME,USER_PASSWORD,USER_ID,USER_ROLE_ID,FIRST_NAME,LAST_NAME,NAME,GREETING,SITE_ID,XFER_SYSTEM_ID,XFER_DATE) values (null,null,11716,1,'ONE','RADIOLOGIST','RADIOLOGIST,ONE','Good morning RADIOLOGIST,ONE',901,1,to_date('14-DEC-12','DD-MON-RR'));
Insert into VAPPCT.UTL_USER (USER_NAME,USER_PASSWORD,USER_ID,USER_ROLE_ID,FIRST_NAME,LAST_NAME,NAME,GREETING,SITE_ID,XFER_SYSTEM_ID,XFER_DATE) values (null,null,20001,1,'ONE','VEHU','VEHU,ONE','Good afternoon C1',901,1,to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.UTL_USER_PATIENT
Insert into VAPPCT.UTL_USER_PATIENT (PATIENT_ID,USER_ID,DATE_ADDED) values ('201',20001,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_PATIENT (PATIENT_ID,USER_ID,DATE_ADDED) values ('100708',20001,to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.UTL_USER_ROLE
Insert into VAPPCT.UTL_USER_ROLE (USER_ID,USER_ROLE_ID) values (11716,3);
Insert into VAPPCT.UTL_USER_ROLE (USER_ID,USER_ROLE_ID) values (20001,3);
Insert into VAPPCT.UTL_USER_ROLE (USER_ID,USER_ROLE_ID) values (20001,1);
REM INSERTING into VAPPCT.UTL_USER_SECURITY_KEY
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (25,'DG SENSITIVITY',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (78,'RA PTENTRY',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (79,'RA PTEDIT',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (80,'RA XUSEC',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (81,'RA DELEXAM',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (82,'RA MGR',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (83,'RA DELETERPT',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (85,'RA SITE',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (86,'RA VERIFY',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (163,'RA ONLINE',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (236,'PROVIDER',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (269,'ORES',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (370,'RA ALLOC',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (470,'MAGDISP ADMIN',20001,1,to_date('22-JAN-13','DD-MON-RR'));
Insert into VAPPCT.UTL_USER_SECURITY_KEY (SECURITY_KEY_ID,SECURITY_KEY_NAME,USER_ID,XFER_SYSTEM_ID,XFER_DATE) values (535,'MAGDISP CLIN',20001,1,to_date('22-JAN-13','DD-MON-RR'));
REM INSERTING into VAPPCT.UTL_WARD
REM INSERTING into VAPPCT.UTL_WARD_PATIENT
--------------------------------------------------------
--  DDL for Index USR_ITEM_COMPONENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_ITEM_COMPONENT_PK" ON "VAPPCT"."USR_ITEM_COMPONENT" ("ITEM_COMPONENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_TEAM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_TEAM_PK" ON "VAPPCT"."UTL_TEAM" ("TEAM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_TRUE_FALSE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TRUE_FALSE_PK" ON "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_SOURCE_TYPE_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_SOURCE_TYPE_UK" ON "VAPPCT"."STAT_SOURCE_TYPE" ("SOURCE_TYPE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_PAT_CHECKLIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_PAT_CHECKLIST_PK" ON "VAPPCT"."USR_PAT_CHECKLIST" ("PAT_CL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_TS_DEFINITION_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TS_DEFINITION_UK" ON "VAPPCT"."STAT_TS_DEFINITION" ("TS_DEFINITION_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_TS_DEFINITION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TS_DEFINITION_PK" ON "VAPPCT"."STAT_TS_DEFINITION" ("TS_DEFINITION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_TIME_UNIT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TIME_UNIT_PK" ON "VAPPCT"."STAT_TIME_UNIT" ("TIME_UNIT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_CL_VIEWABLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_CL_VIEWABLE_PK" ON "VAPPCT"."USR_CL_VIEWABLE" ("CHECKLIST_ID", "USER_ROLE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_USER_ROLE_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_USER_ROLE_UK" ON "VAPPCT"."STAT_USER_ROLE" ("USER_ROLE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_PLACE_HOLDER_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_PLACE_HOLDER_UK1" ON "VAPPCT"."STAT_PLACE_HOLDER" ("PLACE_HOLDER_LABEL", "PH_PARENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_TRUE_FALSE_UK4
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TRUE_FALSE_UK4" ON "VAPPCT"."STAT_TRUE_FALSE" ("YES_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_DS_DEFINITION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_DS_DEFINITION_PK" ON "VAPPCT"."STAT_DS_DEFINITION" ("DS_DEFINITION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_ACTIVE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_ACTIVE_PK" ON "VAPPCT"."STAT_ACTIVE" ("ACTIVE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_XFER_SYSTEM_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_XFER_SYSTEM_UK1" ON "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_SPECIALTY_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_SPECIALTY_UK1" ON "VAPPCT"."UTL_SPECIALTY" ("SPECIALTY_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_LAB_TEST2_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_LAB_TEST2_PK" ON "VAPPCT"."UTL_LAB_TEST" ("LAB_TEST_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_ITEM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_ITEM_PK" ON "VAPPCT"."USR_ITEM" ("ITEM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_TEAM_PATIENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_TEAM_PATIENT_PK" ON "VAPPCT"."UTL_TEAM_PATIENT" ("TEAM_ID", "PATIENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_ITEM_TYPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_ITEM_TYPE_PK" ON "VAPPCT"."STAT_ITEM_TYPE" ("ITEM_TYPE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_XFER_SYSTEM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_XFER_SYSTEM_PK" ON "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_CL_ITEM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_CL_ITEM_PK" ON "VAPPCT"."USR_CL_ITEM" ("CHECKLIST_ID", "ITEM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_DS_DEFINITION_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_DS_DEFINITION_UK" ON "VAPPCT"."STAT_DS_DEFINITION" ("DS_DEFINITION_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_OUTCOME_STATE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_OUTCOME_STATE_PK" ON "VAPPCT"."USR_OUTCOME_STATE" ("OS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_PATIENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_PATIENT_PK" ON "VAPPCT"."UTL_PATIENT" ("PATIENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_PAT_ITEM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_PAT_ITEM_PK" ON "VAPPCT"."USR_PAT_ITEM" ("PAT_ITEM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_CL_CLOSEABLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_CL_CLOSEABLE_PK" ON "VAPPCT"."USR_CL_CLOSEABLE" ("CHECKLIST_ID", "USER_ROLE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_OUTCOME_STATE_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_OUTCOME_STATE_IDX" ON "VAPPCT"."USR_OUTCOME_STATE" (LOWER("OS_LABEL")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index STAT_TRUE_FALSE_UK6
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TRUE_FALSE_UK6" ON "VAPPCT"."STAT_TRUE_FALSE" ("OVERRIDE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index FX_AUDIT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."FX_AUDIT_PK" ON "VAPPCT"."FX_AUDIT" ("FX_AUDIT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_WARD_PATIENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_WARD_PATIENT_PK" ON "VAPPCT"."UTL_WARD_PATIENT" ("WARD_ID", "PATIENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 166 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_CLINIC_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_CLINIC_PK" ON "VAPPCT"."UTL_CLINIC" ("CLINIC_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_MENU_OPTION_UK01
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_MENU_OPTION_UK01" ON "VAPPCT"."STAT_MENU_OPTION" ("MENU_OPTION_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_USER_ROLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_USER_ROLE_PK" ON "VAPPCT"."STAT_USER_ROLE" ("USER_ROLE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_CHECKLIST_STATE_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_CHECKLIST_STATE_UK" ON "VAPPCT"."STAT_CHECKLIST_STATE" ("CHECKLIST_STATE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_PLACE_HOLDER_UK2
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_PLACE_HOLDER_UK2" ON "VAPPCT"."STAT_PLACE_HOLDER" ("PLACE_HOLDER_SYNTAX", "PH_PARENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_IC_SELECTION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_IC_SELECTION_PK" ON "VAPPCT"."USR_IC_STATE" ("IC_STATE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_NOTE_TITLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_NOTE_TITLE_PK" ON "VAPPCT"."UTL_NOTE_TITLE" ("NOTE_TITLE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_TEMPORAL_STATE_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_TEMPORAL_STATE_IDX" ON "VAPPCT"."USR_TEMPORAL_STATE" (LOWER("TS_LABEL")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_SPECIALTY_PATIENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_SPECIALTY_PATIENT_PK" ON "VAPPCT"."UTL_SPECIALTY_PATIENT" ("SPECIALTY_ID", "PATIENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_MENU_OPTION_UK02
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_MENU_OPTION_UK02" ON "VAPPCT"."STAT_MENU_OPTION" ("MENU_OPTION_URL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_ITEM_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_ITEM_IDX" ON "VAPPCT"."USR_ITEM" (LOWER("ITEM_LABEL")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_ITEM_TS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_ITEM_TS_PK" ON "VAPPCT"."USR_CLI_TS" ("CHECKLIST_ID", "ITEM_ID", "TS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_SPECIALTY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_SPECIALTY_PK" ON "VAPPCT"."UTL_SPECIALTY" ("SPECIALTY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_TRUE_FALSE_UK2
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TRUE_FALSE_UK2" ON "VAPPCT"."STAT_TRUE_FALSE" ("ACTIVE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_MENU_OPTION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_MENU_OPTION_PK" ON "VAPPCT"."STAT_MENU_OPTION" ("MENU_OPTION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_TRUE_FALSE_UK5
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TRUE_FALSE_UK5" ON "VAPPCT"."STAT_TRUE_FALSE" ("ENABLE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_OS_DEFINITION_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_OS_DEFINITION_UK" ON "VAPPCT"."STAT_OS_DEFINITION" ("OS_DEFINITION_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_STATE_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_STATE_UK" ON "VAPPCT"."STAT_STATE" ("STATE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_ITEM_DS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_ITEM_DS_PK" ON "VAPPCT"."USR_CLI_DS" ("CHECKLIST_ID", "ITEM_ID", "DS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_CL_READ_ONLY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_CL_READ_ONLY_PK" ON "VAPPCT"."USR_CL_READ_ONLY" ("CHECKLIST_ID", "USER_ROLE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_PAT_CL_ITEM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_PAT_CL_ITEM_PK" ON "VAPPCT"."USR_PAT_CL_ITEM" ("PAT_CL_ID", "ITEM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_IC_RANGE_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_IC_RANGE_UK" ON "VAPPCT"."USR_IC_RANGE" ("ITEM_ID", "ITEM_COMPONENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_SERVICE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_SERVICE_PK" ON "VAPPCT"."USR_SERVICE" ("SERVICE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_CHECKLIST_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_CHECKLIST_IDX" ON "VAPPCT"."USR_CHECKLIST" (LOWER("CHECKLIST_LABEL")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_PAT_ITEM_COMPONENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_PAT_ITEM_COMPONENT_PK" ON "VAPPCT"."USR_PAT_ITEM_COMPONENT" ("PAT_ITEM_ID", "ITEM_COMPONENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_ITEM_TYPE_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_ITEM_TYPE_UK" ON "VAPPCT"."STAT_ITEM_TYPE" ("ITEM_TYPE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_ACTIVE_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_ACTIVE_UK" ON "VAPPCT"."STAT_ACTIVE" ("ACTIVE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_SERVICE_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_SERVICE_IDX" ON "VAPPCT"."USR_SERVICE" (LOWER("SERVICE_LABEL")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_USER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_USER_PK" ON "VAPPCT"."UTL_USER" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_CLINIC_PATIENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_CLINIC_PATIENT_PK" ON "VAPPCT"."UTL_CLINIC_PATIENT" ("CLINIC_ID", "PATIENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 166 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_CHECKLIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_CHECKLIST_PK" ON "VAPPCT"."USR_CHECKLIST" ("CHECKLIST_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index FX_SESSION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."FX_SESSION_PK" ON "VAPPCT"."FX_SESSION" ("FX_SESSION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_ITEM_GROUP_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_ITEM_GROUP_IDX" ON "VAPPCT"."USR_ITEM_GROUP" (LOWER("ITEM_GROUP_LABEL")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index UTL_WARD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_WARD_PK" ON "VAPPCT"."UTL_WARD" ("WARD_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_ITEM_COMPONENT_IDX1
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_ITEM_COMPONENT_IDX1" ON "VAPPCT"."USR_ITEM_COMPONENT" ("ITEM_ID", LOWER("ITEM_COMPONENT_LABEL")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index UTL_CLINIC_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_CLINIC_UK1" ON "VAPPCT"."UTL_CLINIC" ("CLINIC_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_TRUE_FALSE_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TRUE_FALSE_UK1" ON "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_ITEM_GROUP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_ITEM_GROUP_PK" ON "VAPPCT"."USR_ITEM_GROUP" ("ITEM_GROUP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_PCK_STATUS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_PCK_STATUS_PK" ON "VAPPCT"."FX_PCK_STATUS" ("PCK_STATUS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_SOURCE_TYPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_SOURCE_TYPE_PK" ON "VAPPCT"."STAT_SOURCE_TYPE" ("SOURCE_TYPE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_ITEM_COMPONENT_IDX2
--------------------------------------------------------

  CREATE INDEX "VAPPCT"."USR_ITEM_COMPONENT_IDX2" ON "VAPPCT"."USR_ITEM_COMPONENT" ("ITEM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index UTL_WARD_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_WARD_UK1" ON "VAPPCT"."UTL_WARD" ("WARD_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_CLI_DS_EDIT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_CLI_DS_EDIT_PK" ON "VAPPCT"."USR_CLI_DS_EDIT" ("CHECKLIST_ID", "ITEM_ID", "USER_ROLE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_ITEM_COLLECTION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_ITEM_COLLECTION_PK" ON "VAPPCT"."USR_ITEM_COLLECTION" ("COLLECTION_ITEM_ID", "ITEM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_IC_RANGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_IC_RANGE_PK" ON "VAPPCT"."USR_IC_RANGE" ("IC_RANGE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_IC_STATE_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_IC_STATE_UK" ON "VAPPCT"."USR_IC_STATE" ("ITEM_ID", "ITEM_COMPONENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_PLACE_HOLDER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_PLACE_HOLDER_PK" ON "VAPPCT"."STAT_PLACE_HOLDER" ("PLACE_HOLDER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_PCK_STATUS_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_PCK_STATUS_UK" ON "VAPPCT"."FX_PCK_STATUS" ("PCK_STATUS_COMMENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_TIME_UNIT_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TIME_UNIT_UK" ON "VAPPCT"."STAT_TIME_UNIT" ("TIME_UNIT_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_STATE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_STATE_PK" ON "VAPPCT"."STAT_STATE" ("STATE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_TRUE_FALSE_UK3
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_TRUE_FALSE_UK3" ON "VAPPCT"."STAT_TRUE_FALSE" ("DEFAULT_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_SEX_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_SEX_PK" ON "VAPPCT"."STAT_SEX" ("SEX_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_UR_MO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_UR_MO_PK" ON "VAPPCT"."STAT_UR_MO" ("USER_ROLE_ID", "MENU_OPTION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_CHECKLIST_STATE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_CHECKLIST_STATE_PK" ON "VAPPCT"."STAT_CHECKLIST_STATE" ("CHECKLIST_STATE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_DECISION_STATE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_DECISION_STATE_PK" ON "VAPPCT"."USR_DECISION_STATE" ("DS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_ITEM_OS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_ITEM_OS_PK" ON "VAPPCT"."USR_CLI_OS" ("CHECKLIST_ID", "ITEM_ID", "OS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_SEX_UK01
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_SEX_UK01" ON "VAPPCT"."STAT_SEX" ("SEX_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_PCK_STATUS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_PCK_STATUS_UK1" ON "VAPPCT"."FX_PCK_STATUS" ("PCK_STATUS_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_OS_DEFINITION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_OS_DEFINITION_PK" ON "VAPPCT"."STAT_OS_DEFINITION" ("OS_DEFINITION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_TEMPORAL_STATE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_TEMPORAL_STATE_PK" ON "VAPPCT"."USR_TEMPORAL_STATE" ("TS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index USR_DECISION_STATE_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."USR_DECISION_STATE_IDX" ON "VAPPCT"."USR_DECISION_STATE" (LOWER("DS_LABEL")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index UTL_TEAM_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."UTL_TEAM_UK1" ON "VAPPCT"."UTL_TEAM" ("TEAM_LABEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  DDL for Index STAT_SEX_UK02
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAPPCT"."STAT_SEX_UK02" ON "VAPPCT"."STAT_SEX" ("SEX_ABBREVIATION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT" ;
--------------------------------------------------------
--  Constraints for Table USR_PAT_CL_ITEM_CMNT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM_CMNT" MODIFY ("COMMENT_TEXT" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM_CMNT" MODIFY ("COMMENT_DATE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM_CMNT" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM_CMNT" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM_CMNT" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM_CMNT" MODIFY ("PAT_CL_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table UTL_TEAM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_TEAM" ADD CONSTRAINT "UTL_TEAM_UK1" UNIQUE ("TEAM_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."UTL_TEAM" MODIFY ("TEAM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_TEAM" MODIFY ("TEAM_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_TEAM" ADD CONSTRAINT "UTL_TEAM_PK" PRIMARY KEY ("TEAM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table UTL_USER_ROLE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_USER_ROLE" MODIFY ("USER_ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_USER_ROLE" MODIFY ("USER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USR_CLI_TS
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CLI_TS" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_TS" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_TS" MODIFY ("TS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_TS" ADD CONSTRAINT "USR_ITEM_TS_PK" PRIMARY KEY ("CHECKLIST_ID", "ITEM_ID", "TS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_CLI_TS" MODIFY ("ACTIVE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table UTL_SPECIALTY_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_SPECIALTY_PATIENT" MODIFY ("SPECIALTY_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_SPECIALTY_PATIENT" MODIFY ("PATIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_SPECIALTY_PATIENT" ADD CONSTRAINT "UTL_SPECIALTY_PATIENT_PK" PRIMARY KEY ("SPECIALTY_ID", "PATIENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table UTL_TEAM_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_TEAM_PATIENT" MODIFY ("TEAM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_TEAM_PATIENT" MODIFY ("PATIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_TEAM_PATIENT" ADD CONSTRAINT "UTL_TEAM_PATIENT_PK" PRIMARY KEY ("TEAM_ID", "PATIENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FX_SESSION
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."FX_SESSION" ADD CONSTRAINT "FX_SESSION_PK" PRIMARY KEY ("FX_SESSION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."FX_SESSION" MODIFY ("FX_SESSION_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table FX_AUDIT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."FX_AUDIT" MODIFY ("CLIENT_IP" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."FX_AUDIT" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."FX_AUDIT" MODIFY ("AUDIT_DATE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."FX_AUDIT" MODIFY ("AUDIT_NAME" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."FX_AUDIT" MODIFY ("FX_AUDIT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."FX_AUDIT" MODIFY ("STATUS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."FX_AUDIT" ADD CONSTRAINT "FX_AUDIT_PK" PRIMARY KEY ("FX_AUDIT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_ITEM_GROUP
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_ITEM_GROUP" MODIFY ("ITEM_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_GROUP" MODIFY ("ITEM_GROUP_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_GROUP" MODIFY ("IS_ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_GROUP" ADD CONSTRAINT "USR_ITEM_GROUP_PK" PRIMARY KEY ("ITEM_GROUP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_ITEM_GROUP" ADD CONSTRAINT "USER_ITEM_GROUP_CHK" CHECK ("ITEM_GROUP_ID">0) ENABLE;
--------------------------------------------------------
--  Constraints for Table UTL_NOTE_TITLE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_NOTE_TITLE" MODIFY ("NOTE_TITLE_TAG" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_NOTE_TITLE" MODIFY ("NOTE_TITLE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_NOTE_TITLE" ADD CONSTRAINT "UTL_NOTE_TITLE_PK" PRIMARY KEY ("NOTE_TITLE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_OUTCOME_STATE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_OUTCOME_STATE" MODIFY ("OS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_OUTCOME_STATE" MODIFY ("OS_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_OUTCOME_STATE" MODIFY ("OS_DEFINITION_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_OUTCOME_STATE" MODIFY ("IS_ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_OUTCOME_STATE" ADD CONSTRAINT "USR_OUTCOME_STATE_PK" PRIMARY KEY ("OS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_OUTCOME_STATE" ADD CONSTRAINT "USR_OUTCOME_STATE_CHK01" CHECK (OS_ID > 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_OUTCOME_STATE" MODIFY ("IS_DEFAULT" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USR_CL_READ_ONLY
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CL_READ_ONLY" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_READ_ONLY" MODIFY ("USER_ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_READ_ONLY" ADD CONSTRAINT "USR_CL_READ_ONLY_PK" PRIMARY KEY ("CHECKLIST_ID", "USER_ROLE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table UTL_USER_SECURITY_KEY
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_USER_SECURITY_KEY" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_USER_SECURITY_KEY" MODIFY ("SECURITY_KEY_NAME" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_USER_SECURITY_KEY" MODIFY ("SECURITY_KEY_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USR_IC_STATE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_IC_STATE" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_STATE" MODIFY ("ITEM_COMPONENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_STATE" MODIFY ("IC_STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_STATE" MODIFY ("STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_STATE" ADD CONSTRAINT "USR_IC_STATE_UK" UNIQUE ("ITEM_ID", "ITEM_COMPONENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_STATE" ADD CONSTRAINT "USR_IC_SELECTION_PK" PRIMARY KEY ("IC_STATE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_STATE" ADD CONSTRAINT "USR_IC_SELECTION_CHK01" CHECK ("IC_STATE_ID">0) ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_UR_MO
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_UR_MO" MODIFY ("USER_ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_UR_MO" MODIFY ("MENU_OPTION_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_UR_MO" ADD CONSTRAINT "STAT_UR_MO_PK" PRIMARY KEY ("USER_ROLE_ID", "MENU_OPTION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table UTL_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_PATIENT" MODIFY ("PATIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_PATIENT" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_PATIENT" MODIFY ("LAST_NAME" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_PATIENT" ADD CONSTRAINT "UTL_PATIENT_PK" PRIMARY KEY ("PATIENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_CL_ITEM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CL_ITEM" MODIFY ("LOGIC" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" MODIFY ("CLI_TS_TIME_PERIOD" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" MODIFY ("TIME_UNIT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" MODIFY ("SORT_ORDER" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" MODIFY ("ACTIVE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" ADD CONSTRAINT "USR_CL_ITEM_PK" PRIMARY KEY ("CHECKLIST_ID", "ITEM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" ADD CONSTRAINT "USR_CL_ITEM_CHK01" CHECK (CLI_TS_TIME_PERIOD > 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" ADD CONSTRAINT "USR_CL_ITEM_CHK02" CHECK ("SORT_ORDER">0) ENABLE;
--------------------------------------------------------
--  Constraints for Table UTL_CLINIC
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_CLINIC" ADD CONSTRAINT "UTL_CLINIC_UK1" UNIQUE ("CLINIC_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."UTL_CLINIC" MODIFY ("CLINIC_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_CLINIC" MODIFY ("CLINIC_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_CLINIC" ADD CONSTRAINT "UTL_CLINIC_PK" PRIMARY KEY ("CLINIC_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_PAT_ITEM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_ITEM" MODIFY ("ENTRY_DATE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM" MODIFY ("SOURCE_TYPE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM" MODIFY ("PAT_ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM" ADD CONSTRAINT "USR_PAT_ITEM_PK" PRIMARY KEY ("PAT_ITEM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM" MODIFY ("PATIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM" ADD CONSTRAINT "USR_PAT_ITEM_CHK1" CHECK (PAT_ITEM_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table UTL_LAB_TEST
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_LAB_TEST" MODIFY ("LAB_TEST_NAME" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_LAB_TEST" ADD CONSTRAINT "UTL_LAB_TEST2_PK" PRIMARY KEY ("LAB_TEST_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."UTL_LAB_TEST" MODIFY ("LAB_TEST_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STAT_USER_ROLE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_USER_ROLE" MODIFY ("USER_ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_USER_ROLE" MODIFY ("USER_ROLE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_USER_ROLE" ADD CONSTRAINT "STAT_USER_ROLE_PK" PRIMARY KEY ("USER_ROLE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_USER_ROLE" ADD CONSTRAINT "STAT_USER_ROLE_UK" UNIQUE ("USER_ROLE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_USER_ROLE" ADD CONSTRAINT "STAT_USER_ROLE_CHK" CHECK (USER_ROLE_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_PLACE_HOLDER
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_PLACE_HOLDER" MODIFY ("PLACE_HOLDER_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_PLACE_HOLDER" MODIFY ("PLACE_HOLDER_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_PLACE_HOLDER" MODIFY ("PLACE_HOLDER_SYNTAX" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_PLACE_HOLDER" ADD CONSTRAINT "STAT_PLACE_HOLDER_UK1" UNIQUE ("PLACE_HOLDER_LABEL", "PH_PARENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_PLACE_HOLDER" ADD CONSTRAINT "STAT_PLACE_HOLDER_PK" PRIMARY KEY ("PLACE_HOLDER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_PLACE_HOLDER" ADD CONSTRAINT "STAT_PLACE_HOLDER_UK2" UNIQUE ("PLACE_HOLDER_SYNTAX", "PH_PARENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_PLACE_HOLDER" MODIFY ("PH_PARENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_PLACE_HOLDER" MODIFY ("IS_GROUP" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_PLACE_HOLDER" ADD CONSTRAINT "STAT_PLACE_HOLDER_CHK1" CHECK (PLACE_HOLDER_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_ITEM_COMPONENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_ITEM_COMPONENT" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_COMPONENT" MODIFY ("ITEM_COMPONENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_COMPONENT" MODIFY ("ITEM_COMPONENT_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_COMPONENT" MODIFY ("SORT_ORDER" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_COMPONENT" MODIFY ("ACTIVE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_COMPONENT" ADD CONSTRAINT "USR_ITEM_COMPONENT_PK" PRIMARY KEY ("ITEM_COMPONENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_ITEM_COMPONENT" ADD CONSTRAINT "USR_ITEM_COMPONENT_CHK01" CHECK (ITEM_COMPONENT_ID > 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_ITEM_COMPONENT" ADD CONSTRAINT "USR_ITEM_COMPONENT_CHK02" CHECK (SORT_ORDER > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_OS_DEFINITION
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_OS_DEFINITION" MODIFY ("OS_DEFINITION_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_OS_DEFINITION" MODIFY ("OS_DEFINITION_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_OS_DEFINITION" MODIFY ("STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_OS_DEFINITION" ADD CONSTRAINT "STAT_OS_DEFINITION_PK" PRIMARY KEY ("OS_DEFINITION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_OS_DEFINITION" ADD CONSTRAINT "STAT_OS_DEFINITION_UK" UNIQUE ("OS_DEFINITION_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_OS_DEFINITION" ADD CONSTRAINT "STAT_OS_DEFINITION_CHK" CHECK (OS_DEFINITION_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_PAT_CL_ITEM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" ADD CONSTRAINT "USR_PAT_CL_ITEM_CHK1" CHECK ("OVERRIDE_DATE" IS NOT NULL AND "IS_OVERRIDDEN"=1 OR "OVERRIDE_DATE" IS NULL AND "IS_OVERRIDDEN"=2) ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" MODIFY ("IS_ENABLED" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" MODIFY ("IS_OVERRIDDEN" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" MODIFY ("TS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" MODIFY ("OS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" MODIFY ("DS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" MODIFY ("PAT_CL_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" ADD CONSTRAINT "USR_PAT_CL_ITEM_PK" PRIMARY KEY ("PAT_CL_ID", "ITEM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" MODIFY ("PATIENT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USR_PAT_CHECKLIST
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" MODIFY ("ASSIGNMENT_DATE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" MODIFY ("STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" MODIFY ("CHECKLIST_STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" MODIFY ("PAT_CL_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" ADD CONSTRAINT "USR_PAT_CHECKLIST_PK" PRIMARY KEY ("PAT_CL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" MODIFY ("PATIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USR_CLI_DS_EDIT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CLI_DS_EDIT" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_DS_EDIT" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_DS_EDIT" MODIFY ("USER_ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_DS_EDIT" ADD CONSTRAINT "USR_CLI_DS_EDIT_PK" PRIMARY KEY ("CHECKLIST_ID", "ITEM_ID", "USER_ROLE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FX_VAPPCTCOMM_EVENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."FX_VAPPCTCOMM_EVENT" MODIFY ("USER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USR_SERVICE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_SERVICE" MODIFY ("SERVICE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_SERVICE" MODIFY ("SERVICE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_SERVICE" MODIFY ("IS_ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_SERVICE" ADD CONSTRAINT "USR_SERVICE_PK" PRIMARY KEY ("SERVICE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_SERVICE" ADD CONSTRAINT "USR_SERVICE_CHK1" CHECK (SERVICE_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_IC_RANGE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_IC_RANGE" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" MODIFY ("ITEM_COMPONENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" MODIFY ("IC_RANGE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" MODIFY ("UNITS" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" MODIFY ("LEGAL_MIN" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" MODIFY ("CRITICAL_LOW" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" MODIFY ("LOW" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" MODIFY ("HIGH" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" MODIFY ("CRITICAL_HIGH" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" MODIFY ("LEGAL_MAX" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_PK" PRIMARY KEY ("IC_RANGE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_CHK01" CHECK (IC_RANGE_ID > 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_CHK02" CHECK (LEGAL_MIN >= 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_CHK03" CHECK (CRITICAL_LOW >= 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_CHK04" CHECK (LOW >= 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_CHK05" CHECK (HIGH >= 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_CHK06" CHECK (CRITICAL_HIGH >= 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_CHK07" CHECK (LEGAL_MAX >= 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_UK" UNIQUE ("ITEM_ID", "ITEM_COMPONENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_CL_VIEWABLE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CL_VIEWABLE" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_VIEWABLE" MODIFY ("USER_ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_VIEWABLE" ADD CONSTRAINT "USR_CL_VIEWABLE_PK" PRIMARY KEY ("CHECKLIST_ID", "USER_ROLE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_SEX
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_SEX" MODIFY ("SEX_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_SEX" MODIFY ("SEX_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_SEX" MODIFY ("SEX_ABBREVIATION" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_SEX" ADD CONSTRAINT "STAT_SEX_PK" PRIMARY KEY ("SEX_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_SEX" ADD CONSTRAINT "STAT_SEX_UK01" UNIQUE ("SEX_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_SEX" ADD CONSTRAINT "STAT_SEX_UK02" UNIQUE ("SEX_ABBREVIATION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_SEX" ADD CONSTRAINT "STAT_SEX_CHK" CHECK (SEX_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table UTL_CLINIC_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_CLINIC_PATIENT" MODIFY ("CLINIC_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_CLINIC_PATIENT" MODIFY ("PATIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_CLINIC_PATIENT" ADD CONSTRAINT "UTL_CLINIC_PATIENT_PK" PRIMARY KEY ("CLINIC_ID", "PATIENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 166 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table UTL_USER
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_USER" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_USER" ADD CONSTRAINT "UTL_USER_PK" PRIMARY KEY ("USER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_TRUE_FALSE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" MODIFY ("TRUE_FALSE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" MODIFY ("TRUE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" ADD CONSTRAINT "STAT_TRUE_FALSE_PK" PRIMARY KEY ("TRUE_FALSE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" ADD CONSTRAINT "STAT_TRUE_FALSE_UK1" UNIQUE ("TRUE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" MODIFY ("ACTIVE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" MODIFY ("DEFAULT_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" MODIFY ("YES_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" ADD CONSTRAINT "STAT_TRUE_FALSE_UK2" UNIQUE ("ACTIVE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" ADD CONSTRAINT "STAT_TRUE_FALSE_UK3" UNIQUE ("DEFAULT_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" ADD CONSTRAINT "STAT_TRUE_FALSE_UK4" UNIQUE ("YES_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" MODIFY ("ENABLE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" MODIFY ("OVERRIDE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" ADD CONSTRAINT "STAT_TRUE_FALSE_UK5" UNIQUE ("ENABLE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" ADD CONSTRAINT "STAT_TRUE_FALSE_UK6" UNIQUE ("OVERRIDE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TRUE_FALSE" MODIFY ("SELECTED_LABEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table UTL_USER_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_USER_PATIENT" MODIFY ("PATIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_USER_PATIENT" MODIFY ("USER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table UTL_SPECIALTY
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_SPECIALTY" MODIFY ("SPECIALTY_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_SPECIALTY" ADD CONSTRAINT "UTL_SPECIALTY_UK1" UNIQUE ("SPECIALTY_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."UTL_SPECIALTY" MODIFY ("SPECIALTY_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_SPECIALTY" ADD CONSTRAINT "UTL_SPECIALTY_PK" PRIMARY KEY ("SPECIALTY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_DS_DEFINITION
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_DS_DEFINITION" MODIFY ("DS_DEFINITION_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_DS_DEFINITION" MODIFY ("DS_DEFINITION_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_DS_DEFINITION" MODIFY ("STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_DS_DEFINITION" ADD CONSTRAINT "STAT_DS_DEFINITION_PK" PRIMARY KEY ("DS_DEFINITION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_DS_DEFINITION" ADD CONSTRAINT "STAT_DS_DEFINITION_UK" UNIQUE ("DS_DEFINITION_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_DS_DEFINITION" ADD CONSTRAINT "STAT_DS_DEFINITION_CHK" CHECK (DS_DEFINITION_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_XFER_SYSTEM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_XFER_SYSTEM" ADD CONSTRAINT "STAT_XFER_SYSTEM_UK1" UNIQUE ("XFER_SYSTEM")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_XFER_SYSTEM" MODIFY ("XFER_SYSTEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_XFER_SYSTEM" MODIFY ("XFER_SYSTEM" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_XFER_SYSTEM" ADD CONSTRAINT "STAT_XFER_SYSTEM_PK" PRIMARY KEY ("XFER_SYSTEM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_CHECKLIST_STATE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_CHECKLIST_STATE" ADD CONSTRAINT "STAT_CHECKLIST_STATE_PK" PRIMARY KEY ("CHECKLIST_STATE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_CHECKLIST_STATE" ADD CONSTRAINT "STAT_CHECKLIST_STATE_UK" UNIQUE ("CHECKLIST_STATE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_CHECKLIST_STATE" ADD CONSTRAINT "STAT_CHECKLIST_STATE_CHK" CHECK (CHECKLIST_STATE_ID > 0) ENABLE;
  ALTER TABLE "VAPPCT"."STAT_CHECKLIST_STATE" MODIFY ("CHECKLIST_STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_CHECKLIST_STATE" MODIFY ("CHECKLIST_STATE_LABEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STAT_MENU_OPTION
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_MENU_OPTION" MODIFY ("MENU_OPTION_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_MENU_OPTION" MODIFY ("MENU_OPTION_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_MENU_OPTION" MODIFY ("MENU_OPTION_URL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_MENU_OPTION" ADD CONSTRAINT "STAT_MENU_OPTION_PK" PRIMARY KEY ("MENU_OPTION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_MENU_OPTION" ADD CONSTRAINT "STAT_MENU_OPTION_UK01" UNIQUE ("MENU_OPTION_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_MENU_OPTION" ADD CONSTRAINT "STAT_MENU_OPTION_UK02" UNIQUE ("MENU_OPTION_URL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_MENU_OPTION" ADD CONSTRAINT "STAT_MENU_OPTION_CHK" CHECK (MENU_OPTION_ID > 0) ENABLE;
  ALTER TABLE "VAPPCT"."STAT_MENU_OPTION" MODIFY ("SORT_ORDER" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STAT_ACTIVE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_ACTIVE" MODIFY ("ACTIVE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_ACTIVE" MODIFY ("ACTIVE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_ACTIVE" ADD CONSTRAINT "STAT_ACTIVE_PK" PRIMARY KEY ("ACTIVE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_ACTIVE" ADD CONSTRAINT "STAT_ACTIVE_UK" UNIQUE ("ACTIVE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_ACTIVE" ADD CONSTRAINT "STAT_ACTIVE_CHK" CHECK (ACTIVE_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_TEMPORAL_STATE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_TEMPORAL_STATE" MODIFY ("IS_DEFAULT" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_TEMPORAL_STATE" MODIFY ("TS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_TEMPORAL_STATE" MODIFY ("TS_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_TEMPORAL_STATE" MODIFY ("TS_DEFINITION_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_TEMPORAL_STATE" MODIFY ("IS_ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_TEMPORAL_STATE" ADD CONSTRAINT "USR_TEMPORAL_STATE_PK" PRIMARY KEY ("TS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_TEMPORAL_STATE" ADD CONSTRAINT "USR_TEMPORAL_STATE_CHK01" CHECK (TS_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_DECISION_STATE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_DECISION_STATE" MODIFY ("DS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_DECISION_STATE" MODIFY ("DS_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_DECISION_STATE" MODIFY ("DS_DEFINITION_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_DECISION_STATE" MODIFY ("IS_ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_DECISION_STATE" ADD CONSTRAINT "USR_DECISION_STATE_PK" PRIMARY KEY ("DS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_DECISION_STATE" ADD CONSTRAINT "USR_DECISION_STATE_CHK01" CHECK (DS_ID > 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_DECISION_STATE" MODIFY ("IS_DEFAULT" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USR_ITEM_COLLECTION
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_ITEM_COLLECTION" MODIFY ("COLLECTION_ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_COLLECTION" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_COLLECTION" MODIFY ("SORT_ORDER" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM_COLLECTION" ADD CONSTRAINT "USR_ITEM_COLLECTION_PK" PRIMARY KEY ("COLLECTION_ITEM_ID", "ITEM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_ITEM_COLLECTION" ADD CONSTRAINT "USR_ITEM_COLLECTION_CHK1" CHECK (SORT_ORDER > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_CL_CLOSEABLE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CL_CLOSEABLE" MODIFY ("USER_ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CL_CLOSEABLE" ADD CONSTRAINT "USR_CL_CLOSEABLE_PK" PRIMARY KEY ("CHECKLIST_ID", "USER_ROLE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_CL_CLOSEABLE" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STAT_ITEM_TYPE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_ITEM_TYPE" MODIFY ("ITEM_TYPE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_ITEM_TYPE" MODIFY ("ITEM_TYPE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_ITEM_TYPE" ADD CONSTRAINT "STAT_ITEM_TYPE_PK" PRIMARY KEY ("ITEM_TYPE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_ITEM_TYPE" ADD CONSTRAINT "STAT_ITEM_TYPE_UK" UNIQUE ("ITEM_TYPE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_ITEM_TYPE" ADD CONSTRAINT "STAT_ITEM_TYPE_CHK" CHECK (ITEM_TYPE_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_CHECKLIST
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CHECKLIST" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CHECKLIST" MODIFY ("CHECKLIST_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CHECKLIST" MODIFY ("SERVICE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CHECKLIST" MODIFY ("CHECKLIST_DESCRIPTION" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CHECKLIST" MODIFY ("ACTIVE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CHECKLIST" ADD CONSTRAINT "USR_CHECKLIST_PK" PRIMARY KEY ("CHECKLIST_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_CHECKLIST" ADD CONSTRAINT "USR_CHECKLIST_CHK01" CHECK (CHECKLIST_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table UTL_WARD_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_WARD_PATIENT" MODIFY ("WARD_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_WARD_PATIENT" MODIFY ("PATIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_WARD_PATIENT" ADD CONSTRAINT "UTL_WARD_PATIENT_PK" PRIMARY KEY ("WARD_ID", "PATIENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 166 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_CLI_OS
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CLI_OS" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_OS" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_OS" MODIFY ("OS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_OS" ADD CONSTRAINT "USR_ITEM_OS_PK" PRIMARY KEY ("CHECKLIST_ID", "ITEM_ID", "OS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_CLI_OS" MODIFY ("ACTIVE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USR_ITEM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_ITEM" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM" MODIFY ("ITEM_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM" MODIFY ("ITEM_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM" MODIFY ("ITEM_DESCRIPTION" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM" MODIFY ("LOOKBACK_TIME" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM" MODIFY ("ACTIVE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM" ADD CONSTRAINT "USR_ITEM_PK" PRIMARY KEY ("ITEM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_ITEM" ADD CONSTRAINT "USR_ITEM_CHK01" CHECK (ITEM_ID > 0) ENABLE;
  ALTER TABLE "VAPPCT"."USR_ITEM" MODIFY ("ITEM_TYPE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM" MODIFY ("MAP_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_ITEM" ADD CONSTRAINT "USR_ITEM_CHK02" CHECK (LOOKBACK_TIME >= 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_PAT_ITEM_COMPONENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_COMPONENT" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_COMPONENT" MODIFY ("ITEM_COMPONENT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_COMPONENT" MODIFY ("PAT_ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_COMPONENT" MODIFY ("COMPONENT_VALUE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_COMPONENT" ADD CONSTRAINT "USR_PAT_ITEM_COMPONENT_PK" PRIMARY KEY ("PAT_ITEM_ID", "ITEM_COMPONENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_SOURCE_TYPE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_SOURCE_TYPE" MODIFY ("SOURCE_TYPE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_SOURCE_TYPE" MODIFY ("SOURCE_TYPE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_SOURCE_TYPE" ADD CONSTRAINT "STAT_SOURCE_TYPE_PK" PRIMARY KEY ("SOURCE_TYPE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_SOURCE_TYPE" ADD CONSTRAINT "STAT_SOURCE_TYPE_UK" UNIQUE ("SOURCE_TYPE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_SOURCE_TYPE" ADD CONSTRAINT "STAT_SOURCE_TYPE_CHK" CHECK (SOURCE_TYPE_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_TS_DEFINITION
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_TS_DEFINITION" MODIFY ("TS_DEFINITION_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TS_DEFINITION" MODIFY ("TS_DEFINITION_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TS_DEFINITION" MODIFY ("STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TS_DEFINITION" ADD CONSTRAINT "STAT_TS_DEFINITION_PK" PRIMARY KEY ("TS_DEFINITION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TS_DEFINITION" ADD CONSTRAINT "STAT_TS_DEFINITION_UK" UNIQUE ("TS_DEFINITION_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TS_DEFINITION" ADD CONSTRAINT "STAT_TS_DEFINITION_CHK" CHECK (TS_DEFINITION_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table USR_PAT_CLI_OVERRIDE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_CLI_OVERRIDE" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CLI_OVERRIDE" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CLI_OVERRIDE" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_CLI_OVERRIDE" MODIFY ("PAT_CL_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USR_CLI_DS
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CLI_DS" MODIFY ("CHECKLIST_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_DS" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_DS" MODIFY ("DS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_CLI_DS" ADD CONSTRAINT "USR_ITEM_DS_PK" PRIMARY KEY ("CHECKLIST_ID", "ITEM_ID", "DS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."USR_CLI_DS" MODIFY ("ACTIVE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USR_PAT_ITEM_CMNT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_CMNT" MODIFY ("COMMENT_TEXT" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_CMNT" MODIFY ("COMMENT_DATE" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_CMNT" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_CMNT" MODIFY ("ITEM_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_CMNT" MODIFY ("PAT_ITEM_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table UTL_WARD
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_WARD" ADD CONSTRAINT "UTL_WARD_UK1" UNIQUE ("WARD_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 167 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."UTL_WARD" MODIFY ("WARD_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_WARD" MODIFY ("WARD_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."UTL_WARD" ADD CONSTRAINT "UTL_WARD_PK" PRIMARY KEY ("WARD_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FX_PCK_STATUS
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."FX_PCK_STATUS" MODIFY ("PCK_STATUS_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."FX_PCK_STATUS" MODIFY ("STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."FX_PCK_STATUS" MODIFY ("PCK_STATUS_COMMENT" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."FX_PCK_STATUS" ADD CONSTRAINT "STAT_PCK_STATUS_PK" PRIMARY KEY ("PCK_STATUS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."FX_PCK_STATUS" ADD CONSTRAINT "STAT_PCK_STATUS_UK2" UNIQUE ("PCK_STATUS_COMMENT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."FX_PCK_STATUS" ADD CONSTRAINT "STAT_PCK_STATUS_CHK" CHECK (PCK_STATUS_ID > 0) ENABLE;
  ALTER TABLE "VAPPCT"."FX_PCK_STATUS" MODIFY ("PCK_STATUS_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."FX_PCK_STATUS" ADD CONSTRAINT "STAT_PCK_STATUS_UK1" UNIQUE ("PCK_STATUS_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_STATE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_STATE" MODIFY ("STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_STATE" MODIFY ("STATE_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_STATE" ADD CONSTRAINT "STAT_STATE_PK" PRIMARY KEY ("STATE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_STATE" ADD CONSTRAINT "STAT_STATE_UK" UNIQUE ("STATE_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_STATE" ADD CONSTRAINT "STAT_STATE_CHK" CHECK (STATE_ID > 0) ENABLE;
--------------------------------------------------------
--  Constraints for Table STAT_TIME_UNIT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_TIME_UNIT" MODIFY ("TIME_UNIT_ID" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TIME_UNIT" MODIFY ("TIME_UNIT_LABEL" NOT NULL ENABLE);
  ALTER TABLE "VAPPCT"."STAT_TIME_UNIT" ADD CONSTRAINT "STAT_TIME_UNIT_PK" PRIMARY KEY ("TIME_UNIT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TIME_UNIT" ADD CONSTRAINT "STAT_TIME_UNIT_UK" UNIQUE ("TIME_UNIT_LABEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "VAPPCT"  ENABLE;
  ALTER TABLE "VAPPCT"."STAT_TIME_UNIT" ADD CONSTRAINT "STAT_TIME_UNIT_CHK" CHECK (TIME_UNIT_ID > 0) ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FX_AUDIT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."FX_AUDIT" ADD CONSTRAINT "FX_AUDIT_FK1" FOREIGN KEY ("STATUS_ID")
	  REFERENCES "VAPPCT"."STAT_STATE" ("STATE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FX_PCK_STATUS
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."FX_PCK_STATUS" ADD CONSTRAINT "STAT_PCK_STATUS_FK" FOREIGN KEY ("STATE_ID")
	  REFERENCES "VAPPCT"."STAT_STATE" ("STATE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FX_VAPPCTCOMM_EVENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."FX_VAPPCTCOMM_EVENT" ADD CONSTRAINT "FX_VAPPCTCOMM_EVENT_FK1" FOREIGN KEY ("USER_ID")
	  REFERENCES "VAPPCT"."UTL_USER" ("USER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STAT_DS_DEFINITION
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_DS_DEFINITION" ADD CONSTRAINT "STAT_DS_DEFINITION_FK" FOREIGN KEY ("STATE_ID")
	  REFERENCES "VAPPCT"."STAT_STATE" ("STATE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STAT_OS_DEFINITION
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_OS_DEFINITION" ADD CONSTRAINT "STAT_OS_DEFINITION_FK" FOREIGN KEY ("STATE_ID")
	  REFERENCES "VAPPCT"."STAT_STATE" ("STATE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STAT_PLACE_HOLDER
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_PLACE_HOLDER" ADD CONSTRAINT "STAT_PLACE_HOLDER_STAT_PL_FK1" FOREIGN KEY ("PH_PARENT_ID")
	  REFERENCES "VAPPCT"."STAT_PLACE_HOLDER" ("PLACE_HOLDER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STAT_TS_DEFINITION
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_TS_DEFINITION" ADD CONSTRAINT "STAT_TS_DEFINITION_FK01" FOREIGN KEY ("STATE_ID")
	  REFERENCES "VAPPCT"."STAT_STATE" ("STATE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STAT_UR_MO
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."STAT_UR_MO" ADD CONSTRAINT "STAT_UR_MO_FK01" FOREIGN KEY ("USER_ROLE_ID")
	  REFERENCES "VAPPCT"."STAT_USER_ROLE" ("USER_ROLE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."STAT_UR_MO" ADD CONSTRAINT "STAT_UR_MO_FK02" FOREIGN KEY ("MENU_OPTION_ID")
	  REFERENCES "VAPPCT"."STAT_MENU_OPTION" ("MENU_OPTION_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_CHECKLIST
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CHECKLIST" ADD CONSTRAINT "USR_CHECKLIST_FK1" FOREIGN KEY ("SERVICE_ID")
	  REFERENCES "VAPPCT"."USR_SERVICE" ("SERVICE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CHECKLIST" ADD CONSTRAINT "USR_CHECKLIST_FK2" FOREIGN KEY ("ACTIVE_ID")
	  REFERENCES "VAPPCT"."STAT_ACTIVE" ("ACTIVE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_CLI_DS
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CLI_DS" ADD CONSTRAINT "USR_CLI_DS_FK1" FOREIGN KEY ("CHECKLIST_ID", "ITEM_ID")
	  REFERENCES "VAPPCT"."USR_CL_ITEM" ("CHECKLIST_ID", "ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CLI_DS" ADD CONSTRAINT "USR_CLI_DS_FK2" FOREIGN KEY ("DS_ID")
	  REFERENCES "VAPPCT"."USR_DECISION_STATE" ("DS_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CLI_DS" ADD CONSTRAINT "USR_CLI_DS_FK3" FOREIGN KEY ("ACTIVE_ID")
	  REFERENCES "VAPPCT"."STAT_ACTIVE" ("ACTIVE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_CLI_DS_EDIT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CLI_DS_EDIT" ADD CONSTRAINT "USR_CLI_DS_EDIT_FK2" FOREIGN KEY ("USER_ROLE_ID")
	  REFERENCES "VAPPCT"."STAT_USER_ROLE" ("USER_ROLE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CLI_DS_EDIT" ADD CONSTRAINT "USR_CLI_DS_EDIT_USR_CL_IT_FK1" FOREIGN KEY ("CHECKLIST_ID", "ITEM_ID")
	  REFERENCES "VAPPCT"."USR_CL_ITEM" ("CHECKLIST_ID", "ITEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_CLI_OS
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CLI_OS" ADD CONSTRAINT "USR_CLI_OS_FK1" FOREIGN KEY ("CHECKLIST_ID", "ITEM_ID")
	  REFERENCES "VAPPCT"."USR_CL_ITEM" ("CHECKLIST_ID", "ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CLI_OS" ADD CONSTRAINT "USR_CLI_OS_FK2" FOREIGN KEY ("OS_ID")
	  REFERENCES "VAPPCT"."USR_OUTCOME_STATE" ("OS_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CLI_OS" ADD CONSTRAINT "USR_CLI_OS_FK3" FOREIGN KEY ("ACTIVE_ID")
	  REFERENCES "VAPPCT"."STAT_ACTIVE" ("ACTIVE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_CLI_TS
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CLI_TS" ADD CONSTRAINT "USR_CLI_TS_FK1" FOREIGN KEY ("CHECKLIST_ID", "ITEM_ID")
	  REFERENCES "VAPPCT"."USR_CL_ITEM" ("CHECKLIST_ID", "ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CLI_TS" ADD CONSTRAINT "USR_CLI_TS_FK2" FOREIGN KEY ("TS_ID")
	  REFERENCES "VAPPCT"."USR_TEMPORAL_STATE" ("TS_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CLI_TS" ADD CONSTRAINT "USR_CLI_TS_FK3" FOREIGN KEY ("ACTIVE_ID")
	  REFERENCES "VAPPCT"."STAT_ACTIVE" ("ACTIVE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_CL_CLOSEABLE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CL_CLOSEABLE" ADD CONSTRAINT "USR_CL_CLOSEABLE_FK1" FOREIGN KEY ("CHECKLIST_ID")
	  REFERENCES "VAPPCT"."USR_CHECKLIST" ("CHECKLIST_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CL_CLOSEABLE" ADD CONSTRAINT "USR_CL_CLOSEABLE_FK2" FOREIGN KEY ("USER_ROLE_ID")
	  REFERENCES "VAPPCT"."STAT_USER_ROLE" ("USER_ROLE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_CL_ITEM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CL_ITEM" ADD CONSTRAINT "USR_CL_ITEM_FK1" FOREIGN KEY ("CHECKLIST_ID")
	  REFERENCES "VAPPCT"."USR_CHECKLIST" ("CHECKLIST_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" ADD CONSTRAINT "USR_CL_ITEM_FK2" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "VAPPCT"."USR_ITEM" ("ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" ADD CONSTRAINT "USR_CL_ITEM_FK3" FOREIGN KEY ("TIME_UNIT_ID")
	  REFERENCES "VAPPCT"."STAT_TIME_UNIT" ("TIME_UNIT_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CL_ITEM" ADD CONSTRAINT "USR_CL_ITEM_FK4" FOREIGN KEY ("ACTIVE_ID")
	  REFERENCES "VAPPCT"."STAT_ACTIVE" ("ACTIVE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_CL_READ_ONLY
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CL_READ_ONLY" ADD CONSTRAINT "USR_CL_READ_ONLY_FK1" FOREIGN KEY ("CHECKLIST_ID")
	  REFERENCES "VAPPCT"."USR_CHECKLIST" ("CHECKLIST_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CL_READ_ONLY" ADD CONSTRAINT "USR_CL_READ_ONLY_FK2" FOREIGN KEY ("USER_ROLE_ID")
	  REFERENCES "VAPPCT"."STAT_USER_ROLE" ("USER_ROLE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_CL_VIEWABLE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_CL_VIEWABLE" ADD CONSTRAINT "USR_CL_VIEWABLE_FK1" FOREIGN KEY ("CHECKLIST_ID")
	  REFERENCES "VAPPCT"."USR_CHECKLIST" ("CHECKLIST_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_CL_VIEWABLE" ADD CONSTRAINT "USR_CL_VIEWABLE_FK2" FOREIGN KEY ("USER_ROLE_ID")
	  REFERENCES "VAPPCT"."STAT_USER_ROLE" ("USER_ROLE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_DECISION_STATE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_DECISION_STATE" ADD CONSTRAINT "USR_DECISION_STATE_FK1" FOREIGN KEY ("DS_DEFINITION_ID")
	  REFERENCES "VAPPCT"."STAT_DS_DEFINITION" ("DS_DEFINITION_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_DECISION_STATE" ADD CONSTRAINT "USR_DECISION_STATE_FK2" FOREIGN KEY ("IS_ACTIVE")
	  REFERENCES "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_DECISION_STATE" ADD CONSTRAINT "USR_DECISION_STATE_FK3" FOREIGN KEY ("IS_DEFAULT")
	  REFERENCES "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_IC_RANGE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_FK1" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "VAPPCT"."USR_ITEM" ("ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_RANGE" ADD CONSTRAINT "USR_IC_RANGE_FK2" FOREIGN KEY ("ITEM_COMPONENT_ID")
	  REFERENCES "VAPPCT"."USR_ITEM_COMPONENT" ("ITEM_COMPONENT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_IC_STATE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_IC_STATE" ADD CONSTRAINT "USR_IC_SELECTION_FK1" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "VAPPCT"."USR_ITEM" ("ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_STATE" ADD CONSTRAINT "USR_IC_SELECTION_FK2" FOREIGN KEY ("ITEM_COMPONENT_ID")
	  REFERENCES "VAPPCT"."USR_ITEM_COMPONENT" ("ITEM_COMPONENT_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_IC_STATE" ADD CONSTRAINT "USR_IC_SELECTION_FK3" FOREIGN KEY ("STATE_ID")
	  REFERENCES "VAPPCT"."STAT_STATE" ("STATE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_ITEM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_ITEM" ADD CONSTRAINT "USR_ITEM_FK1" FOREIGN KEY ("ITEM_GROUP_ID")
	  REFERENCES "VAPPCT"."USR_ITEM_GROUP" ("ITEM_GROUP_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_ITEM" ADD CONSTRAINT "USR_ITEM_FK2" FOREIGN KEY ("ACTIVE_ID")
	  REFERENCES "VAPPCT"."STAT_ACTIVE" ("ACTIVE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_ITEM" ADD CONSTRAINT "USR_ITEM_FK3" FOREIGN KEY ("ITEM_TYPE_ID")
	  REFERENCES "VAPPCT"."STAT_ITEM_TYPE" ("ITEM_TYPE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_ITEM_COLLECTION
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_ITEM_COLLECTION" ADD CONSTRAINT "USR_ITEM_COLLECTION_FK1" FOREIGN KEY ("COLLECTION_ITEM_ID")
	  REFERENCES "VAPPCT"."USR_ITEM" ("ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_ITEM_COLLECTION" ADD CONSTRAINT "USR_ITEM_COLLECTION_FK2" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "VAPPCT"."USR_ITEM" ("ITEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_ITEM_COMPONENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_ITEM_COMPONENT" ADD CONSTRAINT "USR_ITEM_COMPONENT_FK1" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "VAPPCT"."USR_ITEM" ("ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_ITEM_COMPONENT" ADD CONSTRAINT "USR_ITEM_COMPONENT_FK2" FOREIGN KEY ("ACTIVE_ID")
	  REFERENCES "VAPPCT"."STAT_ACTIVE" ("ACTIVE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_ITEM_GROUP
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_ITEM_GROUP" ADD CONSTRAINT "USR_ITEM_GROUP_FK" FOREIGN KEY ("IS_ACTIVE")
	  REFERENCES "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_OUTCOME_STATE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_OUTCOME_STATE" ADD CONSTRAINT "USR_OUTCOME_STATE_FK1" FOREIGN KEY ("OS_DEFINITION_ID")
	  REFERENCES "VAPPCT"."STAT_OS_DEFINITION" ("OS_DEFINITION_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_OUTCOME_STATE" ADD CONSTRAINT "USR_OUTCOME_STATE_FK2" FOREIGN KEY ("IS_ACTIVE")
	  REFERENCES "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_OUTCOME_STATE" ADD CONSTRAINT "USR_OUTCOME_STATE_FK3" FOREIGN KEY ("IS_DEFAULT")
	  REFERENCES "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_PAT_CHECKLIST
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" ADD CONSTRAINT "USR_PAT_CHECKLIST_FK2" FOREIGN KEY ("CHECKLIST_ID")
	  REFERENCES "VAPPCT"."USR_CHECKLIST" ("CHECKLIST_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" ADD CONSTRAINT "USR_PAT_CHECKLIST_FK3" FOREIGN KEY ("STATE_ID")
	  REFERENCES "VAPPCT"."STAT_STATE" ("STATE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" ADD CONSTRAINT "USR_PAT_CHECKLIST_FK4" FOREIGN KEY ("CHECKLIST_STATE_ID")
	  REFERENCES "VAPPCT"."STAT_CHECKLIST_STATE" ("CHECKLIST_STATE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CHECKLIST" ADD CONSTRAINT "USR_PAT_CHECKLIST_UTL_PAT_FK1" FOREIGN KEY ("PATIENT_ID")
	  REFERENCES "VAPPCT"."UTL_PATIENT" ("PATIENT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_PAT_CL_ITEM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" ADD CONSTRAINT "USR_PAT_CL_ITEM_FK1" FOREIGN KEY ("PATIENT_ID")
	  REFERENCES "VAPPCT"."UTL_PATIENT" ("PATIENT_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" ADD CONSTRAINT "USR_PAT_CL_ITEM_FK10" FOREIGN KEY ("IS_OVERRIDDEN")
	  REFERENCES "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" ADD CONSTRAINT "USR_PAT_CL_ITEM_FK2" FOREIGN KEY ("CHECKLIST_ID", "ITEM_ID")
	  REFERENCES "VAPPCT"."USR_CL_ITEM" ("CHECKLIST_ID", "ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" ADD CONSTRAINT "USR_PAT_CL_ITEM_FK3" FOREIGN KEY ("CHECKLIST_ID", "ITEM_ID", "TS_ID")
	  REFERENCES "VAPPCT"."USR_CLI_TS" ("CHECKLIST_ID", "ITEM_ID", "TS_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" ADD CONSTRAINT "USR_PAT_CL_ITEM_FK4" FOREIGN KEY ("CHECKLIST_ID", "ITEM_ID", "OS_ID")
	  REFERENCES "VAPPCT"."USR_CLI_OS" ("CHECKLIST_ID", "ITEM_ID", "OS_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" ADD CONSTRAINT "USR_PAT_CL_ITEM_FK5" FOREIGN KEY ("CHECKLIST_ID", "ITEM_ID", "DS_ID")
	  REFERENCES "VAPPCT"."USR_CLI_DS" ("CHECKLIST_ID", "ITEM_ID", "DS_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" ADD CONSTRAINT "USR_PAT_CL_ITEM_FK6" FOREIGN KEY ("PAT_CL_ID")
	  REFERENCES "VAPPCT"."USR_PAT_CHECKLIST" ("PAT_CL_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM" ADD CONSTRAINT "USR_PAT_CL_ITEM_FK7" FOREIGN KEY ("IS_ENABLED")
	  REFERENCES "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_PAT_CL_ITEM_CMNT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM_CMNT" ADD CONSTRAINT "USR_PAT_CL_ITEM_CMNT_FK1" FOREIGN KEY ("PAT_CL_ID", "ITEM_ID")
	  REFERENCES "VAPPCT"."USR_PAT_CL_ITEM" ("PAT_CL_ID", "ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM_CMNT" ADD CONSTRAINT "USR_PAT_CL_ITEM_CMNT_FK2" FOREIGN KEY ("CHECKLIST_ID")
	  REFERENCES "VAPPCT"."USR_CHECKLIST" ("CHECKLIST_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_CL_ITEM_CMNT" ADD CONSTRAINT "USR_PAT_CL_ITEM_CMNT_FK3" FOREIGN KEY ("USER_ID")
	  REFERENCES "VAPPCT"."UTL_USER" ("USER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_PAT_ITEM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_ITEM" ADD CONSTRAINT "USR_PAT_ITEM_FK1" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "VAPPCT"."USR_ITEM" ("ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM" ADD CONSTRAINT "USR_PAT_ITEM_FK2" FOREIGN KEY ("SOURCE_TYPE_ID")
	  REFERENCES "VAPPCT"."STAT_SOURCE_TYPE" ("SOURCE_TYPE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM" ADD CONSTRAINT "USR_PAT_ITEM_FK3" FOREIGN KEY ("PATIENT_ID")
	  REFERENCES "VAPPCT"."UTL_PATIENT" ("PATIENT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_PAT_ITEM_CMNT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_CMNT" ADD CONSTRAINT "USR_PAT_ITEM_CMNT_FK1" FOREIGN KEY ("PAT_ITEM_ID")
	  REFERENCES "VAPPCT"."USR_PAT_ITEM" ("PAT_ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_CMNT" ADD CONSTRAINT "USR_PAT_ITEM_CMNT_FK2" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "VAPPCT"."USR_ITEM" ("ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_CMNT" ADD CONSTRAINT "USR_PAT_ITEM_CMNT_FK3" FOREIGN KEY ("USER_ID")
	  REFERENCES "VAPPCT"."UTL_USER" ("USER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_PAT_ITEM_COMPONENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_COMPONENT" ADD CONSTRAINT "USR_PAT_ITEM_COMPONENT_FK1" FOREIGN KEY ("ITEM_COMPONENT_ID")
	  REFERENCES "VAPPCT"."USR_ITEM_COMPONENT" ("ITEM_COMPONENT_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_COMPONENT" ADD CONSTRAINT "USR_PAT_ITEM_COMPONENT_FK2" FOREIGN KEY ("ITEM_ID")
	  REFERENCES "VAPPCT"."USR_ITEM" ("ITEM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_PAT_ITEM_COMPONENT" ADD CONSTRAINT "USR_PAT_ITEM_COMPONENT_FK3" FOREIGN KEY ("PAT_ITEM_ID")
	  REFERENCES "VAPPCT"."USR_PAT_ITEM" ("PAT_ITEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_SERVICE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_SERVICE" ADD CONSTRAINT "USR_SERVICE_FK1" FOREIGN KEY ("IS_ACTIVE")
	  REFERENCES "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USR_TEMPORAL_STATE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."USR_TEMPORAL_STATE" ADD CONSTRAINT "USR_TEMPORAL_STATE_FK1" FOREIGN KEY ("TS_DEFINITION_ID")
	  REFERENCES "VAPPCT"."STAT_TS_DEFINITION" ("TS_DEFINITION_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_TEMPORAL_STATE" ADD CONSTRAINT "USR_TEMPORAL_STATE_FK2" FOREIGN KEY ("IS_ACTIVE")
	  REFERENCES "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."USR_TEMPORAL_STATE" ADD CONSTRAINT "USR_TEMPORAL_STATE_FK3" FOREIGN KEY ("IS_DEFAULT")
	  REFERENCES "VAPPCT"."STAT_TRUE_FALSE" ("TRUE_FALSE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_CLINIC
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_CLINIC" ADD CONSTRAINT "UTL_CLINIC_FK1" FOREIGN KEY ("XFER_SYSTEM_ID")
	  REFERENCES "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_CLINIC_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_CLINIC_PATIENT" ADD CONSTRAINT "UTL_CLINIC_PATIENT_FK1" FOREIGN KEY ("CLINIC_ID")
	  REFERENCES "VAPPCT"."UTL_CLINIC" ("CLINIC_ID") ENABLE;
  ALTER TABLE "VAPPCT"."UTL_CLINIC_PATIENT" ADD CONSTRAINT "UTL_CLINIC_PATIENT_FK2" FOREIGN KEY ("PATIENT_ID")
	  REFERENCES "VAPPCT"."UTL_PATIENT" ("PATIENT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_LAB_TEST
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_LAB_TEST" ADD CONSTRAINT "UTL_LAB_TEST_FK1" FOREIGN KEY ("XFER_SYSTEM_ID")
	  REFERENCES "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_NOTE_TITLE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_NOTE_TITLE" ADD CONSTRAINT "UTL_NOTE_TITLE_FK1" FOREIGN KEY ("XFER_SYSTEM_ID")
	  REFERENCES "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_PATIENT" ADD CONSTRAINT "UTL_PATIENT_FK01" FOREIGN KEY ("SEX_ID")
	  REFERENCES "VAPPCT"."STAT_SEX" ("SEX_ID") ENABLE;
  ALTER TABLE "VAPPCT"."UTL_PATIENT" ADD CONSTRAINT "UTL_PATIENT_FK02" FOREIGN KEY ("XFER_SYSTEM_ID")
	  REFERENCES "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_SPECIALTY
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_SPECIALTY" ADD CONSTRAINT "UTL_SPECIALTY_FK1" FOREIGN KEY ("XFER_SYSTEM_ID")
	  REFERENCES "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_SPECIALTY_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_SPECIALTY_PATIENT" ADD CONSTRAINT "UTL_SPECIALTY_PATIENT_FK1" FOREIGN KEY ("SPECIALTY_ID")
	  REFERENCES "VAPPCT"."UTL_SPECIALTY" ("SPECIALTY_ID") ENABLE;
  ALTER TABLE "VAPPCT"."UTL_SPECIALTY_PATIENT" ADD CONSTRAINT "UTL_SPECIALTY_PATIENT_FK2" FOREIGN KEY ("PATIENT_ID")
	  REFERENCES "VAPPCT"."UTL_PATIENT" ("PATIENT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_TEAM
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_TEAM" ADD CONSTRAINT "UTL_TEAM_FK1" FOREIGN KEY ("XFER_SYSTEM_ID")
	  REFERENCES "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_TEAM_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_TEAM_PATIENT" ADD CONSTRAINT "UTL_TEAM_PATIENT_FK1" FOREIGN KEY ("TEAM_ID")
	  REFERENCES "VAPPCT"."UTL_TEAM" ("TEAM_ID") ENABLE;
  ALTER TABLE "VAPPCT"."UTL_TEAM_PATIENT" ADD CONSTRAINT "UTL_TEAM_PATIENT_FK2" FOREIGN KEY ("PATIENT_ID")
	  REFERENCES "VAPPCT"."UTL_PATIENT" ("PATIENT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_USER
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_USER" ADD CONSTRAINT "UTL_USER_FK1" FOREIGN KEY ("USER_ROLE_ID")
	  REFERENCES "VAPPCT"."STAT_USER_ROLE" ("USER_ROLE_ID") ENABLE;
  ALTER TABLE "VAPPCT"."UTL_USER" ADD CONSTRAINT "UTL_USER_FK2" FOREIGN KEY ("XFER_SYSTEM_ID")
	  REFERENCES "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_USER_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_USER_PATIENT" ADD CONSTRAINT "UTL_USER_PATIENT_FK1" FOREIGN KEY ("USER_ID")
	  REFERENCES "VAPPCT"."UTL_USER" ("USER_ID") ENABLE;
  ALTER TABLE "VAPPCT"."UTL_USER_PATIENT" ADD CONSTRAINT "UTL_USER_PATIENT_FK2" FOREIGN KEY ("PATIENT_ID")
	  REFERENCES "VAPPCT"."UTL_PATIENT" ("PATIENT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_USER_ROLE
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_USER_ROLE" ADD CONSTRAINT "UTL_USER_ROLE_FK1" FOREIGN KEY ("USER_ID")
	  REFERENCES "VAPPCT"."UTL_USER" ("USER_ID") ENABLE;
  ALTER TABLE "VAPPCT"."UTL_USER_ROLE" ADD CONSTRAINT "UTL_USER_ROLE_FK2" FOREIGN KEY ("USER_ROLE_ID")
	  REFERENCES "VAPPCT"."STAT_USER_ROLE" ("USER_ROLE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_USER_SECURITY_KEY
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_USER_SECURITY_KEY" ADD CONSTRAINT "UTL_USER_SECURITY_KEY_FK1" FOREIGN KEY ("USER_ID")
	  REFERENCES "VAPPCT"."UTL_USER" ("USER_ID") ENABLE;
  ALTER TABLE "VAPPCT"."UTL_USER_SECURITY_KEY" ADD CONSTRAINT "UTL_USER_SECURITY_KEY_FK2" FOREIGN KEY ("XFER_SYSTEM_ID")
	  REFERENCES "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_WARD
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_WARD" ADD CONSTRAINT "UTL_WARD_FK1" FOREIGN KEY ("XFER_SYSTEM_ID")
	  REFERENCES "VAPPCT"."STAT_XFER_SYSTEM" ("XFER_SYSTEM_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UTL_WARD_PATIENT
--------------------------------------------------------

  ALTER TABLE "VAPPCT"."UTL_WARD_PATIENT" ADD CONSTRAINT "UTL_WARD_PATIENT_FK1" FOREIGN KEY ("WARD_ID")
	  REFERENCES "VAPPCT"."UTL_WARD" ("WARD_ID") ENABLE;
  ALTER TABLE "VAPPCT"."UTL_WARD_PATIENT" ADD CONSTRAINT "UTL_WARD_PATIENT_FK2" FOREIGN KEY ("PATIENT_ID")
	  REFERENCES "VAPPCT"."UTL_PATIENT" ("PATIENT_ID") ENABLE;
--------------------------------------------------------
--  DDL for Package PCK_CHECKLIST
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_CHECKLIST" is

procedure InsertCLTIURole(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nUserRoleID            in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
procedure DeleteAllCLTIURoles(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
procedure GetCLTIURolesRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
procedure InsertChecklist (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vChecklistLabel        in varchar2,
      pi_nServiceID             in number,
      pi_vChecklistDescription  in varchar2,
      pi_nIsActive              in number,
      pi_vNoteTitleTag          in varchar2,
      pi_nNoteTitleClinicID     in number,
      po_nChecklistID           out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
 procedure UpdateChecklist (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_vChecklistLabel        in varchar2,
      pi_nServiceID             in number,
      pi_vChecklistDescription  in varchar2,
      pi_nActiveID              in number,
      pi_vNoteTitleTag          in varchar2,
      pi_nNoteTitleClinicID     in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
procedure GetChecklistRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
procedure GetChecklistSearchRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vChecklistName         in varchar2,
      pi_nServiceID             in number,
      pi_nActiveChecklistsOnly  in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
  procedure GetChecklistTSChangeableRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetChecklistOSChangeableRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetChecklistDSChangeableRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
/**************************************************************************/
/* SAVE AS */
/**************************************************************************/

/*saves a checklist as a new checklist and returns the new id*/
procedure SaveAs (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_vNewLabel              in varchar2,
      po_nNewChecklistID        out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );

procedure GetCLViewableRolesRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
procedure GetCLReadOnlyRolesRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
procedure GetCLCloseableRolesRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
         
procedure DeleteAllCLViewableRoles(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
procedure DeleteAllCLReadOnlyRoles(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
procedure DeleteAllCLCloseableRoles(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
            
procedure InsertCLViewableRole(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nUserRoleID            in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
procedure InsertCLReadOnlyRole(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nUserRoleID            in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
procedure InsertCLCloseableRole(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nUserRoleID            in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );

end PCK_CHECKLIST;

/

--------------------------------------------------------
--  DDL for Package PCK_CHECKLIST_ITEM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_CHECKLIST_ITEM" is

  /*****
  Description:
  retrieve a refcursor of outcome states
  *****/
  procedure GetOutcomeStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nItemID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  retrieve a refcursor of temporal states
  *****/      
  procedure GetTemporalStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nItemID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  retrieve a refcursor of decision states
  *****/      
  procedure GetDecisionStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nItemID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  /* 
  saves the items selected temporal states 
  */
  procedure SaveTemporalStates (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nItemID                in number,
    pi_vTSIDs                 in varchar2,
    pi_nTSCount               in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2 );
                                
  /* 
  saves the items selected outcome states 
  */
  procedure SaveOutcomeStates (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nItemID                in number,
    pi_vOSIDs                 in varchar2,
    pi_nOSCount               in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2 );
                              
  /* 
  saves the items selected decision states 
  */
  procedure SaveDecisionStates (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nItemID                in number,
    pi_vDSIDs                 in varchar2,
    pi_nDSCount               in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2 );

  procedure UpdateChecklistItemLogic (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      pi_vLogic                 in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);
   
  procedure GetChecklistItemsRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetCLItemDIRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    pi_nItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  retrieve a refcursor of decision state roles
  *****/
  procedure GetCLItemDSRolesRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    pi_nItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
                
  /*****
  Description:
  insert a checklist item
  *****/    
  procedure InsertChecklistItem (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nItemID                in number,
    pi_nTimePeriod            in number,
    pi_nTimeUnit              in number,
    pi_nSortOrder             in number,
    pi_nIsActive              in number,
    pi_vLogic                 in varchar2,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);                  

  /*****
  Description:
  update a checklist item
  *****/                   
  procedure UpdateChecklistItem (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nItemID                in number,
    pi_nTimePeriod            in number,
    pi_nTimeUnit              in number,
    pi_nSortOrder             in number,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);

  /*****
  Description:
  insert a decision state role
  *****/      
  procedure InsertCLItemDSRole(
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nItemID                in number,
    pi_nUserRoleID            in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);
      
  /*****
  Description:
  delete decision state roles
  *****/
  procedure DeleteAllCLItemDSRoles(
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nItemID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);
      
end PCK_CHECKLIST_ITEM;

/

--------------------------------------------------------
--  DDL for Package PCK_CLINIC
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_CLINIC" AS 
 
/*
saves a clinic to the database
*/
procedure SaveClinic(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nClinicID                in number, 
      pi_vClinicLabel             in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);

/*****
Description: Gets all clinics
******/
procedure GetClinicRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

/*****
Description: Gets all patients that belong to a specific Clinic
******/
procedure GetPatientClinicRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nClinicID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

END PCK_CLINIC;

/

--------------------------------------------------------
--  DDL for Package PCK_COMMON
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_COMMON" is

-- Public constant declarations
--

--cursor
type refCursor is ref cursor;

-- default ids for temporal, outcome and decision states
c_nDefaultUnknownID constant number(1) := 1;
c_nDefaultGoodID constant number(1) := 2;
c_nDefaultBadID constant number(1) := 3;

--status codes
c_nStatus_Success     constant number(1) := 1;
c_nStatus_Error       constant number(1) := 2;
c_nStatus_Unknown     constant number(1) := 3;

--state codes
c_nState_NotSelected  constant number(1) := 1;
c_nState_Good         constant number(1) := 2;
c_nState_Unknown      constant number(1) := 3;
c_nState_Bad          constant number(1) := 4;

--status texts
c_vStatus_Default     constant varchar2(255) := '';
c_vStatus_undefined   constant varchar2(255) := 'An undefined error occurred, please contact your system administrator!';
 
--are we in debug mode? 1 = yes, 0 = no
c_nDebug_Mode         constant number(1) := 0;

--should we transfer from mdws? 1=yes, 0=no
c_nMDWS               constant number(1) := 1;

--used for Enquote Literal
c_nDoubleTic          constant varchar2(2) := '''';

-- STAT_ACTIVE
c_nActive constant number(1) := 1;
c_nInactive constant number(1) := 2;

--Active Filter
c_nFilterActive constant number(1) := 1;
c_nFilterInactive constant number(1) := 2;
c_nShowActiveAll constant number(1) := 3;

--item types
c_nLaboratory constant number(1) := 1;
c_nQuestionSelection constant number(1) := 2;
c_nQuestionFreeText constant number(1) := 3;
c_nCollection constant number(1) := 4;
c_nNoteTitle constant number(1) := 5;

-- checklist states
c_nOpen constant number(1) := 1;
c_nClosed constant number(1) := 2;
c_nCancelled constant number(1) := 3;

-- stat true false
c_nTrue constant number(1) := 1;
c_nFalse constant number(1) := 2;

/*****
Description:
helper function used to get data by using dynamic sql 
"into" statement. value is returned as a vachar2
and can be casted as needed. We use dynamic sql for 
security reasons.

Input Params:
pi_vSQL       The sql to execute with 1 and only 1 field in the select statement

Returns:
The 1 seleted value as a string
*****/
function GetDynamicSQLValue (
      pi_vSql in varchar2
      ) return varchar2;
      
/*
checks for a valid entry in the fx_session table
*/
function CheckFXSession (
      pi_vSessionID in varchar2,
      pi_vSessionClientIP in varchar2,
      pi_nUserID in number
      ) return boolean;
      
/*****
Description:
helper function used to get the next value from a sequence

Input Params:
pi_vSQL        The name of the sequence to get the nexval from

Returns:
The next value from the sequence
*****/
function GetNextSequenceValue (
      pi_vSequenceName in varchar2
      ) return number;

/*****
Description:
helper function used to generate comment text

Input Params:
pi_vProcedureName        package:procedure that called this function
pi_vSessionClientIP      user friendly status

Returns:
returns the formatted status comment 
******/
function GetStatusComment (
    pi_vPCKStatusLabel in varchar2,
    pi_vDetails in varchar2
    ) return varchar2;

/*****
Description:
helper function used to get age given date of birth
*****/    
function GetAge(pi_dtDOB in date)
return number;

/*****
Description:
helper function used to get a piece of data
*****/
function GetPiece( strData      in varchar2,
                   strDelimiter in varchar2,
                   nPosition    in NUMBER) return varchar2;
   
  
end PCK_COMMON;

/

--------------------------------------------------------
--  DDL for Package PCK_FX_SECURITY
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_FX_SECURITY" is

/*audits the page access and returns status info indicating whether the 
user is allowed to access this page*/
procedure AuditPageAccess (
      pi_vSessionID       in varchar2,
      pi_vSessionClientIP in varchar2,
      pi_nUserID          in number,
      pi_vPageName        in varchar2,
      po_nStatusCode      out number,
      po_vStatusComment   out varchar2);
     
    procedure AuditTransaction (
      pi_vSessionClientIP        in varchar2,
      pi_nUserID                 in number,
      pi_vSPName                 in varchar2,
      pi_clAuditXML              in clob,
      pi_nStatus                 in number,
      po_nStatusCode             out number,
      po_vStatusComment          out varchar2
     );

end PCK_FX_SECURITY;

/

--------------------------------------------------------
--  DDL for Package PCK_ITEM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_ITEM" AS

procedure GetCLItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vFilterLabel           in varchar2,
        pi_nFilterTypeID          in number,
        pi_nFilterGroupID         in number,
        pi_nActiveFilter          in number,
        pi_nChecklistID           in number, 
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);
        
  procedure GetItemIDRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetItemDIRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_vItemLabel in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);

  procedure GetItemRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_vFilterLabel in varchar2,
    pi_nFilterTypeID in number,
    pi_nFilterGroupID in number,
    pi_nActiveFilter in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
      
  procedure InsertItem (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemTypeID in number,
    pi_nItemGroupID in number,
    pi_vItemLabel in varchar2,
    pi_vItemDescription in varchar2,
    pi_nLookbackTime in number,
    pi_nActiveID in number,
    pi_vMapID in varchar2,
    po_nItemID out number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
      
  procedure UpdateItem (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemTypeID in number,
    pi_nItemGroupID in number,
    pi_vItemLabel in varchar2,
    pi_vItemDescription in varchar2,
    pi_nLookbackTime in number,
    pi_nActiveID in number,
    pi_vMapID in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);

END PCK_ITEM;

/

--------------------------------------------------------
--  DDL for Package PCK_ITEM_COLLECTION
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_ITEM_COLLECTION" AS 

  procedure InsertItemCollection (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_nItemID in number,
    pi_nSortOrder in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);

  procedure GetItemCollectionRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetItemCollectionRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetItemColPatItemRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_vPatientID in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetItemColPatICRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_vPatientID in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetItemCollectionDI (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_nItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
      
  procedure UpdateItemCollection (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_nItemID in number,
    pi_nSortOrder in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
      
  procedure DeleteItemCollection (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_nItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
    
  procedure DeleteItemCollection (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
    
  procedure DeleteItemCollection (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_vItemIDs in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);

END PCK_ITEM_COLLECTION;

/

--------------------------------------------------------
--  DDL for Package PCK_ITEM_COMPONENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_ITEM_COMPONENT" AS 

  procedure GetItemComponentRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nActiveFilter in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetItemComponentDIRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_vItemComponentLabel in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetItemComponentOJRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nActiveFilter in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure InsertItemComponent (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_vItemComponentLabel in varchar2,
    pi_nSortOrder in number,
    pi_nActiveID in number,
    po_nItemComponentID out number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
    
  procedure DeleteItemComponents (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_vItemComponentIDs in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
    
  procedure UpdateItemComponent (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    pi_vItemComponentLabel in varchar2,
    pi_nSortOrder in number,
    pi_nActiveID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
    
  procedure GetICStateIDRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure InsertICState (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    pi_nStateID in number,
    po_nICStateID out number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
    
  procedure DeleteItemComponentStates (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_vItemComponentIDs in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
    
  procedure UpdateICState (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    pi_nICStateID in number,
    pi_nStateID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
    
  procedure GetICRangeIDRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);
    
  procedure InsertICRange (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    pi_vUnits in varchar2,
    pi_nLegalMin in number,
    pi_nCriticalLow in number,
    pi_nLow in number,
    pi_nHigh in number,
    pi_nCriticalHigh in number,
    pi_nLegalMax in number,
    po_nICRangeID out number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
    
  procedure DeleteItemComponentRanges (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_vItemComponentIDs in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);
    
  procedure UpdateICRange (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    pi_nICRangeID in number,
    pi_vUnits in varchar2,
    pi_nLegalMin in number,
    pi_nCriticalLow in number,
    pi_nLow in number,
    pi_nHigh in number,
    pi_nCriticalHigh in number,
    pi_nLegalMax in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2);

END PCK_ITEM_COMPONENT;

/

--------------------------------------------------------
--  DDL for Package PCK_LAB
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_LAB" AS 

procedure SaveLabTest(
      pi_vSessionID          in varchar2,
      pi_vSessionClientIP    in varchar2,
      pi_nUserID             in number,
      pi_nXferSystemID       in number,
      pi_vLabTestID          in varchar2, 
      pi_vName               in varchar2,
      pi_vHIREF              in varchar2,
      pi_vLOREF              in varchar2,
      pi_vREFRANGE           in varchar2,
      pi_vUnits              in varchar2,
      pi_vDescription        in varchar2,
      pi_vLOINC              in varchar2,
      po_nStatusCode         out number,
      po_vStatusComment      out varchar2);
      
procedure GetLabTestRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vSearch                in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
END PCK_LAB;

/

--------------------------------------------------------
--  DDL for Package PCK_MDWS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_MDWS" AS 
      
procedure InsertZZTest(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_vMDWSCall              in varchar2,
      pi_vTest                  in varchar2,
      pi_vValue                 in varchar2,
      pi_vTestID                in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
procedure GetZZTestRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vMDWSCall              in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
procedure GetMDWSPatientRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

END PCK_MDWS;

/

--------------------------------------------------------
--  DDL for Package PCK_NOTE_TITLE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_NOTE_TITLE" AS 

/*
saves a note title to the database
*/
procedure SaveNoteTitle(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nNoteTitleTag           in number, 
      pi_vNoteTitleLabel        in varchar2,
      pi_vNoteTitleDetails      in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);

/*****
Description: Gets all note tiles
******/
procedure GetNoteTitleRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

END PCK_NOTE_TITLE;

/

--------------------------------------------------------
--  DDL for Package PCK_PATIENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_PATIENT" 
is
  /*****
  Description:
  Inserts or updates a patient in utl_patient.
  ******/
  procedure SavePatient (
    pi_vSessionID        in varchar2,
    pi_vSessionClientIP  in varchar2,
    pi_nUserID           in number,
    pi_nXferSystemID     in number,
    pi_vPatientID        in varchar2,
    pi_nProviderUserID   in number,
    pi_nTeamID           in number,
    pi_nSpecialtyID      in number,
    pi_nWardID           in number,
    pi_nClinicID         in number,
    pi_vSSN              in varchar2,
    pi_dtDOB             in date,
    pi_vFirstName        in varchar2,
    pi_vFullName         in varchar2,
    pi_vLastName         in varchar2,
    pi_vMI               in varchar2,
    pi_nSex              in number,
    po_nStatusCode       out number,
    po_vStatusComment    out varchar2);
                          
  /*returns a single patient record
    filtered by patient id
  */
  procedure GetPatientIDRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vPatientID             in varchar2,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  gets a ref cursor of a patients by user.
  ******/
  procedure GetUserPatientsRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nProviderUserID        in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  /*****
  Description:
  gets a ref cursor of a patients by search criteria.
  ******/
   procedure GetPatientSearchRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_dtEventStartDate       in date,
      pi_dtEventEndDate         in date,
      pi_vLastName              in varchar2,
      pi_vLSSN                  in varchar2,
      pi_nChecklistID           in number,
      pi_nChecklistStatusID     in number,
      pi_vUsrID                 in number,
      pi_vTeamID                in varchar2,
      pi_vWardID                in varchar2,
      pi_vSpecialtyID           in varchar2,
      pi_vClinicID              in varchar2,
      pi_nServiceID             in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  procedure GetItemGroupsByCriteriaRS(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_dtEventStartDate       in date,
      pi_dtEventEndDate         in date,
      pi_nChecklistID           in number,
      pi_nChecklistStatusID     in number,
      pi_nServiceID             in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor);

  function getSummaryItemGroupState(
    pi_nPatCLID               in number,
    pi_nItemGroupID           in number)
  return number;

  procedure GetMultiPatientSearchRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_dtEventStartDate       in date,
    pi_dtEventEndDate         in date,
    pi_nChecklistID           in number,
    pi_nChecklistStatusID     in number,
    pi_nServiceID             in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  procedure GetMultiPatientPatCLIDSearchRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_dtEventStartDate       in date,
    pi_dtEventEndDate         in date,
    pi_nChecklistID           in number,
    pi_nChecklistStatusID     in number,
    pi_nServiceID             in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  function getItemCompState(
    pi_nPatItemID                in number,
    pi_nItemCompID               in number) 
  return number;

 procedure GetPatItemCompsByPATCLIDRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);  
        
 procedure GetPatItemsByPATCLIDRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor); 
        
procedure GetItemCompStateByPKey(
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatItemID             in number,
        pi_nItemCompID            in number,
        po_nItemCompState         out number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2);
        
end PCK_PATIENT;

/

--------------------------------------------------------
--  DDL for Package PCK_PAT_CHECKLIST
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_PAT_CHECKLIST" is

/*****
Description:
Updates a patient checklist to the latest version.
******/
  procedure UpdatePatCLVersion (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatCLID               in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );


/*
returns a recordset of all patient checklists that are out of date given MP criteria
*/
procedure GetOutOfDateMultiPatCLRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        
        pi_dtEventStartDate       in date,
        pi_dtEventEndDate         in date,
        pi_nChecklistID           in number,
        pi_nChecklistStatusID     in number,
        pi_vPatIDs                in clob,
        pi_vCLIDs                 in clob,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);
        
/*
returns a recordset of all patient checklists that are out of date
*/
procedure GetOutOfDatePatCLRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vPatientID             in varchar2,
        pi_nChecklistID           in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);
        
/* 
   returns all open patient checklists for the patient specified
   that contain the item specified
*/
  procedure GetPatChecklistByItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vPatientID             in varchar2,
        pi_nItemID                in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);

/*returns a single patient record
  filtered by patient id
*/
  procedure GetPatChecklistRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vPatientID             in varchar2,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);


/*returns a single patient record
  filtered by patient id
*/
  procedure GetPatChecklistIDRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);

/*returns a dataset of patient checklists
filtered by checklist id and checklist states
*/
  procedure GetPatCLByCLIDCLSTATERS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nChecklistID           in number,
        pi_nChecklistStateID      in number,
        pi_vSelectedPatients      in varchar2,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);
        
  procedure HasPatientChecklist (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nChecklistStateID      in number,
    pi_vPatientID             in varchar2,
    po_nHasPatCL              out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);

/*****
Description:
Inserts a record in the usr_pat_checklist table.
******/
  procedure InsertPatChecklist (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nChecklistID           in number,
      pi_dtAssignmentDate       in date,
      pi_dtProcedureDate        in date,
      pi_nChecklistStateID      in number,
      pi_nStateID               in number,
      po_nPatCLID               out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);
        
/*****
Description:
Updates a record in the usr_pat_checklist table.
******/
procedure UpdatePatChecklist (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        pi_dtAssignmentDate       in date,
        pi_dtProcedureDate        in date,
        pi_nChecklistStateID      in number,
        pi_nStateID               in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2);      
      
end PCK_PAT_CHECKLIST;

/

--------------------------------------------------------
--  DDL for Package PCK_PAT_CHECKLIST_ITEM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_PAT_CHECKLIST_ITEM" is 

/*override DS state with comment*/
  procedure OverridePatChecklistItem (pi_vSessionID             in varchar2,
                                        pi_vSessionClientIP       in varchar2,
                                        pi_nUserID                in number,
                                        pi_vPatientID             in varchar2,
                                        pi_nChecklistID           in number,
                                        pi_nItemID                in number,
                                        pi_nOSID                  in number,
                                        pi_nDSID                  in number,
                                        pi_nTSID                  in number,
                                        pi_nPatCLID               in number,
                                        pi_nIsEnabled             in number,
                                        pi_nIsOverridden          in number,
                                        pi_dtOverrideDate         in date,
                                        pi_vOverrideComment       in varchar2,
                                        po_nStatusCode            out number,
                                        po_vStatusComment         out varchar2);
/*****
Description:
Inserts a new patient item comment record.
*****/
procedure InsertPatCLIComment (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_nPatCLID               in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      pi_vCommentText           in varchar2,           
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);

/*
Description: gets pat item comment rs
*/
procedure GetPatCLICommentRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatCLID               in number,
      pi_nItemID                in number,    
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor);

/*****
Description:
Updates a checklist item record.
******/
procedure UpdatePatChecklistItem (pi_vSessionID             in varchar2,
                                  pi_vSessionClientIP       in varchar2,
                                  pi_nUserID                in number,
                                  pi_vPatientID             in varchar2,
                                  pi_nChecklistID           in number,
                                  pi_nItemID                in number,
                                  pi_nOSID                  in number,
                                  pi_nDSID                  in number,
                                  pi_nTSID                  in number,
                                  pi_nPatCLID               in number,
                                  pi_nIsEnabled             in number,
                                  pi_nIsOverridden          in number,
                                  pi_dtOverrideDate         in date,
                                  po_nStatusCode            out number,
                                  po_vStatusComment         out varchar2);
      
  /*
    returns a dataset of patient checklist items
    filtered by patient checklist id (PAT_CL_ID)
  */
  procedure GetPatCLItemsByPatCLIDRS (pi_vSessionID             in varchar2,
                                      pi_vSessionClientIP       in varchar2,
                                      pi_nUserID                in number,
                                      pi_nPatCLID               in number,
                                      po_nColTSStateID          out number,
                                      po_nColOSStateID          out number,
                                      po_nColDSStateID          out number,
                                      po_nSummaryStateID        out number,
                                      po_nStatusCode            out number,
                                      po_vStatusComment         out varchar2,
                                      rs                        out VAPPCT.PCK_COMMON.refCursor);
                                       
   /*
    returns the worst TS, OS, and DS State ID's and determines the 
    Summary Worst State ID
   */
   procedure GetPatCLItemsSummaryStateID (pi_nPatCLID              in number,
                                          po_nColWorstTSStateID    out number,
                                          po_nColWorstOSStateID    out number,
                                          po_nColWorstDSStateID    out number,
                                          po_nSummaryWorstStateID  out number,
                                          po_nStatusCode           out number,
                                          po_vStatusComment        out varchar2);
        
  /*
    returns a 1 row dataset of  a patient checklist item
  */
  procedure GetPatCLItemDIRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        pi_nItemID                in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);

 procedure GetPatCLItemsByPatCLIDRS2 (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);

end PCK_PAT_CHECKLIST_ITEM;

/

--------------------------------------------------------
--  DDL for Package PCK_PAT_ITEM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_PAT_ITEM" AS 

/*
Description: gets pat item override comment rs
*/
procedure GetPatItemOverrideCommentRS (
     pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatCLID               in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,    
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
     );
      
procedure GetAllPatItemCompRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
/*
Gets a patient item and all of its component values
*/
procedure GetPatItemCompRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      pi_dtEntryDate            in date,
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
/*
Description: gets pat item component rs
*/
procedure GetPatItemCommentRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatItemID             in number,
      pi_nItemID                in number,    
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

/*****
Description:
Inserts a new patient item comment record.
*****/
procedure InsertPatItemComment (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatItemID             in varchar2,
      pi_nItemID                in number,
      pi_vCommentText           in varchar2,           
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );

/*****
Description:
updates a  patient item component record.
*****/
procedure UpdatePatItemComponent (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_nPatItemID             in number,
      pi_nItemID                in number,
      pi_nComponentID           in number,
      pi_vComponentValue        in varchar2,
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
/*
Description: gets the item using the patient id 
and item id passed in
*/
procedure GetPatItemDIRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_vPatientID             in varchar2,
      pi_nPatItemID             in number,
      pi_nItemID                in number,      
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
/*
Description: gets a rs of all patient items by itemid
*/
procedure GetPatItemRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,    
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
/*
Description: gets the most recent item using the patient id 
and item id passed in
*/
  procedure GetMostRecentPatItemDIRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  procedure GetMostRecentPatItemCompDIRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,      
      pi_nItemComponentID       in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*
  Description: gets the item components using the patient id 
  and item id passed in
  */
  procedure GetPatItemComponentRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_vPatientID             in varchar2,
      pi_nPatItemID             in number,
      pi_nItemID                in number,    
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
  /*
  procedure
  returns the worst state id of the patient's most recent item's components
  */
  procedure GetMostRecentPICSummaryStateID (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      po_nSummaryStateID        out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);

/*
Description: gets the 1 item component using the patient id 
and item id passed in
*/
procedure GetPatItemComponentDIRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_vPatientID             in varchar2,
      pi_nPatItemID             in number,
      pi_nItemID                in number, 
      pi_nComponentID           in number,
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

/*****
Description:
Inserts a new patient item record.
*****/      
procedure InsertPatItem (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      pi_dtEntryDate            in date,
      pi_nSourceTypeID          in number,
      po_nPatItemID             out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );

/*****
Description:
Inserts a new patient item component record.
*****/
procedure InsertPatItemComponent (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      pi_nPatItemID             in number,
      pi_nComponentID           in number,
      pi_vComponentValue        in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      );
      
END PCK_PAT_ITEM;

/

--------------------------------------------------------
--  DDL for Package PCK_PLACE_HOLDER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_PLACE_HOLDER" AS 

  procedure GetPlaceHolderDI (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nPlaceHolderID         in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  procedure GetPlaceHolderParentRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetPlaceHolderChildRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nPlaceHolderID         in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

END PCK_PLACE_HOLDER;

/

--------------------------------------------------------
--  DDL for Package PCK_SECURITY_KEY
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_SECURITY_KEY" AS 

/*
saves a user security key to the database
*/
procedure SaveSecurityKey(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nSecurityKeyID         in number, 
      pi_vSecurityKeyName       in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);

/*****
Description: Gets a users security key by name if they have it
******/      
procedure GetSecurityKeyByNameRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vSecurityKeyName       in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

END PCK_SECURITY_KEY;

/

--------------------------------------------------------
--  DDL for Package PCK_SITE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_SITE" AS 

 /*
saves a region to the database
*/
procedure SaveRegion(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nRegionID              in number, 
      pi_vRegionName            in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);


/*
saves a site to the database
*/
procedure SaveSite(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nRegionID              in number, 
      pi_nSiteID                in number,
      pi_vSiteName            in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);


procedure GetRegionRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
procedure GetSiteRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nRegionID              in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
END PCK_SITE;

/

--------------------------------------------------------
--  DDL for Package PCK_SPECIALTY
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_SPECIALTY" AS 

/*
saves a specialty to the database
*/
procedure SaveSpecialty(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nSpecialtyID                in number, 
      pi_vSpecialtyLabel             in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);

/*****
Description: Gets all specialties
******/
procedure GetSpecialtyRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

/*****
Description: Gets all patients that belong to a specific specialty
******/
procedure GetPatientSpecialtyRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nSpecialtyID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
END PCK_SPECIALTY;

/

--------------------------------------------------------
--  DDL for Package PCK_STAT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_STAT" is

  procedure GetTrueFalseDI (pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nTrueFalseID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a ref cursor of records from the checklist status.
  *****/
  procedure GetChecklistStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  /*****
  Description:
  Returns a ref cursor of temporal states
  *****/
  procedure GetTSDefinitionRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a ref cursor of outcome states
  *****/      
  procedure GetOSDefinitionRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a ref cursor of decision states
  *****/      
  procedure GetDSDefinitionRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  /*****
  Description:
  Returns a ref cursor of item types
  *****/
  procedure GetItemTypeRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a ref cursor of active states
  *****/      
  procedure GetActiveRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  /*****
  Description:
  Returns a ref cursor of states
  *****/
  procedure GetStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  procedure GetStateDIRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nStateID               in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a ref cursor of services
  *****/
  procedure GetServiceRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a ref cursor of units
  *****/      
  procedure GetUnitRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a ref cursor of user roles
  *****/      
  procedure GetUserRolesRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
end PCK_STAT;

/

--------------------------------------------------------
--  DDL for Package PCK_TEAM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_TEAM" AS 

procedure GetPatientTeamRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nTeamID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );
      
 procedure GetTeamRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

/*
saves a team to the database
*/
procedure SaveTeam(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nTeamID                in number, 
      pi_vTeamLabel             in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);

END PCK_TEAM;

/

--------------------------------------------------------
--  DDL for Package PCK_USR
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_USR" is

/*
checks for a valid fx session record
*/
procedure CheckFXSession(
      pi_vSessionID         in varchar2,
      pi_vSessionClientIP   in varchar2,
      pi_nUserID            in number,
      po_nStatusCode        out number,
      po_vStatusComment     out varchar2); 
      
/*
clear a session record from the db, called when the user logs off
*/
procedure ClearFXSession(
      pi_vSessionID         in varchar2,
      pi_vSessionClientIP   in varchar2,
      pi_nUserID            in number,
      po_nStatusCode        out number,
      po_vStatusComment     out varchar2);

/*
create a user session, called when the user logs in.
*/
procedure CreateFXSession(
      pi_vSessionID         in varchar2,
      pi_vSessionClientIP   in varchar2,
      pi_nUserID            in number,
      po_vFXSessionID       out varchar2,
      po_nStatusCode        out number,
      po_vStatusComment     out varchar2);

/*****
Description:
Returns a ref cursor of records from the utl_user_role table.
*****/
procedure GetUserRolesRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out PCK_COMMON.refCursor
      );
      
/*
gets a recordset of users matching search criteria
*/
procedure GetUserRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vLastName              in varchar2,
      pi_vFirstName             in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out PCK_COMMON.refCursor
      );
      
/*
saves a user  to our tables
*/
procedure SaveUser(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nSysUserID             in number, 
      pi_vName                  in varchar2,
      pi_vGreeting              in varchar2,
      pi_nSiteID                in number,
      pi_vUserClass             in varchar2,
      po_nUserID                out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);
      
/*****
Description:
Returns a ref cursor if the user successfully logs in.
*****/
procedure GetLoginUserRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vUserName              in varchar2,
      pi_vPassword              in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out PCK_COMMON.refCursor
      );

/*****
Description:
Returns a ref cursor for 1 user record.
*****/
procedure GetUserRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nLookupUserID          in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out PCK_COMMON.refCursor
      );

/*****
Description:
Returns a ref cursor of records from the menu options table.
*****/      
procedure GetUserMenuOptionsRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out PCK_COMMON.refCursor
      );
      
      
end PCK_USR;

/

--------------------------------------------------------
--  DDL for Package PCK_VAPPCTCOMM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_VAPPCTCOMM" AS 

/*
gets a recordset of all collection items in a patient checklist
*/
procedure GetPatientCLCollectionItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatChecklistID        in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);
        
/*
gets a recordset of all collection items in all open checklists
*/
 procedure GetOpenPatCLCollectionItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);
        
 procedure GetPatientChecklistItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatChecklistID        in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);
        
 procedure GetOpenPatChecklistItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor);
        
procedure SaveCommEvent(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vEventName             in varchar2,
      pi_vEventDetails          in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);
      
END PCK_VAPPCTCOMM;

/

--------------------------------------------------------
--  DDL for Package PCK_VARIABLE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_VARIABLE" is

  procedure InsertService (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vServiceLabel          in varchar2,
    pi_nIsActive              in number,
    po_nServiceID             out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);

  procedure UpdateService (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nServiceID             in number,
    pi_vServiceLabel          in varchar2,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);
     
  procedure GetServiceRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nActiveFilter          in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
  
  procedure GetServiceDI (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nServiceID             in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Insert an Item Group
  *****/
  procedure InsertItemGroup (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vItemGroupLabel        in varchar2,
    pi_nIsActive              in number,
    po_nItemGroupID           out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);
 
  /*****
  Description:
  Update an item Group
  *****/     
  procedure UpdateItemGroup (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nItemGroupID           in number,
    pi_vItemGroupLabel        in varchar2,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);
     
  /*****
  Description:
  Returns a ref cursor item groups.
  *****/
  procedure GetItemGroupRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nActiveFilter          in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a single row ref cursor of item groups.
  *****/      
  procedure GetItemGroupIDRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nItemGroupID           in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a ref cursor of decision states
  *****/
  procedure GetDecisionStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nActiveFilter          in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a single row ref cursor of decision states
  *****/
  procedure GetDecisionStateIDRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nDSID                  in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  procedure GetDefaultDSByStateIDRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nStateID               in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a ref cursor of outcome states
  *****/
  procedure GetOutcomeStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nActiveFilter          in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

  /*****
  Description:
  Returns a single row ref cursor of outcome states
  *****/
  procedure GetOutcomeStateIDRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nOSID                  in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  /*****
  Description:
  Returns a single row ref cursor of temporal states
  *****/      
  procedure GetTemporalStateIDRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nTSID                  in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
    
  /*****
  Description:
  Insert an outcome state
  *****/
  procedure InsertOutcomeState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vOSLabel               in varchar2,
    pi_nOSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nOSID                  out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);
      
  /*****
  Description:
  update an outcome state
  *****/
  procedure UpdateOutcomeState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nOSID                  in number,
    pi_vOSLabel               in varchar2,
    pi_nOSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);

  /*****
  Description:
  Insert a decision state
  *****/
  procedure InsertDecisionState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vDSLabel               in varchar2,
    pi_nDSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nDSID                  out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);

  /*****
  Description:
  update a decision state
  *****/      
  procedure UpdateDecisionState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nDSID                  in number,
    pi_vDSLabel               in varchar2,
    pi_nDSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);
      
  /*****
  Description:
  Returns a ref cursor of records from the usr_temporal_state table.
  ******/
  procedure GetTemporalStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nActiveFilter          in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
      
  /*****
  Description:
  Inserts a record into the usr_temporal_state table and returns the id of the newly inserted record.
  ******/
  procedure InsertTemporalState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vTSLabel               in varchar2,
    pi_nTSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nTSID                  out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);

  /*****
  Description:
  Updates a record in the usr_temporal_state table.
  ******/
  procedure UpdateTemporalState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nTSID                  in number,
    pi_vTSLabel               in varchar2,
    pi_nTSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2);
    
  procedure GetTemporalStateDIRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vTSLabel               in varchar2,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetOutcomeStateDIRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vOSLabel               in varchar2,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);
    
  procedure GetDecisionStateDIRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vDSLabel               in varchar2,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor);

end PCK_VARIABLE;

/

--------------------------------------------------------
--  DDL for Package PCK_WARD
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "VAPPCT"."PCK_WARD" AS 

/*
saves a ward to the database
*/
procedure SaveWard(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nWardID                in number, 
      pi_vWardLabel             in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2);

/*****
Description: Gets all wards
******/
procedure GetWardRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

/*****
Description: Gets all patients that belong to a specific Ward
******/
procedure GetPatientWardRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nWardID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      );

END PCK_WARD;

/

--------------------------------------------------------
--  DDL for Package Body PCK_CHECKLIST
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_CHECKLIST" is

/*****
Description:
Inserts a record in the usr_checklist table.
******/
procedure InsertChecklist (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vChecklistLabel        in varchar2,
      pi_nServiceID             in number,
      pi_vChecklistDescription  in varchar2,
      pi_nIsActive              in number,
      pi_vNoteTitleTag          in varchar2,
      pi_nNoteTitleClinicID     in number,
      po_nChecklistID           out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
is
    --create dynamic sql for the insert
     
     
    v_vSQL constant varchar2(1000) := 
      'INSERT INTO VAPPCT.usr_checklist( 
              checklist_id,
              checklist_label,
              service_id,
              checklist_description,
              active_id,
              note_title_tag,
              note_title_clinic_id,
              created_by,
              date_created,
              last_updated_by,
              date_last_updated) 
              VALUES( 
              :CHECKLIST_ID,
              :CHECKLIST_LABEL,
              :SERVICE_ID,
              :CHECKLIST_DESCRIPTION,
              :ACTIVE_ID,
              :NoteTitleTag,
              :NoteTitleClinicID,
              :USERID_CREATED,
              sysdate,
              :USERID_UPDATED,
              sysdate)';
      
   v_nChecklistID constant number := VAPPCT.PCK_COMMON.GetNextSequenceValue('SEQ_CHECKLIST_ID');
   
begin
       
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CHECKLIST', v_vSQL);
              
         
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
      v_nChecklistID,
      pi_vChecklistLabel,
      pi_nServiceID,
      pi_vChecklistDescription,
      pi_nIsActive,
      pi_vNoteTitleTag,
      pi_nNoteTitleClinicID,
      pi_nUserID,
      pi_nUserID;
    
    commit;
    
    po_nChecklistID := v_nChecklistID;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CHECKLIST', v_vSQL);
end;

/*****
Description:
Updates a record in the usr_checklist table.
******/
procedure UpdateChecklist (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_vChecklistLabel        in varchar2,
      pi_nServiceID             in number,
      pi_vChecklistDescription  in varchar2,
      pi_nActiveID              in number,
      pi_vNoteTitleTag          in varchar2,
      pi_nNoteTitleClinicID     in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
is
    v_vSQL constant varchar2(500) :=  
       'UPDATE VAPPCT.usr_checklist 
        SET checklist_label = :CHECKLIST_LABEL,
            service_id = :CHECKLIST_SERVICE_ID,
            checklist_description = :CHECKLIST_DESCRIPTION,
            active_id = :ACTIVE_ID,
            note_title_tag = :NoteTitleTag,
            note_title_clinic_id = :NoteTitleClinicID, 
            last_updated_by = :USEDID_LAST_UPDATED,
            date_last_updated = sysdate 
        WHERE CHECKLIST_ID = :CHECKLIST_ID';

begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CHECKLIST', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_vChecklistLabel,
          pi_nServiceID,
          pi_vChecklistDescription,
          pi_nActiveID,
          pi_vNoteTitleTag,
          pi_nNoteTitleClinicID,
          pi_nUserID,          
          pi_nChecklistID;
          
    commit;
       
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CHECKLIST', v_vSQL);

end;

/*****
Description:
gets a ref cursor of a selected checklist.
******/
procedure GetChecklistRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nCheckListID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, sta.active_label
       FROM  usr_checklist t, stat_active sta
       where t.checklist_id = :CHECKLIST_ID
       and t.active_id = sta.ACTIVE_ID';
  
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CHECKLIST', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
      using pi_nCheckListID;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CHECKLIST', v_vSQL);
  
end;

/*****
Description:
gets a ref cursor of a checklist by search criteria.
******/
procedure GetChecklistSearchRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vChecklistName         in varchar2,
      pi_nServiceID             in number,
      pi_nActiveChecklistsOnly  in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, t2.service_label 
       FROM  usr_checklist t, usr_service t2
       where t.service_id = t2.service_id
       and upper(t.checklist_label) like upper(nvl(:CHECKLIST_LABEL, checklist_label))
       and t.service_id = nvl(:SERVICE_ID, t2.service_id)
       and t.active_id = nvl(:ActiveID, t.active_id)
       order by UPPER(t.checklist_label)';    
       
    v_nServiceID number;
    v_vChecklistName varchar2(4000);
    v_nActiveID number;
    
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CHECKLIST', v_vSQL);

    --add % for like 
    v_vChecklistName := '%' || pi_vChecklistName || '%';
   
    --translate service id, -1 = null
    if (pi_nServiceID = -1) then
      v_nServiceID := null;
    else
      v_nServiceID := pi_nServiceID;
    end if;
    
    --translate active checklist only
    -- 1 = active
    -- 0 = null
    if (pi_nActiveChecklistsOnly = 1) then
      v_nActiveID := VAPPCT.PCK_COMMON.c_nActive;
    else
      v_nActiveID := null;
    end if;
      
    --open the result set
    open rs for v_vSQL
    using v_vChecklistName, 
          v_nServiceID,
          v_nActiveID;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CHECKLIST', v_vSQL);
  
end;

  procedure GetChecklistTSChangeableRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) := 'select ts.*
                                      from usr_cli_ts_edit ts
                                      where ts.CHECKLIST_ID = :ChecklistID';    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CLC', v_vSQL);
      
    --open the result set
    open rs for v_vSQL
    using pi_nChecklistID;
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CLC', v_vSQL);
  end;
  
  procedure GetChecklistOSChangeableRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) := 'select ts.*
                                      from usr_cli_os_edit ts
                                      where ts.CHECKLIST_ID = :ChecklistID';    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CLC', v_vSQL);
      
    --open the result set
    open rs for v_vSQL
    using pi_nChecklistID;
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CLC', v_vSQL);
  end;
  
  procedure GetChecklistDSChangeableRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) := 'select ts.*
                                      from usr_cli_ds_edit ts
                                      where ts.CHECKLIST_ID = :ChecklistID';    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CLC', v_vSQL);
      
    --open the result set
    open rs for v_vSQL
    using pi_nChecklistID;
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CLC', v_vSQL);
  end;

procedure GetCLViewableRolesRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    
    v_vSQL constant varchar2(1234) := 'select ucv.*
                                       from usr_cl_viewable ucv
                                       where ucv.CHECKLIST_ID = :ChecklistID
                                       order by ucv.USER_ROLE_ID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CL_VIEWABLE_ROLES', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nChecklistID;
          
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CL_VIEWABLE_ROLES', v_vSQL);
  end;

procedure GetCLTIURolesRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    
    v_vSQL constant varchar2(1234) := 'select ucv.*
                                       from usr_cl_TIU ucv
                                       where ucv.CHECKLIST_ID = :ChecklistID
                                       order by ucv.USER_ROLE_ID';
  begin
    --todo error code
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CL_VIEWABLE_ROLES', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nChecklistID;
          
    
  exception
      when others then
        --todo: error code
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CL_VIEWABLE_ROLES', v_vSQL);
  end;

procedure GetCLReadOnlyRolesRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    
    v_vSQL constant varchar2(1234) := 'select ucr.*
                                       from  usr_cl_read_only ucr
                                       where ucr.CHECKLIST_ID = :ChecklistID
                                       order by ucr.USER_ROLE_ID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CL_READ_ROLES', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nChecklistID;
           
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CL_READ_ROLES', v_vSQL);
  end;

procedure GetCLCloseableRolesRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    
    v_vSQL constant varchar2(1234) := 'select ucc.*
                                       from usr_cl_closeable ucc
                                       where ucc.CHECKLIST_ID = :ChecklistID
                                       order by ucc.USER_ROLE_ID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CL_CLOSE_ROLES', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nChecklistID;
          
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CL_CLOSE_ROLES', v_vSQL);
  end;

/*
create new usr_cli_ds records for the new checklist
*/
function INSERTusr_cli_ds (
      pi_nChecklistID in number,
      pi_nNewChecklistID in number,
      pi_nItemID in number
      ) return boolean 
is
    --sql, cursor, record, new id
    v_sqlQRY constant varchar2(500) :=  
      'SELECT t.*
       FROM  usr_cli_ds t
       WHERE t.checklist_id = :CHECKLIST_ID
       AND   t.item_id = :ITEM_ID
       AND   active_id = 1';
    
    v_rs VAPPCT.PCK_COMMON.refCursor;
    v_rec usr_cli_ds%ROWTYPE;
    v_nNewID number;
    
    v_sqlINSERT constant varchar2(500) :=  
      'INSERT into usr_cli_ds
      ( checklist_id,
        item_id,
        ds_id,
        active_id
      )
      values
      (
        :CHECKLIST_ID,
        :ITEM_ID,
        :DS_ID,
        :ACTIVE_ID)';
begin
   
    --open the query with the original checklist id and item id
    open v_rs for v_sqlQRY
    using pi_nChecklistID,
          pi_nItemID;
    
    --loop over the records and inseret new entries with the new checklist id and item id
    loop 
    
      --get one record
      v_rec := null;
      fetch v_rs INTO v_rec;
      exit when not v_rs%found;
    
      --get a new id from the sequence
      --n/a v_nNewID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_CHECKLIST_ID');
     
      --insert the new record with the new checklist id and item id
      EXECUTE IMMEDIATE v_sqlINSERT 
      USING pi_nNewChecklistID, 
            pi_nItemID,
            v_rec.ds_id,
            v_rec.active_id;
            
      commit;
      
    end loop;
    close v_rs;
    
    commit;
    return true;

exception
    when others
    then
    return false;
end;

/*
create new usr_cli_ds_edit records for the new checklist
*/
function INSERTusr_cli_ds_edit (
      pi_nChecklistID in number,
      pi_nNewChecklistID in number,
      pi_nItemID in number
      ) return boolean 
is
    --sql, cursor, record, new id
    v_sqlQRY constant varchar2(500) :=  
      'SELECT t.*
       FROM  usr_cli_ds_edit t
       WHERE t.checklist_id = :CHECKLIST_ID
       AND   t.item_id = :ITEM_ID';
    
    v_rs VAPPCT.PCK_COMMON.refCursor;
    v_rec usr_cli_ds_edit%ROWTYPE;
    v_nNewID number;
    
    v_sqlINSERT constant varchar2(500) :=  
      'INSERT into usr_cli_ds_edit
      ( checklist_id,
        item_id,
        user_role_id
      )
      values
      (
        :CHECKLIST_ID,
        :ITEM_ID,
        :USER_ROLE_ID)';
begin
   
   --open the query with the original checklist id and item id
    open v_rs for v_sqlQRY
    using pi_nChecklistID,
          pi_nItemID;
    
    --loop over the records and inseret new entries with the new checklist id and item id
    loop 
    
      --get one record
      v_rec := null;
      fetch v_rs INTO v_rec;
      exit when not v_rs%found;
    
      --get a new id from the sequence
      --n/a v_nNewID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_CHECKLIST_ID');
     
      --insert the new record with the new checklist id and item id
      EXECUTE IMMEDIATE v_sqlINSERT 
      USING pi_nNewChecklistID, 
            pi_nItemID,
            v_rec.user_role_id;
            
      commit;
      
    end loop;
    close v_rs;
    
    commit;
    return true;

exception
    when others
    then
    return false;
end;

/*
create new usr_cli_os records for the new checklist
*/
function INSERTusr_cli_os (
      pi_nChecklistID in number,
      pi_nNewChecklistID in number,
      pi_nItemID in number
      ) return boolean 
is
    --sql, cursor, record, new id
    v_sqlQRY constant varchar2(500) :=  
      'SELECT t.*
       FROM  usr_cli_os t
       WHERE t.checklist_id = :CHECKLIST_ID
       AND   t.item_id = :ITEM_ID
       AND   active_id = 1';
    
    v_rs VAPPCT.PCK_COMMON.refCursor;
    v_rec usr_cli_os%ROWTYPE;
    v_nNewID number;
    
    v_sqlINSERT constant varchar2(500) :=  
      'INSERT into usr_cli_os
      ( checklist_id,
        item_id,
        os_id,
        active_id
      )
      values
      (
        :CHECKLIST_ID,
        :ITEM_ID,
        :OS_ID,
        :ACTIVE_ID)';
begin
    --open the query with the original checklist id and item id
    open v_rs for v_sqlQRY
    using pi_nChecklistID,
          pi_nItemID;
    
    --loop over the records and inseret new entries with the new checklist id and item id
    loop 
    
      --get one record
      v_rec := null;
      fetch v_rs INTO v_rec;
      exit when not v_rs%found;
    
      --get a new id from the sequence
      --n/a v_nNewID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_CHECKLIST_ID');
     
      --insert the new record with the new checklist id and item id
      EXECUTE IMMEDIATE v_sqlINSERT 
      USING pi_nNewChecklistID, 
            pi_nItemID,
            v_rec.os_id,
            v_rec.active_id;
            
      commit;
      
    end loop;
    close v_rs;
    
    commit;
    return true;

exception
    when others
    then
    return false;
end;

/*
create new usr_cli_ts records for the new checklist
*/
function INSERTusr_cli_ts (
      pi_nChecklistID in number,
      pi_nNewChecklistID in number,
      pi_nItemID in number
      ) return boolean 
is
    --sql, cursor, record, new id
    v_sqlQRY constant varchar2(500) :=  
      'SELECT t.*
       FROM  usr_cli_ts t
       WHERE t.checklist_id = :CHECKLIST_ID
       AND   t.item_id = :ITEM_ID
       AND   active_id = 1';
    
    v_rs VAPPCT.PCK_COMMON.refCursor;
    v_rec usr_cli_ts%ROWTYPE;
    v_nNewID number;
    
    v_sqlINSERT constant varchar2(500) :=  
      'INSERT into usr_cli_ts
      ( checklist_id,
        item_id,
        ts_id,
        active_id
      )
      values
      (
        :CHECKLIST_ID,
        :ITEM_ID,
        :TS_ID,
        :ACTIVE_ID)';
begin
   
    --open the query with the original checklist id and item id
    open v_rs for v_sqlQRY
    using pi_nChecklistID,
          pi_nItemID;
    
    --loop over the records and inseret new entries with the new checklist id and item id
    loop 
    
      --get one record
      v_rec := null;
      fetch v_rs INTO v_rec;
      exit when not v_rs%found;
    
      --get a new id from the sequence
      --n/a v_nNewID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_CHECKLIST_ID');
     
      --insert the new record with the new checklist id and item id
      EXECUTE IMMEDIATE v_sqlINSERT 
      USING pi_nNewChecklistID, 
            pi_nItemID,
            v_rec.ts_id,
            v_rec.active_id;
            
      commit;
      
    end loop;
    close v_rs;
    
    commit;
    return true;

exception
    when others
    then
    return false;
end;

/*
create new usr_cl_closeable records for the new checklist
*/
function INSERTusr_cl_closeable (
      pi_nChecklistID in number,
      pi_nNewChecklistID in number
      ) return boolean 
is
   --sql, cursor, record, new id
   v_sqlQRY constant varchar2(500) :=  
      'SELECT t.*
       FROM   usr_cl_closeable t
       where t.checklist_id = :CHECKLIST_ID';
    
    v_rs VAPPCT.PCK_COMMON.refCursor;
    v_rec usr_cl_closeable%ROWTYPE;
    v_nNewID number;
    
    v_sqlINSERT constant varchar2(500) :=  
      'INSERT into usr_cl_closeable
      ( checklist_id,
        user_role_id
      )
      values
      (
        :CHECKLIST_ID,
        :USER_ROLE_ID)';

begin
   
    --open the query with the original checklist id
    open v_rs for v_sqlQRY
    using pi_nChecklistID;
    
    --loop over the records and inseret new entries with the new checklist id
    loop 
    
      --get one record
      v_rec := null;
      fetch v_rs INTO v_rec;
      exit when not v_rs%found;
    
      --get a new id from the sequence
      --n/a v_nNewID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_CHECKLIST_ID');
     
      --insert the new record with the new checklist id
      EXECUTE IMMEDIATE v_sqlINSERT 
      USING pi_nNewChecklistID, 
            v_rec.user_role_id;
            
      commit;
      
    end loop;
    close v_rs;
    
    commit;
    return true;

exception
    when others
    then
    return false;
end;

/*
create new usr_cl_readonly records for the new checklist
*/
function INSERTusr_cl_readonly (
      pi_nChecklistID in number,
      pi_nNewChecklistID in number
      ) return boolean 
is

    --sql, cursor, record, new id
    v_sqlQRY constant varchar2(500) :=  
      'SELECT t.*
       FROM   usr_cl_read_only t
       where t.checklist_id = :CHECKLIST_ID';
    
    v_rs VAPPCT.PCK_COMMON.refCursor;
    v_rec usr_cl_closeable%ROWTYPE;
    v_nNewID number;
    
    v_sqlINSERT constant varchar2(500) :=  
      'INSERT into usr_cl_read_only
      ( checklist_id,
        user_role_id
      )
      values
      (
        :CHECKLIST_ID,
        :USER_ROLE_ID)';
        
begin
   
   --open the query with the original checklist id
    open v_rs for v_sqlQRY
    using pi_nChecklistID;
    
    --loop over the records and inseret new entries with the new checklist id
    loop 
    
      --get one record
      v_rec := null;
      fetch v_rs INTO v_rec;
      exit when not v_rs%found;
    
      --get a new id from the sequence
      --n/a v_nNewID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_CHECKLIST_ID');
     
      --insert the new record with the new checklist id
      EXECUTE IMMEDIATE v_sqlINSERT 
      USING pi_nNewChecklistID, 
            v_rec.user_role_id;
            
      commit;
      
    end loop;
    close v_rs;
    
    commit;
    return true;

exception
    when others
    then
    return false;
end;

/*
create new usr_cl_tiu records for the new checklist
*/
function INSERTusr_cl_tiu (
      pi_nChecklistID in number,
      pi_nNewChecklistID in number
      ) return boolean 
is

    --sql, cursor, record, new id
    v_sqlQRY constant varchar2(500) :=  
      'SELECT t.*
       FROM   usr_cl_tiu t
       where t.checklist_id = :CHECKLIST_ID';
    
    v_rs VAPPCT.PCK_COMMON.refCursor;
    v_rec usr_cl_tiu%ROWTYPE;
    v_nNewID number;
    
    v_sqlINSERT constant varchar2(500) :=  
      'INSERT into usr_cl_tiu
      ( checklist_id,
        user_role_id
      )
      values
      (
        :CHECKLIST_ID,
        :USER_ROLE_ID)';
        
begin
   
   --open the query with the original checklist id
    open v_rs for v_sqlQRY
    using pi_nChecklistID;
    
    --loop over the records and inseret new entries with the new checklist id
    loop 
    
      --get one record
      v_rec := null;
      fetch v_rs INTO v_rec;
      exit when not v_rs%found;
    
      --get a new id from the sequence
      --n/a v_nNewID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_CHECKLIST_ID');
     
      --insert the new record with the new checklist id
      EXECUTE IMMEDIATE v_sqlINSERT 
      USING pi_nNewChecklistID, 
            v_rec.user_role_id;
            
      commit;
      
    end loop;
    close v_rs;
    
    commit;
    return true;

exception
    when others
    then
    return false;
end;





/*
create new usr_cl_viewable records for the new checklist
*/
function INSERTusr_cl_viewable (
      pi_nChecklistID in number,
      pi_nNewChecklistID in number
      ) return boolean 
is

 --sql, cursor, record, new id
   v_sqlQRY constant varchar2(500) :=  
      'SELECT t.*
       FROM   usr_cl_viewable t
       where t.checklist_id = :CHECKLIST_ID';
    
    v_rs VAPPCT.PCK_COMMON.refCursor;
    v_rec usr_cl_closeable%ROWTYPE;
    v_nNewID number;
    
    v_sqlINSERT constant varchar2(500) :=  
      'INSERT into usr_cl_viewable
      ( checklist_id,
        user_role_id
      )
      values
      (
        :CHECKLIST_ID,
        :USER_ROLE_ID)';
        
begin
   
   --open the query with the original checklist id
    open v_rs for v_sqlQRY
    using pi_nChecklistID;
    
    --loop over the records and inseret new entries with the new checklist id
    loop 
    
      --get one record
      v_rec := null;
      fetch v_rs INTO v_rec;
      exit when not v_rs%found;
    
      --get a new id from the sequence
      --n/a v_nNewID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_CHECKLIST_ID');
     
      --insert the new record with the new checklist id
      EXECUTE IMMEDIATE v_sqlINSERT 
      USING pi_nNewChecklistID, 
            v_rec.user_role_id;
            
      commit;
      
    end loop;
    close v_rs;
    
    commit;
    return true;

exception
    when others
    then
    return false;
end;

/*
create new usr_cl_item records for the new checklist
*/
function INSERTusr_cl_item (
      pi_nChecklistID in number,
      pi_nNewChecklistID in number
      ) return boolean 
is
    --sql, cursor, record, new id
    v_sqlQRY constant varchar2(500) :=  
      'SELECT t.*
       FROM  usr_cl_item t
       WHERE t.checklist_id = :CHECKLIST_ID
       AND   active_id = 1';
    
    v_rs VAPPCT.PCK_COMMON.refCursor;
    v_rec usr_cl_item%ROWTYPE;
    v_nNewID number;
    
    v_sqlINSERT constant varchar2(500) :=  
      'INSERT into usr_cl_item
      ( checklist_id,
        item_id,
        cli_ts_time_period,
        time_unit_id,
        sort_order,
        active_id,
        logic
      )
      values
      (
        :CHECKLIST_ID,
        :ITEM_ID,
        :CLI_TS_TIME_PERIOD,
        :TIME_UNIT_ID,
        :SORT_ORDER,
        :ACTIVE_ID,
        :LOGIC)';
        
  v_nItemID number;
  v_nNewItemID number;

begin
   
   --open the query with the original checklist id
    open v_rs for v_sqlQRY
    using pi_nChecklistID;
    
    --loop over the records and inseret new entries with the new checklist id
    loop 
    
      --get one record
      v_rec := null;
      fetch v_rs INTO v_rec;
      exit when not v_rs%found;
    
      --get the current item id
      v_nItemID := v_rec.item_id;
    
      --insert the new record with the new checklist id and new item id
      EXECUTE IMMEDIATE v_sqlINSERT 
      USING pi_nNewChecklistID, 
            v_nItemID,
            v_rec.cli_ts_time_period,
            v_rec.time_unit_id,
            v_rec.sort_order,
            v_rec.active_id,
            v_rec.logic;
            
      commit;
      
      ------------------------------------------------------------
      --create new usr_cli_ds records for the new checklist
      ------------------------------------------------------------
      if not INSERTusr_cli_ds(pi_nChecklistID, pi_nNewChecklistID, v_nItemID) then
        
        return false;
      
      end if;
    
      ------------------------------------------------------------
      --create new usr_cli_ds_edit records for the new checklist
      ------------------------------------------------------------
      if not INSERTusr_cli_ds_edit(pi_nChecklistID, pi_nNewChecklistID, v_nItemID) then
        
        return false;
    
      end if;
    
      ------------------------------------------------------------
      --create new usr_cli_os records for the new checklist
      ------------------------------------------------------------
      if not INSERTusr_cli_os(pi_nChecklistID, pi_nNewChecklistID, v_nItemID) then
      
        return false;
    
      end if;
    
      ------------------------------------------------------------
      --create new usr_cli_ts records for the new checklist
      ------------------------------------------------------------
      if not INSERTusr_cli_ts(pi_nChecklistID, pi_nNewChecklistID, v_nItemID) then
      
        return false;
    
      end if;
      
    end loop;
    close v_rs;
   
    commit;
    return true;
       
exception
    when others
    then
    return false;
end;

/*saves a checklist as a new checklist and returns the new id*/
 procedure SaveAs (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_vNewLabel              in varchar2,
      po_nNewChecklistID        out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    --checklist sql, cursor, record, new id
    v_sqlQRY_USR_CHECKLIST constant varchar2(500) :=  
      'SELECT t.*
       FROM  usr_checklist t
       where t.checklist_id = :CHECKLIST_ID';
    
    v_rsUSR_CHECKLIST VAPPCT.PCK_COMMON.refCursor;
    v_recUSR_CHECKLIST usr_checklist%ROWTYPE;
    v_nNewChecklistID number;
    
    v_sqlINSERT_USR_CHECKLIST constant varchar2(500) :=  
      'INSERT into usr_checklist
      ( checklist_id,
        checklist_label,
        service_id,
        checklist_description,
        active_id,
        note_title_tag,
        note_title_clinic_id
      )
      values
      (
        :CHECKLIST_ID,
        :CHECKLIST_LABEL,
        :SERVICE_ID,
        :CHECKLIST_DESCRIPTION,
        :ACTIVE_ID,
        :NOTE_TITLE_TAG,
        :NOTE_TITLE_CLINIC_IC
      )';
      
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVEAS_CHECKLIST', '');

    -------------------------------------
    --create a new usr_checklist record
    -------------------------------------
    --open the result set
    open v_rsUSR_CHECKLIST for v_sqlQRY_USR_CHECKLIST
    using pi_nChecklistID;
    
    loop --should only be one rec
    
      v_recUSR_CHECKLIST := null;

      fetch v_rsUSR_CHECKLIST INTO v_recUSR_CHECKLIST;
      exit when not v_rsUSR_CHECKLIST%found;
    
      --get a new checklist if from the sequence
      v_nNewChecklistID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_CHECKLIST_ID');
     
      --insert the new record
      EXECUTE IMMEDIATE v_sqlINSERT_USR_CHECKLIST 
      USING v_nNewChecklistID,  --new id
            pi_vNewLabel,       --new label
            v_recUSR_CHECKLIST.service_id,
            v_recUSR_CHECKLIST.checklist_description,
            v_recUSR_CHECKLIST.active_id,
            v_recUSR_CHECKLIST.note_title_tag,
            v_recUSR_CHECKLIST.note_title_clinic_id;
            
      commit;
    end loop;
    close v_rsUSR_CHECKLIST;

    ------------------------------------------------------------
    --create new usr_cl_closeable records for the new checklist
    ------------------------------------------------------------
    if not INSERTusr_cl_closeable(pi_nChecklistID, v_nNewChecklistID) then
      
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVEAS_CHECKLIST', '');
      po_vStatusComment := po_vStatusComment || ': Closeable By';
      return;
    
    end if;
   
    ------------------------------------------------------------
    --create new usr_cl_readonly records for the new checklist
    ------------------------------------------------------------
    if not INSERTusr_cl_readonly(pi_nChecklistID, v_nNewChecklistID) then
      
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVEAS_CHECKLIST', '');
      po_vStatusComment := po_vStatusComment || ': Readonly For';
      return;
    
    end if;
    
    ------------------------------------------------------------
    --create new usr_cl_viewable records for the new checklist
    ------------------------------------------------------------
    if not INSERTusr_cl_viewable(pi_nChecklistID, v_nNewChecklistID) then
      
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVEAS_CHECKLIST', '');
      po_vStatusComment := po_vStatusComment || ': Viewable By';
      
      return;
    
    end if;
    
    ------------------------------------------------------------
    --create new usr_cl_TIU records for the new checklist
    ------------------------------------------------------------
    if not INSERTusr_cl_tiu(pi_nChecklistID, v_nNewChecklistID) then
      
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVEAS_CHECKLIST', '');
      po_vStatusComment := po_vStatusComment || ': TIU Roles';
      
      return;
    
    end if;
        
   ------------------------------------------------------------
   --create new usr_cl_item records and cli related records for the new checklist
   ------------------------------------------------------------
   if not INSERTusr_cl_item(pi_nChecklistID, v_nNewChecklistID) then
     
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVEAS_CHECKLIST', '');
     po_vStatusComment := po_vStatusComment || ': Checklist Item';
     
     return;
    
   end if;
    
   po_nNewChecklistID := v_nNewChecklistID;   
        
exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVEAS_CHECKLIST', '');
  
end;

/*
Description:
Delete a record in the usr_cl_viewable table.
*/
procedure DeleteAllCLViewableRoles(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    v_vSQL constant varchar2(500) :=  
       'DELETE FROM VAPPCT.usr_cl_viewable 
        WHERE CHECKLIST_ID = :CHECKLIST_ID';

begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_DELETE_CL_VIEWABLE_ROLES', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
          
          pi_nChecklistID;
    
    commit;
       
exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_DELETE_CL_VIEWABLE_ROLES', v_vSQL);

end;


/*
Description:
Delete a record in the usr_cl_TIU table.
*/
procedure DeleteAllCLTIURoles(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    v_vSQL constant varchar2(500) :=  
       'DELETE FROM VAPPCT.usr_cl_TIU  
        WHERE CHECKLIST_ID = :CHECKLIST_ID';

begin
    --todo: error code
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_DELETE_CL_VIEWABLE_ROLES', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
          
          pi_nChecklistID;
    
    commit;
       
exception
    when others then
      rollback;
      --todo: error code
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_DELETE_CL_VIEWABLE_ROLES', v_vSQL);

end;

/*
Description:
Delete a record in the usr_cl_readonly table.
*/
procedure DeleteAllCLReadOnlyRoles(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    v_vSQL constant varchar2(500) :=  
       'DELETE FROM VAPPCT.usr_cl_read_only 
        WHERE CHECKLIST_ID = :CHECKLIST_ID';
        

begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_DELETE_CL_READ_ROLES', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
          
          pi_nChecklistID;
        
    
    commit;
       
exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_DELETE_CL_READ_ROLES', v_vSQL);

end;

/*
Description:
Delete a record in the usr_cl_readonly table.
*/
procedure DeleteAllCLCloseableRoles(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    v_vSQL constant varchar2(500) :=  
       'DELETE FROM VAPPCT.usr_cl_closeable 
        WHERE CHECKLIST_ID = :CHECKLIST_ID';

begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_DELETE_CL_CLOSE_ROLES', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
          
          pi_nChecklistID;
    
    commit;
       
exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_DELETE_CL_CLOSE_ROLES', v_vSQL);

end;

/*
Description:
Insert a record in the usr_cl_viewable table.
*/
procedure InsertCLViewableRole(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nUserRoleID            in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    v_vSQL constant varchar2(500) :=          
        'INSERT INTO VAPPCT.usr_cl_viewable
              ( 
               checklist_id,
               user_role_id
              ) 
              VALUES( 
              :CHECKLIST_ID,
              :USER_ROLE_ID)';

begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CL_VIEWABLE_ROLE', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
        
          pi_nChecklistID,
          pi_nUserRoleID;          
    
    commit;

exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CL_VIEWABLE_ROLE', v_vSQL);

end;


/*
Description:
Insert a record in the usr_cl_tiu table.
*/
procedure InsertCLTIURole(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nUserRoleID            in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    v_vSQL constant varchar2(500) :=          
        'INSERT INTO VAPPCT.usr_cl_tiu
              ( 
               checklist_id,
               user_role_id
              ) 
              VALUES( 
              :CHECKLIST_ID,
              :USER_ROLE_ID)';

begin
    --todo: error code
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CL_VIEWABLE_ROLE', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
        
          pi_nChecklistID,
          pi_nUserRoleID;          
    
    commit;

exception
    when others then
      --todo: error code
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CL_VIEWABLE_ROLE', v_vSQL);

end;

/*
Description:
Insert a record in the usr_cl_read_only table.
*/
procedure InsertCLReadOnlyRole(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nUserRoleID            in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    v_vSQL constant varchar2(500) :=          
        'INSERT INTO VAPPCT.usr_cl_read_only
              ( 
               checklist_id,
               user_role_id
              ) 
              VALUES( 
              :CHECKLIST_ID,
              :USER_ROLE_ID)';

begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CL_READONLY_ROLE', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
        
          pi_nChecklistID,
          pi_nUserRoleID;          
    
    commit;

exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CL_READONLY_ROLE', v_vSQL);

end;

/*
Description:
Insert a record in the usr_cl_read_only table.
*/
procedure InsertCLCloseableRole(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nUserRoleID            in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    v_vSQL constant varchar2(500) :=          
        'INSERT INTO VAPPCT.usr_cl_closeable
              ( 
               checklist_id,
               user_role_id
              ) 
              VALUES( 
              :CHECKLIST_ID,
              :USER_ROLE_ID)';

begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CL_CLOSEABLE_ROLE', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
        
          pi_nChecklistID,
          pi_nUserRoleID;          
    
    commit;

exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CL_CLOSEABLE_ROLE', v_vSQL);

end;

end PCK_CHECKLIST;

/

--------------------------------------------------------
--  DDL for Package Body PCK_CHECKLIST_ITEM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_CHECKLIST_ITEM" is

  procedure UpdateChecklistItemLogic (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      pi_vLogic                 in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    v_vSQL varchar2(500) :=
      'UPDATE usr_cl_item t
       SET t.logic = :Logic
       WHERE t.checklist_id = :ChecklistID
       AND t.item_id = :ItemID';  
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_successful', '');
    
    execute immediate v_vSQL
    using pi_vLogic,
          pi_nChecklistID,
          pi_nItemID;         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_failed', '');
  end;

  procedure GetTemporalStateRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, ts.ts_label, t2.ts_definition_label, t3.active_label
       FROM usr_cli_ts t,
            usr_temporal_state ts,
            stat_ts_definition t2,
            stat_active t3
       where t.checklist_id = :CHECKLIST_ID
       and   t.item_id = :ITEM_ID 
       and   ts.ts_definition_id = t2.ts_definition_id 
       and   t.ts_id = ts.ts_id 
       and   t.active_id = t3.active_id
       ORDER BY upper(ts.ts_label) ASC'; 
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_TS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_nChecklistID,
          pi_nItemID;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_TS', v_vSQL);
  end;


procedure GetOutcomeStateRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, os.os_label, t2.os_definition_label, t3.active_label
       FROM usr_cli_os t,
            usr_outcome_state os,
            stat_os_definition t2,
            stat_active t3
       where t.checklist_id = :CHECKLIST_ID
       and   t.item_id = :ITEM_ID 
       and   os.os_definition_id = t2.os_definition_id 
       and   t.os_id = os.os_id 
       and   t.active_id = t3.active_id
       ORDER BY upper(os.os_label) ASC'; 
    
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_nChecklistID,
          pi_nItemID;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;


procedure GetDecisionStateRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, ds.ds_label, t2.ds_definition_label, t3.active_label
       FROM usr_cli_ds t,
            usr_decision_state ds,
            stat_ds_definition t2,
            stat_active t3
       where t.checklist_id = :CHECKLIST_ID
       and   t.item_id = :ITEM_ID 
       and   ds.ds_definition_id = t2.ds_definition_id 
       and   t.ds_id = ds.ds_id 
       and   t.active_id = t3.active_id
       ORDER BY upper(ds.ds_label) ASC'; 
    
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_DS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_nChecklistID,
          pi_nItemID;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_DS', v_vSQL);
  
end;

 /* 
 saves the items selected temporal states 
 */
 procedure SaveTemporalStates ( pi_vSessionID             in varchar2,
                                pi_vSessionClientIP       in varchar2,
                                pi_nUserID                in number,
                                pi_nChecklistID           in number,
                                pi_nItemID                in number,
                                pi_vTSIDs                 in varchar2,
                                pi_nTSCount               in number,
                                po_nStatusCode            out number,
                                po_vStatusComment         out varchar2 )
is
    --create dynamic sql for the insert
    v_vSQLInsert constant varchar2(500) := 
      'INSERT INTO VAPPCT.usr_cli_ts( 
              checklist_id,
              item_id,
              ts_id,
              active_id) 
              VALUES( 
              :CHECKLIST_ID,
              :ITEM_ID,
              :TS_ID,
              1)';
              
    --update all records to inactive
    v_vSQLInactive constant varchar2(500) := 
      'UPDATE VAPPCT.usr_cli_ts
       SET active_id = 2
       WHERE checklist_id = :CHECKLIST_ID
       AND   item_id = :ITEM_ID';       
    
     --update checked records to active
    v_vSQLActive constant varchar2(500) := 
      'UPDATE VAPPCT.usr_cli_ts
       SET active_id = 1
       WHERE checklist_id = :CHECKLIST_ID
       AND   item_id = :ITEM_ID
       AND   ts_id = :TS_ID';  
       
    v_nTSID number := 0;
    v_vSQLCount varchar2(4000)  := '';
    v_nCount number := 0;
    v_vTSIDs varchar2(4000) := '';
    v_nTSCount number := pi_nTSCount + 3;
    
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_TS', 'TS_IDs:' || pi_vTSIDs);
    
    --always add required temporal states to the list
    v_vTSIDs := to_char(PCK_COMMON.c_nDefaultUnknownID) || ','
                || to_char(PCK_COMMON.c_nDefaultGoodID) || ','
                || to_char(PCK_COMMON.c_nDefaultBadID) || ','
                || pi_vTSIDs;
        
    --mark all records inactive to start with
    EXECUTE IMMEDIATE v_vSQLInactive
      USING pi_nChecklistID, 
            pi_nItemID;
     
    --loop over the IDs        
    for i in 0..v_nTSCount - 1 loop
    
      --get the TS_ID
      v_nTSID :=  to_number(VAPPCT.PCK_COMMON.GetPiece(v_vTSIDs, ',', i));
      
      --insert new records if they are not there already
     
      --check that a record exisits
      v_vSQLCount := 'select count(*) from VAPPCT.usr_cli_ts ';
      v_vSQLCount := v_vSQLCount || 'WHERE checklist_id = ' || pi_nChecklistID;
      v_vSQLCount := v_vSQLCount || 'AND  item_id = ' || pi_nItemID;
      v_vSQLCount := v_vSQLCount || 'AND   ts_id = ' || v_nTSID;   
      
      --get the count 
      v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
      
      --insert if the record is not there
      if (v_nCount < 1) then
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nChecklistID, 
              pi_nItemID, 
              v_nTSID;    
      else
        --mark active if it is there
        EXECUTE IMMEDIATE v_vSQLActive
        USING pi_nChecklistID, 
              pi_nItemID, 
              v_nTSID;    
      end if;
    end loop;
                
    --done with the updates so commit
    commit;
    
exception
    when others then
    
      --something went wrong so rollback
      rollback;
      
      --update the status info
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_TS', 'TS_IDs:' || pi_vTSIDs);
end;


/* 
 saves the items selected outcome states 
 */
 procedure SaveOutcomeStates ( pi_vSessionID             in varchar2,
                                pi_vSessionClientIP       in varchar2,
                                pi_nUserID                in number,
                                pi_nChecklistID           in number,
                                pi_nItemID                in number,
                                pi_vOSIDs                 in varchar2,
                                pi_nOSCount               in number,
                                po_nStatusCode            out number,
                                po_vStatusComment         out varchar2 )
is
    --create dynamic sql for the insert
    v_vSQLInsert constant varchar2(500) := 
      'INSERT INTO VAPPCT.usr_cli_os( 
              checklist_id,
              item_id,
              os_id,
              active_id) 
              VALUES( 
              :CHECKLIST_ID,
              :ITEM_ID,
              :os_ID,
              1)';
              
    --update all records to inactive
    v_vSQLInactive constant varchar2(500) := 
      'UPDATE VAPPCT.usr_cli_os
       SET active_id = 2
       WHERE checklist_id = :CHECKLIST_ID
       AND   item_id = :ITEM_ID';       
    
     --update checked records to active
    v_vSQLActive constant varchar2(500) := 
      'UPDATE VAPPCT.usr_cli_os
       SET active_id = 1
       WHERE checklist_id = :CHECKLIST_ID
       AND   item_id = :ITEM_ID
       AND   os_id = :os_ID';  
       
    v_nosID number := 0;
    v_vSQLCount varchar2(4000) := '';
    v_nCount number := 0;
    v_vOSIDs varchar2(4000) := '';
    v_nOSCount number := pi_nOSCount + 3;
    
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_OS', 'os_IDs:' || pi_vOSIDs);
    
    --always add required outcome states to the list
    v_vOSIDs := to_char(PCK_COMMON.c_nDefaultUnknownID) || ','
                || to_char(PCK_COMMON.c_nDefaultGoodID) || ','
                || to_char(PCK_COMMON.c_nDefaultBadID) || ','
                || pi_vOSIDs;
        
    --mark all records inactive to start with
    EXECUTE IMMEDIATE v_vSQLInactive
      USING pi_nChecklistID, 
            pi_nItemID;
     
    --loop over the IDs        
    for i in 0..v_nOSCount - 1 loop
    
      --get the os_ID
      v_nosID :=  to_number(VAPPCT.PCK_COMMON.GetPiece(v_vOSIDs, ',', i));
      
      --insert new records if they are not there already
     
      --check that a record exisits
      v_vSQLCount := 'select count(*) from VAPPCT.usr_cli_os ';
      v_vSQLCount := v_vSQLCount || 'WHERE checklist_id = ' || pi_nChecklistID;
      v_vSQLCount := v_vSQLCount || 'AND  item_id = ' || pi_nItemID;
      v_vSQLCount := v_vSQLCount || 'AND   os_id = ' || v_nOSID;   
      
      --get the count 
      v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
      
      --insert if the record is not there
      if (v_nCount < 1) then
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nChecklistID, 
              pi_nItemID, 
              v_nosID;    
      else
        --mark active if it is there
        EXECUTE IMMEDIATE v_vSQLActive
        USING pi_nChecklistID, 
              pi_nItemID, 
              v_nosID;    
      end if;
    end loop;
                
    --done with the updates so commit
    commit;
    
exception
    when others then
    
      --something went wrong so rollback
      rollback;
      
      --update the status info
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_OS', 'OS_IDs:' || pi_vOSIDs);
end;


/* 
 saves the items selected decision states 
 */
 procedure SaveDecisionStates ( pi_vSessionID             in varchar2,
                                pi_vSessionClientIP       in varchar2,
                                pi_nUserID                in number,
                                pi_nChecklistID           in number,
                                pi_nItemID                in number,
                                pi_vDSIDs                 in varchar2,
                                pi_nDSCount               in number,
                                po_nStatusCode            out number,
                                po_vStatusComment         out varchar2 )
is
    --create dynamic sql for the insert
    v_vSQLInsert constant varchar2(500) := 
      'INSERT INTO VAPPCT.usr_cli_ds( 
              checklist_id,
              item_id,
              ds_id,
              active_id) 
              VALUES( 
              :CHECKLIST_ID,
              :ITEM_ID,
              :DS_ID,
              1)';
              
    --update all records to inactive
    v_vSQLInactive constant varchar2(500) := 
      'UPDATE VAPPCT.usr_cli_ds
       SET active_id = 2
       WHERE checklist_id = :CHECKLIST_ID
       AND   item_id = :ITEM_ID';       
    
     --update checked records to active
    v_vSQLActive constant varchar2(500) := 
      'UPDATE VAPPCT.usr_cli_ds
       SET active_id = 1
       WHERE checklist_id = :CHECKLIST_ID
       AND   item_id = :ITEM_ID
       AND   ds_id = :DS_ID';  
       
    v_nDSID number := 0;  
    v_vSQLCount varchar2(4000) := '';
    v_nCount number := 0;
    v_vDSIDs varchar2(4000) := '';
    v_nDSCount number := pi_nDSCount + 3;
    
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_DS', 'DS_IDs:' || pi_vDSIDs);
    
    --always add required decision states to the list
    v_vDSIDs := to_char(PCK_COMMON.c_nDefaultUnknownID) || ','
                || to_char(PCK_COMMON.c_nDefaultGoodID) || ','
                || to_char(PCK_COMMON.c_nDefaultBadID) || ','
                || pi_vDSIDs;
        
    --mark all records inactive to start with
    EXECUTE IMMEDIATE v_vSQLInactive
      USING pi_nChecklistID, 
            pi_nItemID;
     
    --loop over the IDs        
    for i in 0..v_nDSCount - 1 loop
    
      --get the DS_ID
      v_nDSID :=  to_number(VAPPCT.PCK_COMMON.GetPiece(v_vDSIDs, ',', i));
      
      --insert new records if they are not there already
     
      --check that a record exisits
      v_vSQLCount := 'select count(*) from VAPPCT.usr_cli_ds ';
      v_vSQLCount := v_vSQLCount || 'WHERE checklist_id = ' || pi_nChecklistID;
      v_vSQLCount := v_vSQLCount || 'AND  item_id = ' || pi_nItemID;
      v_vSQLCount := v_vSQLCount || 'AND   ds_id = ' || v_nDSID;   
      
      --get the count 
      v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
      
      --insert if the record is not there
      if (v_nCount < 1) then
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nChecklistID, 
              pi_nItemID, 
              v_nDSID;    
      else
        --mark active if it is there
        EXECUTE IMMEDIATE v_vSQLActive
        USING pi_nChecklistID, 
              pi_nItemID, 
              v_nDSID;    
      end if;
    end loop;
                
    --done with the updates so commit
    commit;
    
exception
    when others then
    
      --something went wrong so rollback
      rollback;
      
      --update the status info
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_DS', 'DS_IDs:' || pi_vDSIDs);
end;

  procedure GetChecklistItemsRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(32767) :=
      'select uci.*, ui.item_label, stu.time_unit_label, sta.active_label
         from usr_cl_item uci, usr_item ui, stat_time_unit stu, stat_active sta
        where uci.CHECKLIST_ID = :ChecklistID
          and uci.ITEM_ID = ui.ITEM_ID
          and uci.time_unit_id = stu.TIME_UNIT_ID
          and uci.active_id = sta.ACTIVE_ID
     order by uci.ACTIVE_ID, uci.sort_order';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CIE', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nChecklistID;  
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CIE', v_vSQL);
  end;
  
  procedure GetCLItemDIRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    pi_nItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(1234) := 'select uci.*, ui.item_label, stu.time_unit_label, sta.active_label
                                       from usr_cl_item uci, usr_item ui, stat_time_unit stu, stat_active sta
                                       where uci.CHECKLIST_ID = :ChecklistID
                                       and uci.item_id = :ItemID
                                       and uci.ITEM_ID = ui.ITEM_ID
                                       and uci.time_unit_id = stu.TIME_UNIT_ID
                                       and uci.active_id = sta.ACTIVE_ID
                                       order by uci.ACTIVE_ID, upper(ui.item_label)';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CIE', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nChecklistID,
          pi_nItemID;  
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CIE', v_vSQL);
  end;

procedure GetCLItemDSRolesRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nChecklistID in number,
    pi_nItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    
    v_vSQL constant varchar2(1234) := 'select uds.*
                                       from usr_cli_ds_edit uds
                                       where uds.CHECKLIST_ID = :ChecklistID
                                       and uds.ITEM_ID = :ItemID
                                       order by uds.CHECKLIST_ID,uds.ITEM_ID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_CL_DS', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nChecklistID,
          pi_nItemID;
          
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_CL_DS', v_vSQL);
  end;

/*****
Description:
Inserts a record in the usr_cl_item table.
******/
procedure InsertChecklistItem (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      pi_nTimePeriod            in number,
      pi_nTimeUnit              in number,
      pi_nSortOrder             in number,
      pi_nIsActive              in number,
      pi_vLogic                 in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
is
    --create dynamic sql for the insert
     
    v_vSQL constant varchar2(1000) := 
      'INSERT INTO VAPPCT.usr_cl_item( 
              checklist_id,
              item_id,
              cli_ts_time_period,
              time_unit_id,
              sort_order,
              active_id,
              logic) 
              VALUES( 
              :CHECKLIST_ID,
              :ITEM_ID,
              :TIME_PERIOD,
              :TIME_UNIT,
              :SORT_ORDER,
              :ACTIVE_ID,
              :LOGIC)';
      
    TYPE vaSQL IS VARRAY(4) OF varchar(123);
    v_vaSQLDelete constant vaSQL := vaSQL('delete from usr_cli_ts t where t.checklist_id = :ChecklistID and t.item_id = :ItemID',
                                           'delete from usr_cli_os t where t.checklist_id = :ChecklistID and t.item_id = :ItemID',
                                           'delete from usr_cli_ds t where t.checklist_id = :ChecklistID and t.item_id = :ItemID',
                                           'delete from usr_cl_item t where t.checklist_id = :ChecklistID and t.item_id = :ItemID');
         
begin
       
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CIE', v_vSQL);
         
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nChecklistID,
          pi_nItemID,
          pi_nTimePeriod,
          pi_nTimeUnit,
          pi_nSortOrder,
          pi_nIsActive,
          pi_vLogic;
      
      commit;
    
    SaveTemporalStates(pi_vSessionID,
                       pi_vSessionClientIP,
                       pi_nUserID,
                       pi_nChecklistID,
                       pi_nItemID,
                       '',
                       0,
                       po_nStatusCode,
                       po_vStatusComment);
                       
    if po_nStatusCode = VAPPCT.PCK_COMMON.c_nStatus_Error
    then
      for i in 1..4
      loop
        EXECUTE IMMEDIATE v_vaSQLDelete(i)
        using pi_nChecklistID,
              pi_nItemID;
      end loop;
      return;
    end if;
                       
    SaveOutcomeStates(pi_vSessionID,
                      pi_vSessionClientIP,
                      pi_nUserID,
                      pi_nChecklistID,
                      pi_nItemID,
                      '',
                      0,
                      po_nStatusCode,
                      po_vStatusComment);
                      
    if po_nStatusCode = VAPPCT.PCK_COMMON.c_nStatus_Error
    then
      for i in 1..4
      loop
        EXECUTE IMMEDIATE v_vaSQLDelete(i)
        using pi_nChecklistID,
              pi_nItemID;
      end loop;
      return;
    end if;
                       
    SaveDecisionStates(pi_vSessionID,
                       pi_vSessionClientIP,
                       pi_nUserID,
                       pi_nChecklistID,
                       pi_nItemID,
                       '',
                       0,
                       po_nStatusCode,
                       po_vStatusComment);
                       
    if po_nStatusCode = VAPPCT.PCK_COMMON.c_nStatus_Error
    then
      for i in 1..4
      loop
        EXECUTE IMMEDIATE v_vaSQLDelete(i)
        using pi_nChecklistID,
              pi_nItemID;
      end loop;
      return;
    end if;
    
exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CIE', v_vSQL);
end;

/*****
Description:
update a record in the usr_cl_item table.
******/
procedure UpdateChecklistItem (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      pi_nTimePeriod            in number,
      pi_nTimeUnit              in number,
      pi_nSortOrder             in number,
      pi_nIsActive              in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
is
    --create dynamic sql for the insert
     
    v_vSQL constant varchar2(1000) := 
        'UPDATE VAPPCT.usr_cl_item
         set cli_ts_time_period  = :TIME_PERIOD,
             time_unit_id = :TIME_UNIT,
             sort_order = :SORT_ORDER,
             active_id = :ACTIVE_ID
       WHERE checklist_id = :CHECKLIST_ID
         and item_id = :ItemID';
         
begin
       
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CIE', v_vSQL);
              
         
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nTimePeriod,
          pi_nTimeUnit,
          pi_nSortOrder,
          pi_nIsActive,
          pi_nChecklistID,
          pi_nItemID;
    
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CIE', v_vSQL);
end;

/*****
Description:
Insert a record in the usr_cli_ds_edit table.
******/
procedure InsertCLItemDSRole(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      pi_nUserRoleID            in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    v_vSQL constant varchar2(500) :=  
        'INSERT INTO VAPPCT.usr_cli_ds_edit
              ( 
              checklist_id,
              item_id,
              user_role_id
              ) 
              VALUES( 
              :CHECKLIST_ID,
              :ITEM_ID,
              :USER_ROLE_ID)';
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CIE_DS_ROLE', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
          
          pi_nChecklistID,
          pi_nItemID,
          pi_nUserRoleID;          
    
    commit;
       
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CIE_DS_ROLE', v_vSQL);

end;

/*****
Description:
Delete a record in the usr_cli_ds_edit table.
******/
procedure DeleteAllCLItemDSRoles(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    v_vSQL constant varchar2(500) :=  
        'DELETE FROM VAPPCT.usr_cli_ds_edit
        WHERE CHECKLIST_ID = :CHECKLIST_ID
        AND ITEM_ID        = :CHECKLIST_ITEM_ID';

begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_DELETE_CIE_DS_ROLES', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING 
          
          pi_nChecklistID,
          pi_nItemID;
    
    commit;
       
exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_DELETE_CIE_DS_ROLES', v_vSQL);

end;

end PCK_CHECKLIST_ITEM;

/

--------------------------------------------------------
--  DDL for Package Body PCK_CLINIC
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_CLINIC" AS


/*
saves a clinic to the database
*/
procedure SaveClinic(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nClinicID                in number, 
      pi_vClinicLabel             in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_Clinic(Clinic_id,
                               Clinic_label,
                               xfer_system_id,
                               xfer_date
                          ) 
          values(:Clinic_ID,
                 :Clinic_LABEL,
                 :XFER_SYSTEM_ID,
                 sysdate)';
               
     v_vSQLUpdate constant varchar2(4000) :=  
         'update VAPPCT.utl_Clinic 
          set Clinic_label = :Clinic_LABEL, 
              xfer_system_id = :XFER_SYSTEM_ID, 
              xfer_date = sysdate 
          where Clinic_id = :Clinic_ID';
                          
     v_vSQLCount varchar2(4000) := '';
     v_nCount number := 0;
     
  begin
     
     --todo:error messages  
     v_nCount := 0;
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_LOGIN', '');
    
     --check that a record exisits
     v_vSQLCount := 'select count(*) from VAPPCT.utl_Clinic ';
     v_vSQLCount := v_vSQLCount || 'WHERE Clinic_id = ' || pi_nClinicID;
     v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
     
     --insert if the record is not there
     if (v_nCount < 1) then
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nClinicID, 
              pi_vClinicLabel,
              pi_nXferSystemID;    
        commit;
    
      else
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLUpdate
        USING pi_vClinicLabel, 
              pi_nXferSystemID,
              pi_nClinicID; 
        commit;
      
      end if;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_LOGIN', '');
  
end;

/*****
Description: Gets all specialties
******/
procedure GetClinicRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
     v_vSQL varchar2(500) :=  
      'SELECT t.* 
       FROM utl_Clinic t 
       order by upper(t.Clinic_label) asc';    
begin

    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;

/*****
Description: Gets all patients that belong to a specific Clinic
******/
procedure GetPatientClinicRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nClinicID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
    v_vSQL constant varchar2(4000) :=  
            'select distinct t.*, 
                pck_common.GetAge(t.date_of_birth) as patient_age, 
                t2.sex_label, 
                substr(t.ssn, length(t.ssn)-3) as ssn_last_4, 
                t2.sex_abbreviation
                       
            from utl_patient t, 
                 stat_sex t2,
                 usr_pat_checklist t3 
                       
            where t.sex_id = t2.sex_id 
            and t.patient_id = t3.patient_id(+) 
            and t.patient_id in (select patient_id 
                                  from utl_Clinic_patient p 
                                  where p.Clinic_id = :Clinic_ID)
            
            order by upper(t.last_name), upper(t.first_name)';
            
begin

    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_nClinicID;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;

END PCK_CLINIC;

/

--------------------------------------------------------
--  DDL for Package Body PCK_COMMON
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_COMMON" is

/*****
Description:
helper function used to get data by using dynamic sql 
"into" statement. all data is returned as a vachar2
and can be casted as needed. We use dynamic sql for 
security reasons.
*****/
function GetDynamicSQLValue (
      pi_vSql in varchar2
      ) return varchar2 
is
    type refCursor  is ref cursor;
    rc   refCursor;
    v_vData varchar2(4000);

begin
    open  rc for pi_vSql;
    fetch rc into v_vData;
    close rc;

    return v_vData;

exception
    when others
    then
    return null;
end;

/*
checks for a valid entry in the fx_session table
*/
function CheckFXSession (
      pi_vSessionID in varchar2,
      pi_vSessionClientIP in varchar2,
      pi_nUserID in number
      ) return boolean 
is
   v_vSQL varchar2(4000);
   v_nCount number;
   
   v_vSQLUpdate constant varchar2(4000) := 
      'UPDATE VAPPCT.fx_session 
       set session_updated = sysdate 
       WHERE client_ip = :CLIENT_IP 
       AND user_id = :USER_ID  
       AND asp_session_id = :SESSION_ID';

begin
    v_nCount := 0;
  
    --does a session record exisit for this user
    v_vSQL := '';
    v_vSQL := 'select count(*) from VAPPCT.fx_session ';
    v_vSQL := v_vSQL || ' WHERE asp_session_id = ''' || pi_vSessionID || '''';
    v_vSQL := v_vSQL || ' AND client_ip = ''' || pi_vSessionClientIP || '''';
    v_vSQL := v_vSQL || ' AND user_id  = ' || pi_nUserID;   
   
    --get the count 
    v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQL));
   
    if (v_nCount > 0) then
    
     --update the date last updated for the session  
     EXECUTE IMMEDIATE v_vSQLUpdate
     USING pi_vsessionclientip,
           pi_nuserid, 
           pi_vSessionID;
     commit;
     
     --session is valid so return true
     return true;
      
    else
      return false;
    end if;
    
exception
    when others
    then
    return false;
end;


/*****
Description:
helper function used to get the next value from a sequence
TODO: SAFER TO REMOVE THIS FUNCTION I THINK
*****/
function GetNextSequenceValue (
      pi_vSequenceName in varchar2
      ) return number

is
     v_vSQL     varchar2(4000);
     v_SeqValue varchar2(4000);
     
begin
     
     v_vSQL := '';
     v_vSQL := v_vSQL || 'SELECT ' || pi_vSequenceName || '.nextval FROM dual';
     v_SeqValue := GetDynamicSQLValue(v_vSQL);
     
     return to_number(v_SeqValue);
 
exception
    when others
    then
    return null;

end;

/*****
Description:
helper function used to get age given date of birth
*****/
function GetAge(pi_dtDOB in date)
  return number
is
  v_nAge  number;
begin 
  v_nAge := trunc(months_between(sysdate,pi_dtDOB)/12);
  return v_nAge;
end;


/*****
Description:
helper function used to generate comment text
*****/
function GetStatusComment (
    pi_vPCKStatusLabel in varchar2,
    pi_vDetails in varchar2
    ) return varchar2

is
     v_vStatusComment varchar2(32000);
     v_vSQL           varchar2(4000);
     
begin
     
     v_vSQL := '';
     v_vSQL := v_vSQL || 'select t.pck_status_comment ';
     v_vSQL := v_vSQL || 'from fx_pck_status t ';
     v_vSQL := v_vSQL || 'where upper(t.pck_status_label) = upper(''' || pi_vPCKStatusLabel || ''')';
     
     v_vStatusComment := GetDynamicSQLValue(v_vSQL);
     
     --if we are in debug mode add the package name and sqlerror
     if PCK_COMMON.c_nDebug_Mode = 1 then
        v_vStatusComment := v_vStatusComment || ' (' || sqlErrm;
        v_vStatusComment := v_vStatusComment || ': ' || pi_vDetails  || ')';
     end if;
     
     v_vStatusComment := trim(v_vStatusComment);
     
     --for some reason 1000 is the max.
     if length(v_vStatusComment) > 1000 then
      v_vStatusComment := substr(v_vStatusComment,1,1000);
     end if;
          
     return v_vStatusComment;
     
exception
   when others then
     v_vStatusComment := c_vStatus_undefined;
     return v_vStatusComment;
     
end;      
 
 /*
 gets a zero based piece given a string, delimeter and posiiton
 */
 function GetPiece( strData      in varchar2,
                    strDelimiter in varchar2,
                    nPosition    in NUMBER) return varchar2 
 is
 
    strWorking varchar2(4000);
    strPiece   varchar2(400);
    pos        number;
    nPos2      number;
    nCount     number;
 
 begin
  
    --the piece to return
    strPiece := '';
  
    --set working to data
    strWorking := strData;
  
    --put a delimeter on the front for parsing if needed
    if substr(strWorking, 1, 1) != strDelimiter then
      strWorking := strDelimiter || strWorking;
    end if;
    
    --put a delimeter on the end
    strWorking := strWorking  || strDelimiter;
  
    --find the piece between the ~'s ie... "~piece~"
    pos    := -1;
    nCount := -1;
    while (pos != 0) loop
      pos := instr(strWorking, strDelimiter);
      if pos != 0 then
        --increment count
        nCount := nCount + 1;
        --found the piece...
        if nCount = nPosition then
          if (pos + 1 > length(strWorking) - 1) then
            --nothing
            strPiece := '';
          else
            strWorking := substr(strWorking, pos + 1);
            nPos2      := instr(strWorking, strDelimiter);
            if nPos2 = 0 then
              --last piece
              strPiece := strWorking;
              return ltrim(rtrim(strPiece));
            else
              strPiece := substr(strWorking, 0, nPos2 - 1);
              return ltrim(rtrim(strPiece));
            end if;
          end if;
        else
          strWorking := substr(strWorking, pos + 1);
        end if;
      end if;
    end loop;
  
    return ltrim(rtrim(strPiece));
  
  exception
    when others then
      return '';
end GetPiece;
  
end PCK_COMMON;

/

--------------------------------------------------------
--  DDL for Package Body PCK_FX_SECURITY
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_FX_SECURITY" is

/*audits the page access and returns status info indicating whether the 
user is allowed to access this page*/
procedure AuditPageAccess (
      pi_vSessionID       in varchar2,
      pi_vSessionClientIP in varchar2,
      pi_nUserID          in number,
      pi_vPageName        in varchar2,
      po_nStatusCode      out number,
      po_vStatusComment   out varchar2
    )

    is
     
     v_vSQLMenuOption varchar2(2000) := '';
     v_nMenuOptionID number := 0;
     v_nMenuCheckID number := 0;
     
     v_vSQLCheck varchar2(2000) := '';
     
   begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_AUDIT', '');
   
    --get the menu option id of the page
    v_vSQLMenuOption := 'SELECT distinct menu_option_id FROM VAPPCT.stat_menu_option ';
    v_vSQLMenuOption := v_vSQLMenuOption || 'WHERE lower(menu_option_url) = ';
    v_vSQLMenuOption := v_vSQLMenuOption || 'lower(''' || pi_vPageName || ''')';  
    begin
      v_nMenuOptionID := to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLMenuOption));     
    exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_AUDIT', '');
      return;  
    end;
    
    --check to see if the user has access to this page
    v_vSQLCheck := 'select distinct menu_option_id ';
    v_vSQLCheck := v_vSQLCheck || 'from stat_ur_mo '; 
    v_vSQLCheck := v_vSQLCheck || ' where user_role_id in '; 
    v_vSQLCheck := v_vSQLCheck || '  (select user_role_id from utl_user_role '; 
    v_vSQLCheck := v_vSQLCheck || '   where user_id = ' || pi_nuserid || ') ';
    v_vSQLCheck := v_vSQLCheck || '   and menu_option_id = ' || v_nMenuOptionID;
    
    begin
      v_nMenuCheckID := to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCheck));     
    exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_AUDIT', '');
      return;  
    end;
    
    --if null or < 1 then the user cannot access this page!
    if v_nMenuCheckID is null or v_nMenuCheckID < 1 then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_AUDIT', '');
      return;  
    end if;
    
    commit;
       
   exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_AUDIT', '');
      
  end;
  
  procedure AuditTransaction (
      pi_vSessionClientIP        in varchar2,
      pi_nUserID                 in number,
      pi_vSPName                 in varchar2,
      pi_clAuditXML              in clob,
      pi_nStatus                 in number,
      po_nStatusCode             out number,
      po_vStatusComment          out varchar2
     )

    is
     
     v_vSQL constant long := 
            'insert into fx_audit( fx_audit_id,
                                   client_ip,
                                   user_id,
                                   audit_date,
                                   audit_name,
                                   audit_data,
                                   status_id)
              values( :AUDIT_ID,
                      :CLIENT_IP,
                      :USER_ID,
                      :AUDIT_DATE,
                      :SP_NAME,
                      :AUDIT_XML,
                      :STATUS_CODE)';
     
     v_nAuditID number;
     
   begin

    v_nAuditID := 0;

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_AUDIT', v_vSQL);
        
    --get a new id from the sequence
    v_nAuditID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_fx_audit_id');
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING v_nAuditID,
          pi_vSessionClientIP,
          pi_nUserID,
          sysdate,
          pi_vSPName,
          pi_clAuditXML,
          pi_nStatus;

    commit;
       
   exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_AUDIT', v_vSQL);
      
  end;
   
end PCK_FX_SECURITY;

/

--------------------------------------------------------
--  DDL for Package Body PCK_ITEM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_ITEM" AS
  
  /*
  select
  returns a single item record
  filtered by item id
  */
  procedure GetItemIDRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nItemID                in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(1234) := 'select ui.*, uig.ITEM_GROUP_LABEL, sit.ITEM_TYPE_LABEL, sa.ACTIVE_LABEL
                                       from usr_item ui, usr_item_group uig, stat_item_type sit, stat_active sa
                                       where ui.ITEM_GROUP_ID = uig.ITEM_GROUP_ID
                                       and ui.ITEM_TYPE_ID = sit.ITEM_TYPE_ID
                                       and ui.ACTIVE_ID = sa.ACTIVE_ID
                                       and ui.ITEM_ID = :ItemID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_ITEM', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nItemID;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_ITEM', v_vSQL);
  end;
  
  procedure GetItemDIRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_vItemLabel in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(1234) := 'select ui.*, uig.ITEM_GROUP_LABEL, sit.ITEM_TYPE_LABEL, sa.ACTIVE_LABEL
                                       from usr_item ui, usr_item_group uig, stat_item_type sit, stat_active sa
                                       where ui.ITEM_GROUP_ID = uig.ITEM_GROUP_ID
                                       and ui.ITEM_TYPE_ID = sit.ITEM_TYPE_ID
                                       and ui.ACTIVE_ID = sa.ACTIVE_ID
                                       and lower(ui.ITEM_LABEL) = lower(:ItemLabel)';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
      
    open rs
    for v_vSQL
    using pi_vItemLabel;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  end;
  
  /*
  select
  returns a group of item records
  filtered by label, type, group and active
  */
  procedure GetItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vFilterLabel           in varchar2,
        pi_nFilterTypeID          in number,
        pi_nFilterGroupID         in number,
        pi_nActiveFilter          in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    
                                      
     v_vSQL constant varchar2(1234) := 'select ui.*, sit.ITEM_TYPE_LABEL, uig.ITEM_GROUP_LABEL, sa.ACTIVE_LABEL 
                                        from usr_item ui, stat_item_type sit, usr_item_group uig, stat_active sa
                                        where ui.ITEM_TYPE_ID = sit.ITEM_TYPE_ID
                                        and ui.ITEM_GROUP_ID = uig.ITEM_GROUP_ID
                                        and ui.ACTIVE_ID = sa.ACTIVE_ID
                                        and upper(ui.ITEM_LABEL) like upper(nvl(:ItemLabel, ui.ITEM_LABEL))
                                        and ui.ITEM_TYPE_ID = nvl(:ItemTypeID, ui.ITEM_TYPE_ID)
                                        and ui.ITEM_GROUP_ID = nvl(:ItemGroupID, ui.ITEM_GROUP_ID)
                                        and instr(:ActiveIDs, '','' || ui.ACTIVE_ID || '','') > 0';

    v_vFilterLabel constant varchar2(1234) := '%' || pi_vFilterLabel || '%';
    
    v_nFilterTypeID constant number := case
                                         when (pi_nFilterTypeID = -1)
                                           then null
                                         else pi_nFilterTypeID
                                       end;
                                       
    v_nFilterGroupID constant number := case
                                          when (pi_nFilterGroupID = -1)
                                            then null
                                          else pi_nFilterGroupID
                                        end;
                                        
    v_vFilterActiveIDs constant varchar2(1234) := case
                                                   when (pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterActive)
                                                     then ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterActive) || ','
                                                   when (pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterInactive)
                                                     then ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterInactive) || ','
                                                   else ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterActive) ||
                                                        ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterInactive) || ','
                                                  end;
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_ITEM', v_vSQL);
      
    --open the result set
    open rs
    for v_vSQL
    using v_vFilterLabel, 
          v_nFilterTypeID,
          v_nFilterGroupID,
          v_vFilterActiveIDs;
          
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_ITEM', v_vSQL);
  end;
  
  procedure GetCLItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vFilterLabel           in varchar2,
        pi_nFilterTypeID          in number,
        pi_nFilterGroupID         in number,
        pi_nActiveFilter          in number,
        pi_nChecklistID           in number, 
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    
                                      
     v_vSQL constant varchar2(4000) := 'select ui.*, sit.ITEM_TYPE_LABEL, uig.ITEM_GROUP_LABEL, sa.ACTIVE_LABEL 
                                        from usr_item ui, stat_item_type sit, usr_item_group uig, stat_active sa
                                        where ui.ITEM_TYPE_ID = sit.ITEM_TYPE_ID
                                        and ui.item_id in (select distinct item_id from usr_cl_item where checklist_id = :CL_ID) 
                                        and ui.ITEM_GROUP_ID = uig.ITEM_GROUP_ID
                                        and ui.ACTIVE_ID = sa.ACTIVE_ID
                                        and upper(ui.ITEM_LABEL) like upper(nvl(:ItemLabel, ui.ITEM_LABEL))
                                        and ui.ITEM_TYPE_ID = nvl(:ItemTypeID, ui.ITEM_TYPE_ID)
                                        and ui.ITEM_GROUP_ID = nvl(:ItemGroupID, ui.ITEM_GROUP_ID)
                                        and instr(:ActiveIDs, '','' || ui.ACTIVE_ID || '','') > 0';

    v_vFilterLabel constant varchar2(1234) := '%' || pi_vFilterLabel || '%';
    
    v_nFilterTypeID constant number := case
                                         when (pi_nFilterTypeID = -1)
                                           then null
                                         else pi_nFilterTypeID
                                       end;
                                       
    v_nFilterGroupID constant number := case
                                          when (pi_nFilterGroupID = -1)
                                            then null
                                          else pi_nFilterGroupID
                                        end;
                                        
    v_vFilterActiveIDs constant varchar2(1234) := case
                                                   when (pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterActive)
                                                     then ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterActive) || ','
                                                   when (pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterInactive)
                                                     then ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterInactive) || ','
                                                   else ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterActive) ||
                                                        ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterInactive) || ','
                                                  end;
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_ITEM', v_vSQL);
      
    --open the result set
    open rs
    for v_vSQL
    using pi_nChecklistID, 
          v_vFilterLabel, 
          v_nFilterTypeID,
          v_nFilterGroupID,
          v_vFilterActiveIDs;
          
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_ITEM', v_vSQL);
  end;
  
  /*
  insert
  inserts the described item
  */
  procedure InsertItem (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemTypeID in number,
    pi_nItemGroupID in number,
    pi_vItemLabel in varchar2,
    pi_vItemDescription in varchar2,
    pi_nLookbackTime in number,
    pi_nActiveID in number,
    pi_vMapID in varchar2,
    po_nItemID out number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(2234) := 'insert into usr_item t(
                                       t.ITEM_ID,
                                       t.ITEM_TYPE_ID,
                                       t.ITEM_GROUP_ID,
                                       t.ITEM_LABEL,
                                       t.ITEM_DESCRIPTION,
                                       t.LOOKBACK_TIME,
                                       t.ACTIVE_ID,
                                       t.MAP_ID,
                                       t.created_by,
                                       t.date_created,
                                       t.last_updated_by,
                                       t.date_last_updated)
                                       VALUES(
                                       :ItemID,
                                       :ItemTypeID,
                                       :ItemGroupID,
                                       :ItemLabel,
                                       :ItemDescription,
                                       :LookbackTime,
                                       :ActiveID,
                                       :MapID,
                                       :USERID_CREATED,
                                       sysdate,
                                       :USERID_UPDATED,
                                       sysdate)';
                                       
    v_nItemID constant number := VAPPCT.PCK_COMMON.GetNextSequenceValue('SEQ_ITEM_ID');
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_ITEM', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING v_nItemID, 
          pi_nItemTypeID, 
          pi_nItemGroupID,
          pi_vItemLabel, 
          pi_vItemDescription,
          pi_nLookbackTime, 
          pi_nActiveID,
          pi_vMapID,
          pi_nUserID,
          pi_nUserID;
    
    commit;
    
    po_nItemID := v_nItemID;
               
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_ITEM', v_vSQL);
  end;
  
  /*
  update
  updates an item record
  filtered by item id
  */
  procedure UpdateItem (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemTypeID in number,
    pi_nItemGroupID in number,
    pi_vItemLabel in varchar2,
    pi_vItemDescription in varchar2,
    pi_nLookbackTime in number,
    pi_nActiveID in number,
    pi_vMapID in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(2234) := 'update usr_item t
                                       set
                                       t.ITEM_TYPE_ID = :ItemTypeID,
                                       t.ITEM_GROUP_ID = :ItemGroupID,
                                       t.ITEM_LABEL = :ItemLabel,
                                       t.ITEM_DESCRIPTION = :ItemDescription,
                                       t.LOOKBACK_TIME = :LookbackTime,
                                       t.ACTIVE_ID = :ActiveID,
                                       t.MAP_ID = :MapID, 
                                       t.last_updated_by = :USERID_UPDATED,
                                       t.date_last_updated = sysdate
                                       where t.ITEM_ID = :ItemID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_ITEM', v_vSQL);
    
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nItemTypeID, 
          pi_nItemGroupID,
          pi_vItemLabel, 
          pi_vItemDescription,
          pi_nLookbackTime, 
          pi_nActiveID,
          pi_vMapID,
          pi_nUserID,
          pi_nItemID;
               
     commit;
     
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_ITEM', v_vSQL);
  end;

END PCK_ITEM;

/

--------------------------------------------------------
--  DDL for Package Body PCK_ITEM_COLLECTION
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_ITEM_COLLECTION" AS

  procedure InsertItemCollection (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_nItemID in number,
    pi_nSortOrder in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'insert into usr_item_collection
                                       (collection_item_id,
                                        item_id,
                                        sort_order)
                                       values
                                       (:CollectionItemID,
                                        :ItemID,
                                        :SortOrder)';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('insert_successful', '');
      
    execute immediate v_vSQL
    using pi_nCollectionItemID,
          pi_nItemID,
          pi_nSortOrder;
          
    commit;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('insert_failed', '');
  end;
  
  procedure GetItemCollectionRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
     v_vSQL constant varchar2(1234) := 'select t.*, i.item_label 
                                        from usr_item_collection t, usr_item i 
                                        where t.item_id = i.item_id';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
      
    --open the result set
    open rs for v_vSQL;
          
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  end;
  
  procedure GetItemCollectionRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
     v_vSQL constant varchar2(1234) := 'select t.*, i.item_label
                                        from usr_item_collection t, usr_item i
                                        where t.collection_item_id = :CollectionItemID
                                        and t.item_id = i.item_id
                                        order by t.sort_order asc';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
      
    --open the result set
    open rs
    for v_vSQL
    using pi_nCollectionItemID;
          
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  end;
  
  procedure GetItemColPatItemRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_vPatientID in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_rsItemIDs VAPPCT.PCK_COMMON.refCursor;
    
    v_vSQLItemIDs constant varchar2(1234) :=
      'select t.item_id
      from usr_item_collection t
      where t.collection_item_id = :CollectionItemID';
      
    v_nItemID number;
    
    v_vSQLCount constant varchar2(1234) :=
      'select count(p.pat_item_id)
      from usr_pat_item p
      where p.item_id = :ItemID
      and p.patient_id = :PatientID';
      
    v_nCount number;
    
    v_vSQLPatItemID constant varchar2(1234) :=
      'select t.*
      from (select p.pat_item_id
        from usr_pat_item p
        where p.item_id = :ItemID
        and p.patient_id = :PatientID
        order by p.entry_date desc, p.pat_item_id desc) t
      where rownum = 1';
      
    v_nPatItemID number;
    
    v_vPatItemIDs varchar2(1234) := ',';
                                       
    v_vSQLMostRecent constant varchar2(1234) := 
      'select i.item_label, i.item_type_id, p.*
      from usr_item_collection c, usr_item i, usr_pat_item p
      where c.collection_item_id = :CollectionItemID
      and c.item_id = p.item_id
      and instr(:PatItemIDs, '','' || p.pat_item_id || '','') > 0
      and p.item_id = i.item_id
      order by c.sort_order asc, p.entry_date desc, p.pat_item_id desc';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');

    open v_rsItemIDs
    for v_vSQLItemIDs
    using pi_nCollectionItemID;

    loop
      fetch v_rsItemIDs INTO v_nItemID;
      exit when v_rsItemIDs%notfound;

      execute immediate v_vSQLCount
      into v_nCount
      using v_nItemID, pi_vPatientID;

      if v_nCount > 0
      then
        execute immediate v_vSQLPatItemID
        into v_nPatItemID
        using v_nItemID, pi_vPatientID;

        v_vPatItemIDs := v_vPatItemIDs || v_nPatItemID || ',';
      end if;
    end loop;

    open rs
    for v_vSQLMostRecent
    using pi_nCollectionItemID, v_vPatItemIDs;
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  end;
  
  procedure GetItemColPatICRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_vPatientID in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_rsItemIDs VAPPCT.PCK_COMMON.refCursor;
    
    v_vSQLItemIDs constant varchar2(1234) :=
      'select t.item_id
      from usr_item_collection t
      where t.collection_item_id = :CollectionItemID';
      
    v_nItemID number;
    
    v_vSQLCount constant varchar2(1234) :=
      'select count(p.pat_item_id)
      from usr_pat_item p
      where p.item_id = :ItemID
      and p.patient_id = :PatientID';
      
    v_nCount number;
    
    v_vSQLPatItemID constant varchar2(1234) :=
      'select t.*
      from (select p.pat_item_id
        from usr_pat_item p
        where p.item_id = :ItemID
        and p.patient_id = :PatientID
        order by p.entry_date desc, p.pat_item_id desc) t
      where rownum = 1';
      
    v_nPatItemID number;
    
    v_vPatItemIDs varchar2(1234) := ',';
    
    v_vSQL constant varchar2(1234) :=
      'select c.item_component_label, pic.*
      from usr_item_component c, usr_pat_item pi, usr_pat_item_component pic
      where instr(:PatItemIDs, '','' || pi.pat_item_id || '','') > 0
      and pi.pat_item_id = pic.pat_item_id
      and c.item_component_id = pic.item_component_id
      order by pi.entry_date desc, pi.pat_item_id desc, c.sort_order asc';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
      
    open v_rsItemIDs
    for v_vSQLItemIDs
    using pi_nCollectionItemID;

    loop
      fetch v_rsItemIDs INTO v_nItemID;
      exit when v_rsItemIDs%notfound;

      execute immediate v_vSQLCount
      into v_nCount
      using v_nItemID, pi_vPatientID;

      if v_nCount > 0
      then
        execute immediate v_vSQLPatItemID
        into v_nPatItemID
        using v_nItemID, pi_vPatientID;

        v_vPatItemIDs := v_vPatItemIDs || v_nPatItemID || ',';
      end if;
    end loop;
    
    open rs
    for v_vSQL
    using v_vPatItemIDs;
          
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  end;
  
  procedure GetItemCollectionDI (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_nItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
     v_vSQL constant varchar2(1234) := 'select t.*
                                        from usr_item_collection t
                                        where t.collection_item_id = :CollectionItemID
                                        and t.item_id = :ItemID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
      
    --open the result set
    open rs
    for v_vSQL
    using pi_nCollectionItemID,
          pi_nItemID;
          
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  end;
  
  procedure UpdateItemCollection (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_nItemID in number,
    pi_nSortOrder in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'update USR_ITEM_COLLECTION t
                                       set t.SORT_ORDER = :SortOrder
                                       where t.COLLECTION_ITEM_ID = :CollectionItemID
                                       and t.ITEM_ID = :ItemID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_successful', '');
    
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nSortOrder, 
          pi_nCollectionItemID,
          pi_nItemID;
               
    commit;
     
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_failed', '');
  end;
  
  procedure DeleteItemCollection (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_vItemIDs in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'delete from usr_item_collection t
                                       where t.collection_item_id = :CollectionItemID
                                       and instr(:ItemIDs, '','' || t.item_id || '','') = 0';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('delete_successful', '');
    
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nCollectionItemID,
          pi_vItemIDs;
               
    commit;
     
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('delete_failed', '');
  end;
  
  procedure DeleteItemCollection (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    pi_nItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'delete from usr_item_collection t
                                       where t.collection_item_id = :CollectionItemID
                                       and t.ITEM_ID = :ItemID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('delete_successful', '');
    
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nCollectionItemID,
          pi_nItemID;
               
    commit;
     
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('delete_failed', '');
  end;
  
  procedure DeleteItemCollection (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nCollectionItemID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'delete from usr_item_collection t
                                       where t.collection_item_id = :CollectionItemID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('delete_successful', '');
    
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nCollectionItemID;
               
    commit;
     
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('delete_failed', '');
  end;

END PCK_ITEM_COLLECTION;

/

--------------------------------------------------------
--  DDL for Package Body PCK_ITEM_COMPONENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_ITEM_COMPONENT" AS

  /*
  select
  returns all the item components for an item
  filtered by item id
  */
  procedure GetItemComponentRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nActiveFilter in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(4000) := 'select uic.*,  
                                             sa.ACTIVE_LABEL, 
                                             itm.item_label, 
                                             itm.item_description, 
                                             itm.item_group_id, 
                                             itm.item_type_id, 
                                             itmtype.item_type_label, 
                                             ig.item_group_label 
                                        from usr_item_component uic,  
                                             stat_active sa, 
                                             usr_item itm, 
                                             stat_item_type itmtype, 
                                             usr_item_group ig 
                                        where uic.ITEM_ID = :ItemID 
                                          and uic.ACTIVE_ID = sa.ACTIVE_ID 
                                          and itm.item_id = uic.item_id 
                                          and itmtype.item_type_id = itm.item_type_id 
                                          and ig.item_group_id = itm.item_group_id
                                          and instr(:ActiveFilter, '','' || uic.ACTIVE_ID || '','') > 0';
                                          
    v_vActiveFilter varchar2(5) := '';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_IC', v_vSQL);
    
    if (pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterActive)
    then
      v_vActiveFilter := ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterActive) || ',';
    elsif (pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterInactive)
    then
      v_vActiveFilter := ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterInactive) || ',';
    else
      v_vActiveFilter := ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterActive) || ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterInactive) || ',';
    end if;
      
    open rs
    for v_vSQL
    using pi_nItemID,
          v_vActiveFilter;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_IC', v_vSQL);
  end;
  
  procedure GetItemComponentDIRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_vItemComponentLabel in varchar2,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(4000) := 'select uic.*,  
                                             sa.ACTIVE_LABEL, 
                                             itm.item_label, 
                                             itm.item_description, 
                                             itm.item_group_id, 
                                             itm.item_type_id, 
                                             itmtype.item_type_label, 
                                             ig.item_group_label 
                                        from usr_item_component uic,  
                                             stat_active sa, 
                                             usr_item itm, 
                                             stat_item_type itmtype, 
                                             usr_item_group ig 
                                        where uic.ITEM_ID = :ItemID 
                                          and lower(uic.ITEM_COMPONENT_LABEL) = lower(:ItemComponentLabel)
                                          and uic.ACTIVE_ID = sa.ACTIVE_ID 
                                          and itm.item_id = uic.item_id 
                                          and itmtype.item_type_id = itm.item_type_id 
                                          and ig.item_group_id = itm.item_group_id';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
      
    open rs
    for v_vSQL
    using pi_nItemID,
          pi_vItemComponentLabel;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  end;
  
  /*
  select
  returns all the item components outer joined with the state and range for an item
  filtered by item id
  */
  procedure GetItemComponentOJRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nActiveFilter in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(4000) := 'select uic.*, 
                                        sa.ACTIVE_LABEL, 
                                        uics.IC_STATE_ID, 
                                        uics.STATE_ID,
                                        uicr.IC_RANGE_ID, 
                                        uicr.UNITS, 
                                        uicr.LEGAL_MIN, 
                                        uicr.CRITICAL_LOW,
                                        uicr.LOW, 
                                        uicr.HIGH, 
                                        uicr.CRITICAL_HIGH, 
                                        uicr.LEGAL_MAX, 
                                        itm.item_label, 
                                        itm.item_description, 
                                        itm.item_group_id, 
                                        itm.item_type_id, 
                                        itmtype.item_type_label, 
                                        ig.item_group_label
                                        
                                  from  usr_item_component uic, 
                                        stat_active sa, 
                                        usr_ic_state uics, 
                                        usr_ic_range uicr,
                                        usr_item itm,
                                        stat_item_type itmtype,
                                        usr_item_group ig
                                  
                                  where uic.ITEM_ID = :ItemID
                                        and uic.ACTIVE_ID = sa.ACTIVE_ID
                                        and uic.ITEM_ID = uics.ITEM_ID(+)
                                        and uic.ITEM_COMPONENT_ID = uics.ITEM_COMPONENT_ID(+)
                                        and uic.ITEM_ID = uicr.ITEM_ID(+)
                                        and uic.ITEM_COMPONENT_ID = uicr.ITEM_COMPONENT_ID(+) 
                                        and itm.item_id = uic.item_id 
                                        and itmtype.item_type_id = itm.item_type_id 
                                        and ig.item_group_id = itm.item_group_id 
                                        and instr(:ActiveFilter, '','' || uic.ACTIVE_ID || '','') > 0
                                        
                               order by uic.ACTIVE_ID, uic.SORT_ORDER';
                               
    v_vActiveFilter varchar2(5) := '';                               
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_IC', v_vSQL);
    
    if (pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterActive)
    then
      v_vActiveFilter := ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterActive) || ',';
    elsif (pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterInactive)
    then
      v_vActiveFilter := ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterInactive) || ',';
    else
      v_vActiveFilter := ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterActive) || ',' || to_char(VAPPCT.PCK_COMMON.c_nFilterInactive) || ',';
    end if;
      
    open rs
    for v_vSQL
    using pi_nItemID,
          v_vActiveFilter;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_IC', v_vSQL);
  end;
  
  /*
  insert
  inserts the item component described to an item
  */
  procedure InsertItemComponent (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_vItemComponentLabel in varchar2,
    pi_nSortOrder in number,
    pi_nActiveID in number,
    po_nItemComponentID out number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'insert into usr_item_component t(
                                       t.ITEM_ID,
                                       t.ITEM_COMPONENT_ID,
                                       t.ITEM_COMPONENT_LABEL,
                                       t.SORT_ORDER,
                                       t.ACTIVE_ID)
                                       VALUES(
                                       :ItemID,
                                       :ItemComponentID,
                                       :ItemComponentLabel,
                                       :SortOrder,
                                       :ActiveID)';
                                       
    v_nItemComponentID constant number := VAPPCT.PCK_COMMON.GetNextSequenceValue('SEQ_ITEM_COMPONENT_ID');
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_IC', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nItemID, 
          v_nItemComponentID, 
          pi_vItemComponentLabel,
          pi_nSortOrder,
          pi_nActiveID;
    
    commit;
    
    po_nItemComponentID := v_nItemComponentID;
               
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_IC', v_vSQL);
  end;
  
  /*
  delete
  deletes all the item components for an item that are not found in the item components string
  filtered by item id and item component id
  */
  procedure DeleteItemComponents(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nItemID                in number,
      pi_vItemComponentIDs      in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'DELETE FROM VAPPCT.usr_item_component t
                                       WHERE t.ITEM_ID = :ItemID
                                       AND instr(:ItemComponentIDs, '','' || t.ITEM_COMPONENT_ID || '','') = 0';

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_DELETE_IC', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nItemID,
          pi_vItemComponentIDs;
    
    commit;
       
  exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_DELETE_IC', v_vSQL);

  end;
  
  /*
  update
  updates an item component in the database
  filtered by item id and item component id
  */
  procedure UpdateItemComponent (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    pi_vItemComponentLabel in varchar2,
    pi_nSortOrder in number,
    pi_nActiveID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'update usr_item_component t
                                       set t.ITEM_COMPONENT_LABEL = :ItemComponentLabel,
                                           t.SORT_ORDER = :SortOrder,
                                           t.ACTIVE_ID = :ActiveID
                                       where t.ITEM_ID = :ItemID
                                       and t.ITEM_COMPONENT_ID = :ItemComponentID';
                                       
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_IC', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_vItemComponentLabel,
          pi_nSortOrder,
          pi_nActiveID,
          pi_nItemID, 
          pi_nItemComponentID; 
          
    commit;
               
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_IC', v_vSQL);
  end;
  
  /*
  select
  gets the state record for an item component
  filtered by item id and component id
  */
  procedure GetICStateIDRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(1234) := 'select uics.*, ss.STATE_LABEL
                                       from usr_ic_state uics, stat_state ss
                                       where uics.ITEM_ID = :ItemID
                                       and uics.ITEM_COMPONENT_ID = :ItemComponentID
                                       and uics.STATE_ID = ss.STATE_ID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_IC', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nItemID,
          pi_nItemComponentID;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_IC', v_vSQL);
  end;
  
  /*
  insert
  inserts the state described for an item component
  */
  procedure InsertICState (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    pi_nStateID in number,
    po_nICStateID out number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'insert into usr_ic_state t(
                                       t.ITEM_ID,
                                       t.ITEM_COMPONENT_ID,
                                       t.IC_STATE_ID,
                                       t.STATE_ID)
                                       VALUES(
                                       :ItemID,
                                       :ItemComponentID,
                                       :ICStateID,
                                       :StateID)';
                                       
    v_nICStateID constant number := VAPPCT.PCK_COMMON.GetNextSequenceValue('SEQ_IC_STATE_ID');
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_IC', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nItemID, 
          pi_nItemComponentID,
          v_nICStateID,
          pi_nStateID;
    
    commit;
    
    po_nICStateID := v_nICStateID;
               
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_IC', v_vSQL);
  end;
  
  /*
  delete
  deletes all the state records that belong to an item component not in the item components list
  filtered by item id and item component id
  */
  procedure DeleteItemComponentStates(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nItemID                in number,
      pi_vItemComponentIDs      in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'DELETE FROM VAPPCT.usr_ic_state t
                                       WHERE t.ITEM_ID = :ItemID
                                       AND instr(:ItemComponentIDs, '','' || t.ITEM_COMPONENT_ID || '','') = 0';

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_DELETE_ICS', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nItemID,
          pi_vItemComponentIDs;
    
    commit;
       
  exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_DELETE_ICS', v_vSQL);

  end;
  
  /*
  update
  updates a state record
  filtered by item id, item component id and ic state id
  */
  procedure UpdateICState (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    pi_nICStateID in number,
    pi_nStateID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'update usr_ic_state t
                                         set t.STATE_ID = :StateID 
                                       where t.ITEM_ID = :ItemID
                                         and t.ITEM_COMPONENT_ID = :ItemComponentID
                                         and t.IC_STATE_ID = :ICStateID';
                                       
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_IC', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nStateID,
          pi_nItemID, 
          pi_nItemComponentID,
          pi_nICStateID;
          
    commit;    
               
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_IC', v_vSQL);
  end;
  
  /*
  select
  gets the range record for an item component
  filtered by item id and item component id
  */
  procedure GetICRangeIDRS (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(1234) := 'select uicr.*
                                       from usr_ic_range uicr
                                       where uicr.ITEM_ID = :ItemID
                                       and uicr.ITEM_COMPONENT_ID = :ItemComponentID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_IC', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nItemID,
          pi_nItemComponentID;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_IC', v_vSQL);
  end;
  
  /*
  insert
  inserts a range record for an item component
  */
  procedure InsertICRange (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    pi_vUnits in varchar2,
    pi_nLegalMin in number,
    pi_nCriticalLow in number,
    pi_nLow in number,
    pi_nHigh in number,
    pi_nCriticalHigh in number,
    pi_nLegalMax in number,
    po_nICRangeID out number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'insert into usr_ic_range t(
                                       t.ITEM_ID,
                                       t.ITEM_COMPONENT_ID,
                                       t.IC_RANGE_ID,
                                       t.UNITS,
                                       t.LEGAL_MIN,
                                       t.CRITICAL_LOW,
                                       t.LOW,
                                       t.HIGH,
                                       t.CRITICAL_HIGH,
                                       t.LEGAL_MAX)
                                       VALUES(
                                       :ItemID,
                                       :ItemComponentID,
                                       :ICRangeID,
                                       :Units,
                                       :LegalMin,
                                       :CriticalLow,
                                       :Low,
                                       :High,
                                       :CriticalHigh,
                                       :LegalMax)';
                                       
    v_nICRangeID constant number := VAPPCT.PCK_COMMON.GetNextSequenceValue('SEQ_IC_RANGE_ID');
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_IC', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nItemID, 
          pi_nItemComponentID,
          v_nICRangeID,
          pi_vUnits,
          pi_nLegalMin,
          pi_nCriticalLow,
          pi_nLow,
          pi_nHigh,
          pi_nCriticalHigh,
          pi_nLegalMax;
    
    commit;
    
    po_nICRangeID := v_nICRangeID;
               
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_IC', v_vSQL);
  end;
  
  /*
  delete
  deletes all the range records that are not in the item component ids list
  filtered by item id and item component id
  */
  procedure DeleteItemComponentRanges(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nItemID                in number,
      pi_vItemComponentIDs      in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'DELETE FROM VAPPCT.usr_ic_range t
                                       WHERE t.ITEM_ID = :ItemID
                                       AND instr(:ItemComponentIDs, '','' || t.ITEM_COMPONENT_ID || '','') = 0';

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_DELETE_ICR', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nItemID,
          pi_vItemComponentIDs;
    
    commit;
       
  exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_DELETE_ICR', v_vSQL);

  end;

  /*
  update
  updates a range record for an item component
  filtered by item id, item component id and ic range id
  */
  procedure UpdateICRange (
    pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nItemID in number,
    pi_nItemComponentID in number,
    pi_nICRangeID in number,
    pi_vUnits in varchar2,
    pi_nLegalMin in number,
    pi_nCriticalLow in number,
    pi_nLow in number,
    pi_nHigh in number,
    pi_nCriticalHigh in number,
    pi_nLegalMax in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2)
  is
    v_vSQL constant varchar2(1234) := 'update usr_ic_range t
                                       set t.UNITS = :Units,
                                           t.LEGAL_MIN = :LegalMin,
                                           t.CRITICAL_LOW = :CriticalLow,
                                           t.LOW = :Low,
                                           t.HIGH =  :High,
                                           t.CRITICAL_HIGH = :CriticalHigh,
                                           t.LEGAL_MAX = :LegalMax 
                                       where t.ITEM_ID = :ItemID
                                       and   t.ITEM_COMPONENT_ID = :ItemComponentID
                                       and   t.IC_RANGE_ID = :ICRangeID';
                                       
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_IC', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_vUnits,
          pi_nLegalMin,
          pi_nCriticalLow,
          pi_nLow,
          pi_nHigh,
          pi_nCriticalHigh,
          pi_nLegalMax,
          pi_nItemID, 
          pi_nItemComponentID,
          pi_nICRangeID;
          
    commit;
               
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_IC', v_vSQL);
  end;
  
END PCK_ITEM_COMPONENT;

/

--------------------------------------------------------
--  DDL for Package Body PCK_LAB
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_LAB" AS

/*
saves a lab test to the database, used for mapping
*/
procedure SaveLabTest(
      pi_vSessionID          in varchar2,
      pi_vSessionClientIP    in varchar2,
      pi_nUserID             in number,
      pi_nXferSystemID       in number,
      pi_vLabTestID          in varchar2, 
      pi_vName               in varchar2,
      pi_vHIREF              in varchar2,
      pi_vLOREF              in varchar2,
      pi_vREFRANGE           in varchar2,
      pi_vUnits              in varchar2,
      pi_vDescription        in varchar2,
      pi_vLOINC              in varchar2,
      po_nStatusCode         out number,
      po_vStatusComment      out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_lab_test( lab_test_id,
                               lab_test_name,
                               lab_test_hiref,
                               lab_test_loref,
                               lab_test_refrange,
                               lab_test_units,
                               lab_test_description,
                               loinc,
                               xfer_system_id,
                               xfer_date
                          ) 
          values(:lab_test_id,
                 :lab_test_name,
                 :lab_test_hiref, 
                 :lab_test_loref,
                 :lab_test_refrange,
                 :lab_test_units,
                 :lab_test_description,
                 :loinc,
                 :XFER_SYSTEM_ID,
                 sysdate)';
               
     v_vSQLUpdate constant varchar2(4000) :=  
         'update VAPPCT.utl_lab_test 
          set lab_test_name = :lab_test_name, 
              lab_test_hiref = :lab_test_hiref, 
              lab_test_loref = :lab_test_loref,
              lab_test_refrange = :lab_test_refrange,
              lab_test_units = :lab_test_units,
              lab_test_description = :lab_test_description,
              loinc = :loinc, 
              xfer_system_id = :XFER_SYSTEM_ID, 
              xfer_date = sysdate 
          where lab_test_id = :lab_test_id';
                          
     v_vSQLCount varchar2(4000) := '';
     v_nCount number := 0;
     
  begin
     
     --todo:error messages  
     v_nCount := 0;
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_LOGIN', '');
    
     --check that a record exisits
     v_vSQLCount := 'select count(*) from VAPPCT.utl_lab_test ';
     v_vSQLCount := v_vSQLCount || 'WHERE lab_test_id = ''' || pi_vLabTestID || '''';
     v_nCount := to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
     
     --insert if the record is not there
     if (v_nCount < 1) then
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING   pi_vLabTestID, 
                pi_vName,
                pi_vHIREF,
                pi_vLOREF,
                pi_vREFRANGE,
                pi_vUnits,
                pi_vDescription,
                pi_vLOINC,
                pi_nXferSystemID;    
        commit;
    
      else
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLUpdate
        USING pi_vName,
              pi_vHIREF,
              pi_vLOREF,
              pi_vREFRANGE,
              pi_vUnits,
              pi_vDescription,
              pi_vLOINC,
              pi_nXferSystemID,
              pi_vLabTestID; 
        commit;
      
      end if;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_LOGIN', '');
  
end;

/*****
Description: Gets all lab tests matching search criteria
******/
procedure GetLabTestRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vSearch                in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
     v_vSQL varchar2(1000) :=  
      'SELECT t.* 
       FROM utl_lab_test t 
       where upper(t.lab_test_name) like upper(nvl(:LAB_TEST_NAME, t.lab_test_name))
       order by upper(t.lab_test_name) asc';    
    
    v_vSearch varchar2(1000) := '';
    
begin

    --format for '%like%'
    v_vSearch := '%' || upper(pi_vSearch) || '%';
    
    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL 
    using v_vSearch;
    
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;

END PCK_LAB;

/

--------------------------------------------------------
--  DDL for Package Body PCK_MDWS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_MDWS" AS

procedure GetZZTestRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vMDWSCall              in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
      
is
    
     v_vSQL varchar2(4000) :=  
      'select t2.patient_id, T2.LAST_NAME, T2.fIRST_NAME, t.MDWSCALL, t.TEST, t.VALUE, t.test_id from zz_tester t, utl_patient t2
      where t.patient_id = t2.patient_id and t.mdwscall = :MDWSCall
      order by t.patient_id asc';    
begin

    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_vMDWSCall;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;
      
procedure InsertZZTest(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_vMDWSCall              in varchar2,
      pi_vTest                  in varchar2,
      pi_vValue                 in varchar2,
      pi_vTestID                in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
 
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.zz_tester( patient_id,
                            mdwscall,
                            test,
                            value,
                            test_id
                          ) 
          values(:patient_id,
                 :mdwscall,
                 :test,
                 :value,
                 :test_id)';
     
  begin
     
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_LOGIN', '');
    
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_vPatientID, 
              pi_vMDWSCall, 
              pi_vTest,
              pi_vValue,
              pi_vTestID;    
        commit;
        
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_LOGIN', '');
  
end;
     
      
      
/*****
Description:
Gets all MDWS patients transferred to our system
******/
procedure GetMDWSPatientRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
     v_vSQL varchar2(500) :=  
      'SELECT t.* 
       FROM utl_patient t 
       where t.xfer_system_id = 1 
       order by t.xfer_date desc';    
begin

    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;


END PCK_MDWS;

/

--------------------------------------------------------
--  DDL for Package Body PCK_NOTE_TITLE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_NOTE_TITLE" AS

/*
saves a note title to the database
*/
procedure SaveNoteTitle(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nNoteTitleTag          in number, 
      pi_vNoteTitleLabel        in varchar2,
      pi_vNoteTitleDetails      in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_note_title(note_title_tag,
                               note_title_label,
                               note_title_details,
                               xfer_system_id,
                               xfer_date
                          ) 
          values(:note_title_tag,
                 :NOTE_TITLE_LABEL,
                 :NOTE_TITLE_DETAILS, 
                 :XFER_SYSTEM_ID,
                 sysdate)';
               
     v_vSQLUpdate constant varchar2(4000) :=  
         'update VAPPCT.utl_note_title 
          set note_title_details = :NOTE_TITLE_DETAILS, 
              note_title_tag = :NOTE_TITLE_TAG, 
              xfer_system_id = :XFER_SYSTEM_ID, 
              xfer_date = sysdate 
          where note_title_label = :NOTE_TITLE_LABEL';
                          
     v_vSQLCount varchar2(4000) := '';
     v_nCount number := 0;
     
  begin
     
     --todo:error messages  
     v_nCount := 0;
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_LOGIN', '');
    
     --check that a record exisits
     v_vSQLCount := 'select count(*) from VAPPCT.utl_note_title ';
     v_vSQLCount := v_vSQLCount || 'WHERE note_title_label = ''' || pi_vNoteTitleLabel || '''';
     v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
     
     --insert if the record is not there
     if (v_nCount < 1) then
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nNoteTitleTag, 
              pi_vNoteTitleLabel,
              pi_vNoteTitleDetails,
              pi_nXferSystemID;    
        commit;
    
      else
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLUpdate
        USING pi_vNoteTitleDetails,
              pi_nNoteTitleTag,
              pi_nXferSystemID,
              pi_vNoteTitleLabel; 
        commit;
      
      end if;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_LOGIN', '');
  
end;

/*****
Description: Gets all note tiles
******/
procedure GetNoteTitleRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
     v_vSQL varchar2(500) :=  
      'SELECT t.* 
       FROM utl_note_title t 
       order by upper(t.note_title_label) asc';    
begin

    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;


END PCK_NOTE_TITLE;

/

--------------------------------------------------------
--  DDL for Package Body PCK_PATIENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_PATIENT" is

/*****
Description:
Inserts or updates a patient in utl_patient.
******/
procedure SavePatient (   pi_vSessionID        in varchar2,
                          pi_vSessionClientIP  in varchar2,
                          pi_nUserID           in number,
                          pi_nXferSystemID     in number,
                          pi_vPatientID        in varchar2,
                          pi_nProviderUserID   in number,
                          pi_nTeamID           in number,
                          pi_nSpecialtyID      in number,
                          pi_nWardID           in number,
                          pi_nClinicID         in number,
                          pi_vSSN              in varchar2,
                          pi_dtDOB             in date,
                          pi_vFirstName        in varchar2,
                          pi_vFullName         in varchar2,
                          pi_vLastName         in varchar2,
                          pi_vMI               in varchar2,
                          pi_nSex              in number, 
                          po_nStatusCode       out number,
                          po_vStatusComment    out varchar2
                       )
is
    --create dynamic sql for the insert
    v_vSQLInsert constant varchar2(3000) := 
      'INSERT INTO utl_patient( 
              patient_id,
              ssn,
              date_of_birth,
              first_name,
              full_name,
              last_name,
              middle_initial,
              sex_id,
              xfer_system_id,
              xfer_date) 
              VALUES( 
              :patient_id,
              :ssn,
              :dob,
              :first_name,
              :full_name,
              :last_name,
              :middle_initial,
              :sex_id,
              :xfer_system_id,
              sysdate 
               )';
    
    v_vSQLUpdate constant varchar2(3000) := 
      'update utl_patient
          set ssn = :ssn,
              date_of_birth = :dob,
              first_name = :first_name,
              full_name = :full_name,
              last_name = :last_name,
              middle_initial = :middle_initial,
              sex_id = :sex_id,
              xfer_system_id = :xfer_system_id,  
              xfer_date = sysdate 
          where patient_id = :patient_id';

    v_vSQLInsertUser  constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_user_patient( patient_id,
                                   user_id,
                                   date_added )
          values( :patient_id,
                  :user_id,
                  sysdate)';
                  
    v_vSQLInsertTeam  constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_team_patient( patient_id,
                                   team_id )
          values( :patient_id,
                  :team_id )';
                  
    v_vSQLInsertSpecialty  constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_specialty_patient( patient_id,
                                        specialty_id )
          values( :patient_id,
                  :specialty_id )';
                  
    v_vSQLInsertWard  constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_ward_patient( patient_id,
                                   ward_id )
          values( :patient_id,
                  :ward_id )';
                  
    v_vSQLInsertClinic  constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_clinic_patient( patient_id,
                                     clinic_id )
          values( :patient_id,
                  :clinic_id )';
                  
   v_nCount number;
   v_vSQLCount varchar2(2000);
   
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_IG', v_vSQLInsert);
    v_nCount := 0;
    v_vSQLCount := '';
    
    --get count
    v_vSQLCount := 'SELECT count(*) FROM utl_patient WHERE patient_id = ''';
    v_vSQLCount := v_vSQLCount || to_char(pi_vPatientID);
    v_vSQLCount := v_vSQLCount || '''';
    
    --get existing item,ts,os,ds ids 
    v_nCount := to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
   
    if v_nCount < 1 then
      
      --insert
      --execute the sql with bind vars and commit
      EXECUTE IMMEDIATE v_vSQLInsert 
      USING  pi_vPatientID,
             pi_vSSN,
             pi_dtDOB,
             pi_vFirstName,
             pi_vFullName,
             pi_vLastName,
             pi_vMI,
             pi_nSex,
             pi_nXferSystemID; 
      
      commit;
      
    else
    
      --update
      --execute the sql with bind vars and commit
      EXECUTE IMMEDIATE v_vSQLUpdate 
      USING  pi_vSSN,
             pi_dtDOB,
             pi_vFirstName,
             pi_vFullName,
             pi_vLastName,
             pi_vMI,
             pi_nSex,
             pi_nXferSystemID,
             pi_vPatientID; 
      commit;
        
    end if;
    
    --insert user_patient record if needed
    if pi_nprovideruserid > 0 then
    
      v_vSQLCount := 'SELECT count(*) FROM utl_user_patient WHERE patient_id = ''';
      v_vSQLCount := v_vSQLCount || to_char(pi_vPatientID);
      v_vSQLCount := v_vSQLCount || '''' || ' AND user_id = ' || pi_nprovideruserid;
    
      v_nCount := to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
    
      if v_nCount < 1 then 
        EXECUTE IMMEDIATE v_vSQLInsertUser 
        USING  pi_vPatientID,
               pi_nProviderUserID; 
        commit;
      end if;
   
   end if;
   
   --insert utl_team_patient if needed
   if pi_nTeamID > 0 then
    
      v_vSQLCount := 'SELECT count(*) FROM utl_team_patient WHERE patient_id = ''';
      v_vSQLCount := v_vSQLCount || to_char(pi_vPatientID);
      v_vSQLCount := v_vSQLCount || '''' || ' AND team_id = ' || pi_nTeamID;
    
      v_nCount := to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
    
      if v_nCount < 1 then 
        EXECUTE IMMEDIATE v_vSQLInsertTeam 
        USING  pi_vPatientID,
               pi_nTeamID; 
        commit;
      end if;
   
   end if;
   
   --insert utl_specialty_patient if needed
   if pi_nSpecialtyID > 0 then
    
      v_vSQLCount := 'SELECT count(*) FROM utl_specialty_patient WHERE patient_id = ''';
      v_vSQLCount := v_vSQLCount || to_char(pi_vPatientID);
      v_vSQLCount := v_vSQLCount || '''' || ' AND specialty_id = ' || pi_nSpecialtyID;
    
      v_nCount := to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
    
      if v_nCount < 1 then 
        EXECUTE IMMEDIATE v_vSQLInsertSpecialty
        USING  pi_vPatientID,
               pi_nSpecialtyID; 
        commit;
      end if;
   
   end if;
   
   --insert utl_ward_patient if needed
   if pi_nWardID > 0 then
    
      v_vSQLCount := 'SELECT count(*) FROM utl_ward_patient WHERE patient_id = ''';
      v_vSQLCount := v_vSQLCount || to_char(pi_vPatientID);
      v_vSQLCount := v_vSQLCount || '''' || ' AND ward_id = ' || pi_nWardID;
    
      v_nCount := to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
    
      if v_nCount < 1 then 
        EXECUTE IMMEDIATE v_vSQLInsertWard
        USING  pi_vPatientID,
               pi_nWardID; 
        commit;
      end if;
   
   end if;
   
    --insert utl_clinic_patient if needed
   if pi_nClinicID > 0 then
    
      v_vSQLCount := 'SELECT count(*) FROM utl_clinic_patient WHERE patient_id = ''';
      v_vSQLCount := v_vSQLCount || to_char(pi_vPatientID);
      v_vSQLCount := v_vSQLCount || '''' || ' AND clinic_id = ' || pi_nClinicID;
    
      v_nCount := to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
    
      if v_nCount < 1 then 
        EXECUTE IMMEDIATE v_vSQLInsertClinic
        USING  pi_vPatientID,
               pi_nClinicID; 
        commit;
      end if;
   
   end if;
   
   
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      --todo:
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE', v_vSQLInsert);
end;

/*****
Description:
gets a ref cursor of a patients by user.
******/
procedure GetUserPatientsRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nProviderUserID        in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    v_vSQL constant varchar2(4000) :=  
            'select distinct t.*, 
                pck_common.GetAge(t.date_of_birth) as patient_age, 
                t2.sex_label, 
                substr(t.ssn, length(t.ssn)-3) as ssn_last_4, 
                t2.sex_abbreviation
                       
            from utl_patient t, 
                 stat_sex t2,
                 usr_pat_checklist t3 
                       
            where t.sex_id = t2.sex_id 
            and t.patient_id = t3.patient_id(+) 
            and t.patient_id in (select patient_id 
                                  from utl_user_patient p 
                                  where p.user_id = :USER_ID)
            
            order by upper(t.last_name), upper(t.first_name)';
                                       
    v_vLastName varchar2(255);
    v_vLSSN varchar2(200);
          
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT', '');

    --open the result set
    open rs for v_vSQL
    using pi_nProviderUserID;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT', '');
  
end;

/*****
Description:
gets a ref cursor of a patients by search criteria.
******/
procedure GetPatientSearchRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_dtEventStartDate       in date,
      pi_dtEventEndDate         in date,
      pi_vLastName              in varchar2,
      pi_vLSSN                  in varchar2,
      pi_nChecklistID           in number,
      pi_nChecklistStatusID     in number,
      pi_vUsrID                 in number,
      pi_vTeamID                in varchar2,
      pi_vWardID                in varchar2,
      pi_vSpecialtyID           in varchar2,
      pi_vClinicID              in varchar2,
      pi_nServiceID             in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    v_vSQL constant long :=  
            'select distinct t.*, 
            pck_common.GetAge(t.date_of_birth) as patient_age, 
            t2.sex_label, 
            substr(t.ssn, length(t.ssn)-3) as ssn_last_4, 
            t2.sex_abbreviation
                       
            from utl_patient t, 
                 stat_sex t2,
                 usr_pat_checklist t3 
                       
            where t.sex_id = t2.sex_id 
            and t.patient_id = t3.patient_id(+) 
                                                                     
            and upper(t.last_name) like upper(nvl(:LAST_NAME, t.last_name))
                       
            and ((upper(substr(t.last_name, 1,1))
                  ||substr(t.ssn, length(t.ssn)-3))) 
                  like nvl(:LSSN,((upper(substr(t.last_name, 1,1))
                  ||substr(t.ssn, length(t.ssn)-3))))
                      
            and   ( (t3.procedure_date    
                    between :FROM_DATE 
                        and :TO_DATE ) 
                    or 
                        :FROM_DATE2 is null )
                                    
            and   ( (t3.checklist_id = :CHECKLIST_ID)
                      or
                    :CHECKLIST_ID2 = -1)
                                
            and   ( (t3.checklist_state_id = :CHECKLIST_STATE_ID)
                      or
                    :CHECKLIST_STATE_ID2 = -1)
                    
            and   ( t.patient_id in (select tp.patient_id 
                                     from utl_team_patient tp  
                                    where tp.team_id = decode(:TEAM_ID,
                                                              -1,
                                                              tp.team_id,
                                                              :TEAM_ID2)) or :TEAM_ID3 = -1) 
            
           and   ( t.patient_id in (select wp.patient_id 
                                    from utl_ward_patient wp  
                                    where wp.ward_id = decode(:WARD_ID,
                                                              -1,
                                                              wp.ward_id,
                                                              :WARD_ID2)) or :WARD_ID3 = -1) 
                                                              
           and   ( t.patient_id in (select sp.patient_id 
                                    from utl_specialty_patient sp  
                                    where sp.specialty_id = decode(:SPECIALTY_ID,
                                                                   -1,
                                                                    sp.specialty_id,
                                                                    :SPECIALTY_ID2)) or :SPECIALTY_ID3 = -1) 
           and   ( t.patient_id in (select cp.patient_id 
                                    from utl_clinic_patient cp  
                                    where cp.clinic_id = decode(:CLINIC_ID,
                                                                   -1,
                                                                    cp.clinic_id,
                                                                    :CLINIC_ID2)) or :CLINIC_ID3 = -1) 
        
           
           and   ( t.patient_id in (select up.patient_id 
                                     from utl_user_patient up  
                                    where up.user_id = decode(:USR_ID,
                                                              -1,
                                                              up.user_id,
                                                              :USR_ID2)) or :USR_ID3 = -1) 
          
           and   ( t3.checklist_id in (select cl.checklist_id 
                                         from usr_checklist cl  
                                        where cl.service_id = decode(:SERVICE_ID,
                                                                     -1,
                                                                     cl.service_id,
                                                                     :SERVICE_ID2)) or :SERVICE_ID3 = -1) 
                    
           order by upper(t.last_name), upper(t.first_name)';
                                       
    v_vLastName varchar2(255);
    v_vLSSN varchar2(200);
    v_nTeamID number;
    v_nWardID number;
    v_nSpecialtyID number;
    v_nUsrID number;
    v_nClinicID number;
          
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT', '');

    v_nTeamID := -1;
    if pi_vTeamID is not null then
      v_nTeamID := to_number(pi_vTeamID);    
    end if;
    
    v_nWardID := -1;
    if pi_vWardID is not null then
      v_nWardID := to_number(pi_vWardID);    
    end if;
    
    v_nSpecialtyID := -1;
    if pi_vSpecialtyID is not null then
      v_nSpecialtyID := to_number(pi_vSpecialtyID);    
    end if;
    
    v_nClinicID := -1;
    if pi_vClinicID is not null then
      v_nClinicID := to_number(pi_vClinicID);    
    end if;
    
    v_nUsrID := -1;
    if pi_vUsrID is not null then
      v_nUsrID := to_number(pi_vUsrID);    
    end if;
        
    --format for '%like%'
    v_vLastName := '%' || upper(pi_vLastName) || '%';
    v_vLSSN := '%' || upper(pi_vLSSN) || '%';
    
    --open the result set
    open rs for v_vSQL
    using v_vLastName,
          v_vLSSN,
          pi_dtEventStartDate,
          pi_dtEventEndDate,
          pi_dtEventEndDate,
          pi_nChecklistID,
          pi_nChecklistID,
          pi_nChecklistStatusID,
          pi_nChecklistStatusID,
          v_nTeamID,
          v_nTeamID,
          v_nTeamID,
          v_nWardID,
          v_nWardID,
          v_nWardID,
          v_nSpecialtyID,
          v_nSpecialtyID,
          v_nSpecialtyID,
          v_nClinicID,
          v_nClinicID,
          v_nClinicID,
          v_nUsrID,
          v_nUsrID,
          v_nUsrID,
          pi_nServiceID,
          pi_nServiceID,
          pi_nServiceID;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT', '');
  
end;


procedure GetItemGroupsByCriteriaRS(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_dtEventStartDate       in date,
      pi_dtEventEndDate         in date,
      pi_nChecklistID           in number,
      pi_nChecklistStatusID     in number,
      pi_nServiceID             in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
  
-- Find distinct Item Groups that meet search criteria
--'select distinct(ui.item_group_id), uig.item_group_label
v_vSQL constant varchar2(4000) :=
        'select DISTINCT uig.item_group_id,REPLACE(uig.item_group_label,'' '',''_'')
         from usr_pat_checklist upc, usr_pat_cl_item upci, usr_checklist uc, 
              usr_item ui, usr_item_group uig, utl_patient up
              where upci.pat_cl_id in
              (
                select t3.pat_cl_id                      
                from usr_pat_checklist t3            
                  where ((t3.procedure_date    
                      between :FROM_DATE 
                          and :TO_DATE ) 
                      or 
                          :FROM_DATE2 is null )                
                  and ((t3.checklist_id = :CHECKLIST_ID) or
                          :CHECKLIST_ID2 = -1)                
                  and ((t3.checklist_state_id = :CHECKLIST_STATE_ID)  or
                        :CHECKLIST_STATE_ID2 = -1)
               )
               
              and upc.checklist_id in 
              (
                select t4.checklist_id                       
                from usr_checklist t4            
                  where ((t4.service_id = :SERVICE_ID)  or
                        :SERVICE_ID2 = -1)
              )
              
              and upci.pat_cl_id = upc.pat_cl_id
              and upci.checklist_id = uc.checklist_id
              and upci.item_id = ui.item_id
              and upci.patient_id = up.patient_id
              and uig.item_group_id = ui.item_group_id'; 

begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_GET_MULITPATIENT_ITEM_GROUPS', v_vSQL);
       
   open rs
   for v_vSQL
   using 
        pi_dtEventStartDate,
        pi_dtEventEndDate,
        pi_dtEventEndDate,
        pi_nChecklistID,
        pi_nChecklistID,
        pi_nChecklistStatusID,
        pi_nChecklistStatusID,
        pi_nServiceID,
        pi_nServiceID;       
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_GET_MULTIPATIENT_ITEM_GROUPS', v_vSQL);
  
end;
  
/*Function used to return the worst item group state field as part of the result set*/
function getSummaryItemGroupState(
 pi_nPatCLID               in number,
 pi_nItemGroupID           in number
)
return number
is

v_rsItemGroups        vappct.pck_common.refCursor;
v_vSQL constant varchar2(4000) :=              
        'select sdd.state_id
         from usr_pat_cl_item t, usr_item ui, usr_cl_item ucli,
              usr_temporal_state uts, usr_outcome_state uos, usr_decision_state uds,
              stat_ts_definition std, stat_os_definition sod, stat_ds_definition sdd,usr_item_group uig
        where t.pat_cl_id = :PAT_CL_ID
          and t.item_id = ui.item_id
          and t.checklist_id = ucli.checklist_id
          and t.item_id = ucli.item_id
          and t.ts_id = uts.ts_id
          and t.os_id = uos.os_id
          and t.ds_id = uds.ds_id
          and uts.ts_definition_id = std.ts_definition_id
          and uos.os_definition_id = sod.os_definition_id
          and uds.ds_definition_id = sdd.ds_definition_id
          and ui.item_group_id = uig.item_group_id
          and uig.item_group_id  = :ITEM_GROUP_ID';
              
v_nSummaryWorstItemGroupState  number := 0;
v_nItemGroupState       number := 0;
v_nStatusCode           number;
v_vStatusComments       varchar2(4000);

begin

/*open the result set*/
    open v_rsItemGroups for v_vSQL
    using pi_nPatCLID,
          pi_nItemGroupID;
          
  loop
     fetch v_rsItemGroups INTO v_nItemGroupState;
     exit when v_rsItemGroups%notfound;  
        
        if v_nItemGroupState > v_nSummaryWorstItemGroupState
        then
           v_nSummaryWorstItemGroupState := v_nItemGroupState;
        end if;
   end loop;

return v_nSummaryWorstItemGroupState;

exception 
when others then return -1;
end;  
  

/*****
Description:
gets a ref cursor of worst case checklist item group statuses 
based on search criteria.
******/
procedure GetMultiPatientSearchRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_dtEventStartDate       in date,
      pi_dtEventEndDate         in date,
      pi_nChecklistID           in number,
      pi_nChecklistStatusID     in number,
      pi_nServiceID             in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
is
    v_rsItemGroups    vappct.pck_common.refCursor;
    
    v_vSQl varchar2(4000) := '';
    
    v_vSQLSelect      varchar2(1234) :=  
            'select DISTINCT up.patient_id,up.last_name,up.first_name,substr(up.ssn,6,4) as last_4,
                    uc.checklist_label, uc.checklist_id,upc.pat_cl_id';
                    
    v_vSQLFrom constant varchar2(4000) :=
             ' from usr_pat_checklist upc, usr_pat_cl_item upci, usr_checklist uc, 
                   usr_item ui, usr_item_group uig, utl_patient up
              where upci.pat_cl_id in
              (
                select t3.pat_cl_id                      
                from usr_pat_checklist t3            
                  where ((t3.procedure_date    
                      between :FROM_DATE 
                          and :TO_DATE ) 
                      or 
                          :FROM_DATE2 is null )                
                  and ((t3.checklist_id = :CHECKLIST_ID) or
                          :CHECKLIST_ID2 = -1)                
                  and ((t3.checklist_state_id = :CHECKLIST_STATE_ID)  or
                        :CHECKLIST_STATE_ID2 = -1)
               )
              
              and upc.checklist_id in 
              (
                select t4.checklist_id                       
                from usr_checklist t4            
                  where ((t4.service_id = :SERVICE_ID)  or
                        :SERVICE_ID2 = -1)
              )
                
              and upci.pat_cl_id = upc.pat_cl_id
              and upci.checklist_id = uc.checklist_id
              and upci.item_id = ui.item_id
              and upci.patient_id = up.patient_id
              and uig.item_group_id = ui.item_group_id';
                   
     v_nItemGroupID number := 0;
     v_vItemGroupLabel varchar2(200) := '';
     v_nPatCLID   number := 0;
     
     v_vSQLFunction varchar2(4000) := ''; 
     v_vSQLWorstRowItemGroup varchar2(4000) := '';
     v_nHasItemGroups boolean := False;
    
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_MULTI_PATIENT', '');
    
    GetItemGroupsByCriteriaRS(
      pi_vSessionID,
      pi_vSessionClientIP,
      pi_nUserID,
      pi_dtEventStartDate,
      pi_dtEventEndDate,
      pi_nChecklistID,
      pi_nChecklistStatusID,
      pi_nServiceID,
      po_nStatusCode,
      po_vStatusComment,
      v_rsItemGroups);
    
    loop
    fetch v_rsItemGroups INTO v_nItemGroupID,v_vItemGroupLabel;
     exit when v_rsItemGroups%notfound;
       
        v_nHasItemGroups := True;
        
        if v_vSQLFunction IS NULL
        then
          v_vSQLFunction := ' ,PCK_PATIENT.getSummaryItemGroupState(upci.pat_cl_id' || ',' || v_nItemGroupID ||')' || ' AS ' || v_vItemGroupLabel;
          v_vSQLWorstRowItemGroup := ', greatest(PCK_PATIENT.getSummaryItemGroupState('|| 'upci.pat_cl_id' || ',' || v_nItemGroupID ||')';
        else
          v_vSQLFunction := v_vSQLFunction || ',PCK_PATIENT.getSummaryItemGroupState('|| 'upci.pat_cl_id' || ',' || v_nItemGroupID ||')' || ' AS ' || v_vItemGroupLabel;
          v_vSQLWorstRowItemGroup := v_vSQLWorstRowItemGroup || ',' || 'PCK_PATIENT.getSummaryItemGroupState('|| 'upci.pat_cl_id' || ',' || v_nItemGroupID ||')';
        end if;
       
    end loop;
    
    if (v_nHasItemGroups)
    then
        v_vSQLWorstRowItemGroup := v_vSQLWorstRowItemGroup || ') AS WR_ITEM_GROUP_STATE_ID';
   
        close v_rsItemGroups;  
    
        v_vSQL := v_vSQLSelect || v_vSQLFunction || v_vSQLWorstRowItemGroup || v_vSQLFrom;
        --open the result set
        open rs for v_vSQL
        using pi_dtEventStartDate,
              pi_dtEventEndDate,
              pi_dtEventStartDate,
              pi_nChecklistID,
              pi_nChecklistID,
              pi_nChecklistStatusID,
              pi_nChecklistStatusID,
              pi_nServiceID,
              pi_nServiceID;
          
    else
       v_vSQL := 'select * from dual where 0=1';
       open rs for v_vSQL;
       RETURN;
   end if; 
      
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_MULTI_PATIENT', '');
  
end;

  procedure GetMultiPatientPatCLIDSearchRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_dtEventStartDate       in date,
    pi_dtEventEndDate         in date,
    pi_nChecklistID           in number,
    pi_nChecklistStatusID     in number,
    pi_nServiceID             in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(4000) :=
      'select t.pat_cl_id, t.patient_id 
      from usr_pat_checklist t
      where ((t.procedure_date between :FROM_DATE and :TO_DATE)
        or :FROM_DATE2 is null)
      and ((t.checklist_id = :CHECKLIST_ID)
        or :CHECKLIST_ID2 = -1)
      and ((t.checklist_state_id = :CHECKLIST_STATE_ID)
        or :CHECKLIST_STATE_ID2 = -1)
        
         and t.checklist_id in 
              (
                select t4.checklist_id                       
                from usr_checklist t4            
                  where ((t4.service_id = :SERVICE_ID)  or
                        :SERVICE_ID2 = -1)
              )';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_MULTI_PATIENT', '');
    
    open rs
    for v_vSQL
    using pi_dtEventStartDate,
      pi_dtEventEndDate,
      pi_dtEventStartDate,
      pi_nChecklistID,
      pi_nChecklistID,
      pi_nChecklistStatusID,
      pi_nChecklistStatusID,
      pi_nServiceID,
      pi_nServiceID;
      
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_MULTI_PATIENT', '');
  
  end;

/*returns a single patient record
  filtered by patient id
*/
  procedure GetPatientIDRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vPatientID             in varchar2,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(1234) := 'select t.*, pck_common.GetAge(t.date_of_birth) as patient_age, substr(t.ssn, length(t.ssn)-3) as ssn_last_4, t2.sex_label, t2.sex_abbreviation 
                                       from utl_patient t, stat_sex t2
                                       where t.sex_id = t2.sex_id
                                       and t.patient_id = :PATIENT_ID';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_vPatientID;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT', v_vSQL);
  end;

/*Determines the item component state based on the item type*/
  procedure GetICStateByPKey(
        pi_nPatItemID             in number,
        pi_nItemCompID            in number,
        po_nItemCompState         out number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2)
        
  is

   v_vSQLSelect constant varchar2(1234) := 'select ui.item_type_id, upic.item_id, upic.component_value                        
                                      from usr_pat_item_component upic, usr_item ui 
                                      where upic.pat_item_id = :PAT_ITEM_ID
                                        and upic.item_component_id = :ITEM_COMPONENT_ID
                                        and upic.item_id = ui.item_id';  
                                        
   v_vSQLRange constant varchar2(1234) := 'select uir.*
                                      from usr_ic_range uir
                                      where uir.item_id = :ITEM_ID
                                      and uir.item_component_id = :ITEM_COMPONENT_ID';
   
   v_vSQLState constant varchar2(1234) := 'select uis.state_id
                                      from usr_ic_state uis
                                      where uis.item_id = :ITEM_ID
                                      and uis.item_component_id = :ITEM_COMPONENT_ID';
                                      
   v_vSQL varchar(1234) := '';                                    
   v_nItemTypeID number(1) := 0; 
   v_nItemComponentStateID number(5) := 0;
   v_nItemID number(9) := 0;
   v_vComponentValue varchar(4000) := '';
   v_recItemRange usr_ic_range%rowtype;
   v_nStateID number(1) := 0;
   
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_ITEM_COMP_STATE', v_vSQL);
      
    v_vSQL := v_vSQLSelect;
    
    execute immediate v_vSQLSelect into v_nItemTypeID, v_nItemID, v_vComponentValue
    using pi_nPatItemID,
          pi_nItemCompID;
    
    if v_nItemTypeID = VAPPCT.PCK_COMMON.c_nQuestionFreeText
       or v_nItemTypeID = VAPPCT.PCK_COMMON.c_nNoteTitle
    then
        v_nItemComponentStateID := VAPPCT.PCK_COMMON.c_nState_Unknown;
    elsif v_nItemTypeID = VAPPCT.PCK_COMMON.c_nLaboratory              /*Laboratory*/
    then
        v_vSQL := v_vSQLRange;
        
        execute immediate v_vSQLRange into v_recItemRange
        using v_nItemID,
              pi_nItemCompID;
        
        if to_number(v_vComponentValue) < v_recItemRange.legal_min
           or to_number(v_vComponentValue) > v_recItemRange.legal_max
        then
            v_nItemComponentStateID := VAPPCT.PCK_COMMON.c_nState_Unknown;
        elsif to_number(v_vComponentValue) >= v_recItemRange.legal_min and to_number(v_vComponentValue) < v_recItemRange.critical_low
        then
            v_nItemComponentStateID := VAPPCT.PCK_COMMON.c_nState_Bad;
        elsif to_number(v_vComponentValue) >= v_recItemRange.critical_low and to_number(v_vComponentValue) < v_recItemRange.low
        then
            v_nItemComponentStateID := VAPPCT.PCK_COMMON.c_nState_Bad;
        elsif to_number(v_vComponentValue) >= v_recItemRange.low and to_number(v_vComponentValue) <= v_recItemRange.high
        then
            v_nItemComponentStateID := VAPPCT.PCK_COMMON.c_nState_Good;
        elsif to_number(v_vComponentValue) > v_recItemRange.high and to_number(v_vComponentValue) <= v_recItemRange.critical_high
        then
            v_nItemComponentStateID := VAPPCT.PCK_COMMON.c_nState_Bad;
        elsif to_number(v_vComponentValue) > v_recItemRange.critical_high and to_number(v_vComponentValue) <= v_recItemRange.legal_max
        then
            v_nItemComponentStateID := VAPPCT.PCK_COMMON.c_nState_Bad;
        end if;     
    elsif v_nItemTypeID = VAPPCT.PCK_COMMON.c_nQuestionSelection      /*Selection*/
    then
        v_vSQL := v_vSQLState;
        
        execute immediate v_vSQLState into v_nStateID
        using v_nItemID,
              pi_nItemCompID;
             
        if to_number(v_vComponentValue) = 1
        then
            v_nItemComponentStateID := v_nStateID;
        else 
            v_nItemComponentStateID := VAPPCT.PCK_COMMON.c_nState_NotSelected;
        end if;
    end if;      
           
    po_nItemCompState := v_nItemComponentStateID;            
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_ITEM_COMP_STATE', v_vSQL);
  end;

/*Function used with GetPatItemCompsByPatCLIDRS sql statement to return the
item component state field as part of the result set*/
  function getItemCompState(
    pi_nPatItemID             in number,
    pi_nItemCompID            in number
    )return number
  is
    v_nItemCompState number;
    v_nStatusCode number;
    v_vStatusComments varchar2(4000);
  begin
    GetICStateByPKey(
          pi_nPatItemID,
          pi_nItemCompID,
          v_nItemCompState,
          v_nStatusCode,
          v_vStatusComments);
          
  return v_nItemCompState;
  
  exception 
    when others then return -1;
  end;

/*Returns the item component state based on the patient checklist id (pat_cl_id)*/
procedure GetPatItemCompsByPatCLIDRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
                              
    v_vSQL constant varchar(1234) := 'select upic.*, uic.item_component_label,PCK_PATIENT.getItemCompState(upic.pat_item_id, upic.item_component_id) as IC_State_ID 
                                      from usr_pat_checklist upc, usr_pat_item upi, usr_pat_item_component upic, usr_item_component uic
                                      where upc.pat_cl_id = :PAT_CL_ID 
                                      and upi.patient_id = upc.patient_id
                                      and upi.item_id in 
                                      (
                                        select upci.item_id
                                        from usr_pat_cl_item upci
                                        where upci.pat_cl_id = upc.pat_cl_id
                                      )
                                      and upic.pat_item_id = upi.pat_item_id
                                      and upic.item_id = uic.item_id
                                      and upic.item_component_id = uic.item_component_id
                                      order by upi.entry_date desc, upi.pat_item_id desc, uic.sort_order, upper(uic.item_component_label)';
                                      
  
  
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM_COMPONENTS', v_vSQL);
            
    open rs
    for v_vSQL
    using pi_nPatCLID;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM_COMPONENTS', v_vSQL);
  end;
  
   procedure GetPatItemsByPatCLIDRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
                              
    v_vSQL constant varchar(4000) := 'select upi.*, sst.source_type_label, ui.item_label
                                      from usr_pat_checklist upc, usr_pat_item upi, stat_source_type sst, usr_item ui
                                      where upc.pat_cl_id = :PAT_CL_ID 
                                      and upi.patient_id = upc.patient_id
                                      and upi.item_id in 
                                      (
                                        select upci.item_id
                                        from usr_pat_cl_item upci
                                        where upci.pat_cl_id = upc.pat_cl_id
                                      )
                                      and upi.source_type_id = sst.source_type_id
                                      and upi.item_id = ui.item_id
                                      order by upi.entry_date desc, upi.pat_item_id desc, upper(item_label)';
                                    
  
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEMS', v_vSQL);
            
    open rs
    for v_vSQL
    using pi_nPatCLID;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEMS', v_vSQL);
  end;

/*returns item component state
  filtered by usr_pat_item_component primary
  key
*/
  procedure GetItemCompStateByPKey(
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatItemID             in number,
        pi_nItemCompID            in number,
        po_nItemCompState         out number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2)        
  is 
  begin
    GetICStateByPKey(
        pi_nPatItemID,
        pi_nItemCompID,
        po_nItemCompState,
        po_nStatusCode,
        po_vStatusComment);
    
  end;

end PCK_PATIENT;

/

--------------------------------------------------------
--  DDL for Package Body PCK_PAT_CHECKLIST
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_PAT_CHECKLIST" is

/*****
Description:
Updates a patient checklist to the latest version.
******/
  procedure UpdatePatCLVersion (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatCLID               in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
  is
  
    v_nChecklistID number := 0;
    v_vPatientID varchar2(50) := '';
    v_dtCLVersion date;
    
    --sql to get all items from the checklist that are not currently in the pat cl
    v_sqlQRY_CL_ITEM constant varchar2(500) :=  
      'SELECT t.*
       FROM  usr_cl_item t
       where t.checklist_id = :CHECKLIST_ID 
       and active_id = 1 
       and t.item_id not in (select it.item_id 
                             from usr_pat_cl_item it
                             where it.pat_cl_id = :PAT_CL_ID)';
       
    v_recUSR_CL_ITEM usr_cl_item%ROWTYPE;
    v_rsUSR_CL_ITEM VAPPCT.PCK_COMMON.refCursor;
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_PAT_CHECKLIST', '');
  
    v_recUSR_CL_ITEM := null;
    
    --get the checklist id and patient id of the checklist
    select checklist_id, patient_id into v_nChecklistID, v_vPatientID   
    from usr_pat_checklist 
    where pat_cl_id = pi_npatclid;
    
    --get the latest version of the checklist
    select date_last_updated into v_dtCLVersion
    from usr_checklist
    where checklist_id = v_nChecklistID;
    
    --get a cursor of all new items added to the checklist 
    --and insert into usr_pat_cl_item
    open v_rsUSR_CL_ITEM for v_sqlQRY_CL_ITEM
    using v_nChecklistID,
          pi_npatclid;
    
    loop
    
      v_recUSR_CL_ITEM := null;

      fetch v_rsUSR_CL_ITEM INTO v_recUSR_CL_ITEM;
      exit when not v_rsUSR_CL_ITEM%found;
      
      insert into usr_pat_cl_item (
        patient_id,
        pat_cl_id,
        checklist_id,
        item_id,
        TS_ID,
        OS_ID,
        DS_ID,
        IS_ENABLED,
        IS_OVERRIDDEN,
        OVERRIDE_DATE)
      values(
        v_vPatientId,
        pi_npatclid,
        v_nchecklistid,
        v_recUSR_CL_ITEM.item_id,
        PCK_COMMON.c_nDefaultUnknownID,
        PCK_COMMON.c_nDefaultUnknownID,
        PCK_COMMON.c_nDefaultUnknownID,
        PCK_COMMON.c_nTrue,
        PCK_COMMON.c_nFalse,
        null);
              
      commit;
    end loop;
  
    --delete all items that are no longer in the checklist
    delete from usr_pat_cl_item_cmnt
    where item_id in (select cli.item_id
                      from usr_cl_item cli
                      where cli.active_id = 2 
                      and cli.checklist_id = v_nchecklistid)
    and pat_cl_id = pi_npatclid;
    commit;
    
    delete from usr_pat_cl_item
    where item_id in (select cli.item_id
                      from usr_cl_item cli
                      where cli.active_id = 2 
                      and cli.checklist_id = v_nchecklistid)
    and pat_cl_id = pi_npatclid;
    commit;
    
    --update the pat checklist version date
    update usr_pat_checklist 
    set cl_version_date = v_dtCLVersion, 
        cl_version_prompted = v_dtCLVersion 
    where pat_cl_id = pi_npatclid;
    commit;
    
  exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_PAT_CHECKLIST', '');
  end;

/*
returns a recordset of all patient checklists that are out of date given MP criteria
*/
procedure GetOutOfDateMultiPatCLRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        
        pi_dtEventStartDate       in date,
        pi_dtEventEndDate         in date,
        pi_nChecklistID           in number,
        pi_nChecklistStatusID     in number,
        pi_vPatIDs                in clob,
        pi_vCLIDs                 in clob,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
 is
  v_vPatIDs varchar2(500) := '';
  v_vSQL constant long := 'select ucl.*, 
                                  upcl.pat_cl_id, 
                                  upcl.cl_version_date, 
                                  upcl.cl_version_prompted,
                                  up.* 
                             from usr_pat_checklist upcl, 
                                  usr_checklist ucl, 
                                  utl_patient up  
                            where upcl.checklist_id = ucl.checklist_id 
                              and up.patient_id = upcl.patient_id 
                              and upcl.checklist_state_id = 1 
                              and upcl.checklist_id in (select uc.checklist_id
                                                        from usr_checklist uc 
                                                        where uc.date_last_updated != upcl.cl_version_date 
                                                        and instr(:CHECKLIST_IDS, '','' || uc.checklist_id || '','' ) > 0  ) 
                              and instr(:PAT_IDS, '','' || upcl.patient_id || '','' ) > 0  
                              order by upcl.patient_id asc';

 begin
  po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
  po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT_CHECKLIST', '');
   
   --3. query and return the rs
   open rs
    for v_vSQL
  using pi_vCLIDs, 
        pi_vPatIDs;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT_CHECKLIST', '');
 end;

 
/*
returns a recordset of all patient checklists that are out of date
*/
procedure GetOutOfDatePatCLRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vPatientID             in varchar2,
        pi_nChecklistID           in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(1234) := 'select ucl.*, 
                                              upcl.pat_cl_id, 
                                              upcl.cl_version_date, 
                                              upcl.cl_version_prompted   
                                         from usr_pat_checklist upcl, usr_checklist ucl 
                                        where upcl.patient_id = :PATIENT_ID 
                                          and upcl.checklist_id = ucl.checklist_id 
                                          and upcl.checklist_state_id = 1 
                                          
                                          and   ( (upcl.checklist_id = :CHECKLIST_ID)
                                                    or
                                                   :CHECKLIST_ID1 = -1)
                    
                                          and upcl.checklist_id in (select uc.checklist_id
                                                                      from usr_checklist uc 
                                                                     where uc.date_last_updated != upcl.cl_version_date)';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT_CHECKLIST', v_vSQL);
      
     open rs
      for v_vSQL
    using pi_vPatientID,
          pi_nChecklistID,
          pi_nChecklistID;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT_CHECKLIST', v_vSQL);
  end;

  procedure GetPatChecklistByItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vPatientID             in varchar2,
        pi_nItemID                in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(1234) := 'select upcl.*, ss.state_label, ucl.checklist_label 
                                         from usr_pat_checklist upcl, stat_state ss, usr_checklist ucl
                                        where upcl.state_id = ss.state_id
                                          and upcl.patient_id = :PatientID
                                          and upcl.checklist_id = ucl.checklist_id
                                          and upcl.checklist_state_id = :ChecklistStateID
                                          and upcl.checklist_id in (select ucli.checklist_id
                                                                      from usr_cl_item ucli
                                                                     where ucli.item_id = :ItemID)';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT_CHECKLIST', v_vSQL);
      
     open rs
      for v_vSQL
    using pi_vPatientID,
          VAPPCT.PCK_COMMON.c_nOpen,
          pi_nItemID;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT_CHECKLIST', v_vSQL);
  end;

/*returns a single patient checklist record
  filtered by patient id
*/
  procedure GetPatChecklistRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_vPatientID             in varchar2,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(1234) := 'select t.*, t2.state_label, t3.checklist_label || '' - '' || t4.checklist_state_label as checklist_label
                                       from usr_pat_checklist t, stat_state t2, usr_checklist t3, stat_checklist_state t4
                                       where t.state_id = t2.state_id
                                       and t.patient_id = :PATIENT_ID
                                       and t.checklist_id = t3.checklist_id
                                       and t.checklist_state_id = t4.checklist_state_id
                                       order by t.checklist_state_id';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT_CHECKLIST', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_vPatientID;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT_CHECKLIST', v_vSQL);
  end;

  /*returns a single patient checklist record
  filtered by patient id
  */
  procedure GetPatChecklistIDRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(1234) := 'select t.*, t2.state_label,t3.checklist_label 
                                       from usr_pat_checklist t, stat_state t2, usr_checklist t3
                                       where t.state_id = t2.state_id
                                       and t.pat_cl_id = :PAT_CL_ID
                                       and t.checklist_id = t3.checklist_id';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT_CHECKLIST', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nPatCLID;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT_CHECKLIST', v_vSQL);
  end;

/*returns a dataset of patient checklists
filtered by checklist id and checklist states
*/
  procedure GetPatCLByCLIDCLSTATERS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nChecklistID           in number,
        pi_nChecklistStateID      in number,
        pi_vSelectedPatients      in varchar2,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
                                
    v_vSQL varchar2(1234) :=
      'select t.patient_id,
              t.checklist_id,
              t.assignment_date,
              NVL(TO_CHAR(t.procedure_date,''mm/dd/yyyy''),''NA'') as procedure_date,
              t.state_id,
              t.checklist_state_id,
              t.pat_cl_id,
              t3.first_name,
              t3.middle_initial,
              t3.last_name,
              substr(t3.ssn, length(t3.ssn)-3) as ssn_last_4,
              t4.checklist_label
      from usr_pat_checklist t, stat_checklist_state t2, utl_patient t3, usr_checklist t4
      where t.checklist_id =  :CHECKLIST_ID
      and t.checklist_state_id = :CHECKLIST_STATE_ID
      and t.checklist_state_id = t2.checklist_state_id
      and t.patient_id = t3.patient_id
      and t.checklist_id = t4.checklist_id
      and instr(:PATIENT_IDs, '','' || t.patient_id || '','') > 0';            
  
  
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT_CHECKLIST', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_nChecklistID,
          pi_nChecklistStateID,
          pi_vSelectedPatients;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT_CHECKLIST', v_vSQL);
  end;
  
  procedure HasPatientChecklist (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nChecklistID           in number,
    pi_nChecklistStateID      in number,
    pi_vPatientID             in varchar2,
    po_nHasPatCL              out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is                     
    v_vSQL varchar2(1234) :=
      'select count(t.patient_id)
       from usr_pat_checklist t
       where t.checklist_id =  :CHECKLIST_ID
       and t.checklist_state_id = :CHECKLIST_STATE_ID
       and t.patient_id = :PATIENT_ID';
  
    v_nHasPatCL number := 0;  
  begin
    po_nStatusCode := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
    po_nHasPatCL := 0;
      
    execute immediate v_vSQL
    into v_nHasPatCL
    using pi_nChecklistID,
      pi_nChecklistStateID,
      pi_vPatientID;
      
    po_nHasPatCL := v_nHasPatCL;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  end;

/*****
Description:
Inserts a record in the usr_pat_checklist table.
******/
  procedure InsertPatChecklist (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nChecklistID           in number,
      pi_dtAssignmentDate       in date,
      pi_dtProcedureDate        in date,
      pi_nChecklistStateID      in number,
      pi_nStateID               in number,
      po_nPatCLID               out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
  is
    v_nPatCLID constant number := VAPPCT.PCK_COMMON.GetNextSequenceValue('SEQ_PAT_CL_ID');
    v_vSQL varchar(32767) := '';
    v_vSQLChecklist constant varchar2(1000) := 
      'INSERT INTO VAPPCT.usr_pat_checklist( 
              pat_cl_id,
              patient_id,
              checklist_id,
              assignment_date,
              procedure_date,
              state_id,
              checklist_state_id,
              cl_version_date,
              cl_version_prompted)
              VALUES( 
              :PAT_CL_ID,
              :PATIENT_ID,
              :CHECKLIST_ID,
              :ASSIGNMENT_DATE,
              :PROCEDURE_DATE,
              :STATE_ID,
              :CHECKLIST_STATE_ID,
              :CL_VERSION_DATE,
              :CL_VERSION_PROMPTED)';
   
   v_rsItems VAPPCT.PCK_COMMON.refCursor;
   v_nItemID number := 0;
   
   v_dtCLDate date;
   
   v_vSQLCLItems constant varchar(1000) :=
     'select t.item_id
      from VAPPCT.usr_cl_item t
      where t.checklist_id = :ChecklistID
      and t.active_id = :ActiveID';
   
   v_vSQLItemInsert constant varchar(1000) := 
     'INSERT INTO VAPPCT.usr_pat_cl_item( 
              PAT_CL_ID,
              PATIENT_ID,
              CHECKLIST_ID,
              ITEM_ID,
              TS_ID,
              OS_ID,
              DS_ID,
              IS_OVERRIDDEN,
              OVERRIDE_DATE,
              IS_ENABLED)
              VALUES(
              :PatCLID,
              :PatientID,
              :ChecklistID,
              :ItemID,
              :TSID,
              :OSID,
              :DSID,
              :IsOverridden,
              null,
              :IsEnabled)';
   
  begin
    po_nStatusCode := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_PAT_CHECKLIST', v_vSQL);   
         
    v_vSQL := v_vSQLChecklist;
    
    --get the date the checklist was last updated
    select t.date_last_updated into v_dtCLDate 
    from usr_checklist t 
    where t.checklist_id = pi_nChecklistID;
    
    EXECUTE IMMEDIATE v_vSQLChecklist 
    USING v_nPatCLID,
          pi_vPatientID,
          pi_nChecklistID,
          pi_dtAssignmentDate,
          pi_dtProcedureDate,
          pi_nStateID,
          pi_nChecklistStateID,
          v_dtCLDate,
          v_dtCLDate;
      
    v_vSQL := v_vSQLCLItems;
    
    open v_rsItems
    for v_vSQLCLItems
    using pi_nChecklistID,
          VAPPCT.PCK_COMMON.c_nActive;
    
    loop
      fetch v_rsItems INTO v_nItemID;
      exit when v_rsItems%notfound;

      v_vSQL := v_vSQLItemInsert;
      
      EXECUTE IMMEDIATE v_vSQLItemInsert 
      USING v_nPatCLID,
            pi_vPatientID,
            pi_nChecklistID,
            v_nItemID,
            VAPPCT.PCK_COMMON.c_nDefaultUnknownID,
            VAPPCT.PCK_COMMON.c_nDefaultUnknownID,
            VAPPCT.PCK_COMMON.c_nDefaultUnknownID,
            VAPPCT.PCK_COMMON.c_nFalse,
            VAPPCT.PCK_COMMON.c_nTrue;
            
    end loop;
    close v_rsItems;
    
    commit;
    
    po_nPatCLID := v_nPatCLID;
    
  exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_PAT_CHECKLIST', v_vSQL);
  end;

/*****
Description:
Updates a record in the usr_pat_checklist table.
******/
  procedure UpdatePatChecklist (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatCLID               in number,
      pi_dtAssignmentDate       in date,
      pi_dtProcedureDate        in date,
      pi_nChecklistStateID      in number,
      pi_nStateID               in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
  is
    v_vSQL constant varchar2(500) :=  
       'UPDATE VAPPCT.usr_pat_checklist 
        SET assignment_date     = :ASSIGNMENT_DATE,
            procedure_date      = :PROCEDURE_DATE,
            state_id            = :STATE_ID,
            checklist_state_id  = :CHECKLIST_STATE_ID
        WHERE PAT_CL_ID         = :PAT_CL_ID';       

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_PAT_CHECKLIST', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_dtAssignmentDate,
          pi_dtProcedureDate,
          pi_nStateID,
          pi_nChecklistStateID,
          pi_nPatCLID;          
    
    commit;
       
  exception
    when others then
      rollback;
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_PAT_CHECKLIST', v_vSQL);

  end;

end PCK_PAT_CHECKLIST;

/

--------------------------------------------------------
--  DDL for Package Body PCK_PAT_CHECKLIST_ITEM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_PAT_CHECKLIST_ITEM" is

  /*
  Description: gets pat item comment rs
  */
  procedure GetPatCLICommentRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatCLID               in number,
      pi_nItemID                in number,   
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
  is       
    v_vSQL varchar2(1000) :=  
      'select t.*, t2.last_name || '','' || t2.first_name as user_name  
        from usr_pat_cl_item_cmnt t, utl_user t2 
        where t.pat_cl_id = :PAT_CL_ID 
        and   t.item_id = :ITEM_ID 
        and   t.user_id = t2.user_id
        order by t.comment_date desc';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_nPatCLID,
          pi_nItemID;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
  end;

  /*****
  Description:
  Inserts a new patient item comment record.
  *****/
  procedure InsertPatCLIComment (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatCLID               in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,
      pi_vCommentText           in varchar2, 
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    --create dynamic sql for the insert
    v_vSQL constant varchar2(500) := 
      'INSERT INTO VAPPCT.usr_pat_cl_item_cmnt( 
              pat_cl_id,
              checklist_id,
              item_id,
              user_id,
              comment_date,
              comment_text) 
              VALUES( 
              :PAT_CL_ID,
              :CHECKLIST_ID,
              :ITEM_ID,
              :USER_ID,
              sysdate,
              :COMMENT_TEXT)';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_PAT_ITEM', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nPatCLID,
          pi_nChecklistID,
          pi_nItemID,
          pi_nUserID,
          pi_vCommentText;
    
    commit;
     
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_PAT_ITEM', v_vSQL);
  end;

  /*****
  Description:
  Updates a checklist item record.
  ******/
  procedure UpdatePatChecklistItem (pi_vSessionID             in varchar2,
                                  pi_vSessionClientIP       in varchar2,
                                  pi_nUserID                in number,
                                  pi_vPatientID             in varchar2,
                                  pi_nChecklistID           in number,
                                  pi_nItemID                in number,
                                  pi_nOSID                  in number,
                                  pi_nDSID                  in number,
                                  pi_nTSID                  in number,
                                  pi_nPatCLID               in number,
                                  pi_nIsEnabled             in number,
                                  pi_nIsOverridden          in number,
                                  pi_dtOverrideDate         in date,
                                  po_nStatusCode            out number,
                                  po_vStatusComment         out varchar2)
  is
  
    v_vSQL constant varchar2(500) :=  
       'UPDATE VAPPCT.usr_pat_cl_item 
        SET os_id = :OSID,
            ts_id = :TSID,
            ds_id = :DSID,
            is_enabled = :IsEnabled,
            is_overridden = :IsOverridden,
            override_date = :OverrideDate
        WHERE patient_id = :PatientID
          AND checklist_id = :ChecklistID
          AND pat_cl_id = :PatCLID
          AND item_id = :ItemID';
          
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CLITEM', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nOSID,
          pi_nTSID,
          pi_nDSID,
          pi_nIsEnabled,
          pi_nIsOverridden,
          pi_dtOverrideDate,
          pi_vPatientID,
          pi_nChecklistID,
          pi_nPatCLID,
          pi_nItemID;          
    
    commit;
  
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CLITEM', v_vSQL);

  end;
  
  /*override DS state with comment*/
  procedure OverridePatChecklistItem ( pi_vSessionID             in varchar2,
                                        pi_vSessionClientIP       in varchar2,
                                        pi_nUserID                in number,
                                        pi_vPatientID             in varchar2,
                                        pi_nChecklistID           in number,
                                        pi_nItemID                in number,
                                        pi_nOSID                  in number,
                                        pi_nDSID                  in number,
                                        pi_nTSID                  in number,
                                        pi_nPatCLID               in number,
                                        pi_nIsEnabled             in number,
                                        pi_nIsOverridden          in number,
                                        pi_dtOverrideDate         in date,
                                        pi_vOverrideComment       in varchar2,
                                        po_nStatusCode            out number,
                                        po_vStatusComment         out varchar2)
  is
  
    v_nCount number := 0;
    v_vSQLCount varchar2(1000) := '';
    v_vSQLOverride constant varchar2(4000) := 
      'INSERT into VAPPCT.usr_pat_cli_override 
          ( pat_cl_id,
            checklist_id,
            item_id,
            user_id,
            ts_id,
            os_id,
            ds_id,
            override_date,
            override_comment)
        values(:PAT_CL_ID,
               :CHECKLIST_ID,
               :ITEM_ID,
               :USER_ID,
               :TS_ID,
               :OS_ID,
               :DS_ID,
               :OVERRIDE_DATE,
               :OVERRIDE_COMMENT)';

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_CLITEM', '');
    
    --keep a history of all overrides only insert if its not already there
    if pi_nIsOverridden > 0 then
      if pi_dtOverrideDate is not null then
        
        v_vSQLCount := 'SELECT count(*) FROM usr_pat_cli_override ';
        v_vSQLCount := v_vSQLCount || 'WHERE pat_cl_id = ' || to_char(pi_nPatCLID);
        v_vSQLCount := v_vSQLCount || ' AND checklist_id = ' || to_char(pi_nChecklistID);
        v_vSQLCount := v_vSQLCount || ' AND item_id = ' || to_char(pi_nItemID);
        v_vSQLCount := v_vSQLCount || ' AND user_id = ' || to_char(pi_nUserID);
        v_vSQLCount := v_vSQLCount || ' AND override_date = ';
        v_vSQLCount := v_vSQLCount || ' to_date(''' || to_char(pi_dtOverrideDate,'yyyymmddhh24miss') || ''',''yyyymmddhh24miss'') ';
        v_nCount := to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
        
        if v_nCount < 1 then 
             
          EXECUTE IMMEDIATE v_vSQLOverride  
          USING pi_nPatCLID,
                pi_nChecklistID,
                pi_nItemID,
                pi_nUserID,
                pi_nTSID,
                pi_nOSID,
                pi_nDSID,
                pi_dtOverrideDate,
                pi_voverridecomment;
        
        end if;
        
      end if;
    end if;
       
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_CLITEM', '');

  end;

  /*returns a 1 row dataset of  a patient checklist item
  */
  procedure GetPatCLItemDIRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        pi_nItemID                in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(4000) := 'select t.*, ui.item_label, uc.checklist_label, 
                              uts.ts_label, uos.os_label, uds.ds_label, std.state_id as ts_state_id,
                              sod.state_id as os_state_id, sdd.state_id as ds_state_id
                              from usr_pat_cl_item t, usr_item ui, usr_checklist uc ,
                                   usr_temporal_state uts, usr_outcome_state uos, usr_decision_state uds,
                                   stat_ts_definition std, stat_os_definition sod, stat_ds_definition sdd
                                where t.pat_cl_id = :PAT_CL_ID
                                and t.item_id = :ITEM_ID 
                                and t.item_id = ui.item_id
                                and t.checklist_id = uc.checklist_id
                                and t.ts_id = uts.ts_id
                                and t.os_id = uos.os_id
                                and t.ds_id = uds.ds_id
                                and uts.ts_definition_id = std.ts_definition_id
                                and uos.os_definition_id = sod.os_definition_id
                                and uds.ds_definition_id = sdd.ds_definition_id'; 
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_CL_ITEMS', '');
            
    open rs
    for v_vSQL
    using pi_nPatCLID,
          pi_nItemID;    
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_CL_ITEMS', '');
  end;

  /*
    returns a dataset of patient checklist items
    filtered by patient checklist id (PAT_CL_ID)
    Also returns the TS, OS, DS worst state ids and
    the Summary worst state id
  */
  procedure GetPatCLItemsByPatCLIDRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        po_nColTSStateID          out number,
        po_nColOSStateID          out number,
        po_nColDSStateID          out number,
        po_nSummaryStateID        out number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
  
    v_rsUPDATE          vappct.pck_common.refCursor;
     
    v_vSQL constant varchar2(4000) :=
      'select t.*, ui.item_label, ui.item_type_id, ucli.sort_order,
              uts.ts_label, uos.os_label, uds.ds_label,
              std.state_id as ts_state_id, sod.state_id as os_state_id, sdd.state_id as ds_state_id,
              greatest(std.state_id, sod.state_id, sdd.state_id) as wr_State_ID
         from usr_pat_cl_item t, usr_item ui, usr_cl_item ucli,
              usr_temporal_state uts, usr_outcome_state uos, usr_decision_state uds,
              stat_ts_definition std, stat_os_definition sod, stat_ds_definition sdd
        where t.pat_cl_id = :PAT_CL_ID
          and t.item_id = ui.item_id
          and t.checklist_id = ucli.checklist_id
          and t.item_id = ucli.item_id
          and t.ts_id = uts.ts_id
          and t.os_id = uos.os_id
          and t.ds_id = uds.ds_id
          and uts.ts_definition_id = std.ts_definition_id
          and uos.os_definition_id = sod.os_definition_id
          and uds.ds_definition_id = sdd.ds_definition_id
     order by ucli.sort_order';
  
    v_nTSWorstStateId       number := 0;
    v_nOSWorstStateId       number := 0;
    v_nDSWorstStateId       number := 0;
    v_nSummaryWorseStateID  number := 0;
    v_nStatusCode           number := 0;
    v_vStatusComments       varchar2(4000);
    
  begin
   po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
   po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_CL_ITEMS', '');
   
   GetPatCLItemsSummaryStateID(pi_nPatCLID,
                               v_nTSWorstStateId,
                               v_nOSWorstStateId,
                               v_nDSWorstStateId,
                               v_nSummaryWorseStateID,
                               v_nStatusCode,
                               v_vStatusComments);
   
   po_nColTSStateID := v_nTSWorstStateId;
   po_nColOSStateID := v_nOSWorstStateId;
   po_nColDSStateID := v_nDSWorstStateId;
   po_nSummaryStateID := v_nSummaryWorseStateID;
   
   open rs
   for v_vSQL
   using pi_nPatCLID;
      
   exception
     when others then
       po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
       po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_CL_ITEMS', '');
   end;

  /*
    Determines the worst TS, OS, and DS State ID's as well as the 
    Summary Worst State ID
   */
  procedure GetPatCLItemsSummaryStateID ( pi_nPatCLID              in number,
                                          po_nColWorstTSStateID    out number,
                                          po_nColWorstOSStateID    out number,
                                          po_nColWorstDSStateID    out number,
                                          po_nSummaryWorstStateID  out number,
                                          po_nStatusCode           out number,
                                          po_vStatusComment        out varchar2)
  is
  
    v_vSQL constant varchar2(4000) := 
      'select greatest(std.state_id, sod.state_id, sdd.state_id) as wr_State_ID,std.state_id as ts_state_id, 
        sod.state_id as os_state_id, sdd.state_id as ds_state_id
         from usr_pat_cl_item t, usr_temporal_state uts, usr_outcome_state uos, usr_decision_state uds,
              stat_ts_definition std, stat_os_definition sod, stat_ds_definition sdd
        where t.pat_cl_id = :PAT_CL_ID
          and t.ts_id = uts.ts_id
          and t.os_id = uos.os_id
          and t.ds_id = uds.ds_id
          and uts.ts_definition_id = std.ts_definition_id
          and uos.os_definition_id = sod.os_definition_id
          and uds.ds_definition_id = sdd.ds_definition_id';
          
     v_vSQL2 constant varchar2(4000) := 
      'update usr_pat_checklist
        set state_id = :SUMMARY_WORSE_STATE_ID
       where pat_cl_id = :PAT_CL_ID';
  
  v_rsUPCI          vappct.pck_common.refCursor;
      
  v_nRowTSStateID           number := 0;
  v_nRowOSStateID           number := 0;
  v_nRowDSStateID           number := 0;
  v_nRowStateID             number := 0;
  v_nRowWorseStateID        number := 0;
  
  v_nColTSWorseStateID      number := 0;
  v_nColOSWorseStateID      number := 0;
  v_nColDSWorseStateID      number := 0;
  
  v_nSummaryWorseStateID    number := 0;
  
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_CL_ITEMS_SUMMARY_STATE_ID', '');
   
    open v_rsUPCI
    for v_vSQL
    using pi_nPatCLID;
    
    loop
      fetch v_rsUPCI INTO v_nRowStateID,v_nRowTSStateID, v_nRowOSStateID, v_nRowDSStateID;
      exit when v_rsUPCI%notfound;
      
      if v_nRowStateID > v_nRowWorseStateID
      then
         v_nRowWorseStateID := v_nRowStateID;
      end if;
      
      if v_nRowTSStateID > v_nColTSWorseStateID
      then
          v_nColTSWorseStateID := v_nRowTSStateID;
      end if;
      
      if v_nRowOSStateID > v_nColOSWorseStateID
      then
          v_nColOSWorseStateID := v_nRowOSStateID;
      end if;
     
      if v_nRowDSStateID > v_nColDSWorseStateID
      then
          v_nColDSWorseStateID := v_nRowDSStateID;
      end if;
     
    end loop;
    close v_rsUPCI;
   
    /* Assign Variables to out variables */
    po_nColWorstTSStateID := v_nColTSWorseStateID;
    po_nColWorstOSStateID := v_nColOSWorseStateID;
    po_nColWorstDSStateID := v_nColDSWorseStateID;
   
    v_nSummaryWorseStateID := greatest(v_nRowWorseStateID,v_nColTSWorseStateID,v_nColOSWorseStateID,v_nColDSWorseStateID);
     
    po_nSummaryWorstStateID := v_nSummaryWorseStateID;
   
    --execute the sql with bind vars and commit
    execute immediate v_vSQL2 
    using  v_nSummaryWorseStateID,
          pi_nPatCLID; 
   
    exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_CL_ITEMS_SUMMARY_STATE_ID', '');
    end;

/*
    returns a dataset of patient checklist items
    filtered by patient checklist id (PAT_CL_ID)
    Also returns the TS, OS, DS worst state ids and
    the Summary worst state id
  */
  procedure GetPatCLItemsByPatCLIDRS2 (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatCLID               in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
  
    v_rsUPDATE          vappct.pck_common.refCursor;
     
    v_vSQL constant varchar2(4000) :=
      'select ui.item_type_id, t.patient_id, t.checklist_id, t.item_id, t.pat_cl_id, uci.logic
         from usr_pat_cl_item t, usr_cl_item uci, usr_item ui 
        where t.pat_cl_id = :PAT_CL_ID
          and t.checklist_id = uci.checklist_id 
          and ui.item_id = uci.item_id 
          and t.item_id = uci.item_id';
       
    v_nStatusCode           number := 0;
    v_vStatusComments       varchar2(4000);
    
  begin
   po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
   po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_CL_ITEMS2', '');
   
   open rs
   for v_vSQL
   using pi_nPatCLID;
      
   exception
     when others then
       po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
       po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_CL_ITEMS2', '');
   end;
   
end PCK_PAT_CHECKLIST_ITEM;

/

--------------------------------------------------------
--  DDL for Package Body PCK_PAT_ITEM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_PAT_ITEM" AS

/*
Gets a patient item and all of its component values
*/
procedure GetPatItemCompRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      pi_dtEntryDate            in date,
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is       
    v_vSQL varchar2(1000) :=  
      'select t1.*, 
              t3.component_value, 
              t3.item_component_id
        from usr_pat_item t1, 
             usr_item t2,
             usr_pat_item_component t3
        where t1.item_id = t2.item_id
          and t3.pat_item_id = t1.pat_item_id 
          and t1.patient_id = :PATIENT_ID 
          and t2.item_id = :ITEM_ID
          and t1.entry_date = :ENTRY_DATE';
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_vPatientID,
          pi_nItemID,
          pi_dtEntryDate;
          
    commit;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
end;

/*
Gets all components for a patient item by item id
*/
procedure GetAllPatItemCompRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is       
    v_vSQL varchar2(1000) :=  
      'select t1.*, 
              t3.component_value, 
              t3.item_component_id,
              t2.item_label
        from usr_pat_item t1, 
             usr_item t2,
             usr_pat_item_component t3
        where t1.item_id = t2.item_id
          and t3.pat_item_id = t1.pat_item_id 
          and t1.patient_id = :PATIENT_ID 
          and t2.item_id = :ITEM_ID
          order by t1.entry_date desc';
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_vPatientID,
          pi_nItemID;
          
    commit;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
end;


  /*
  Description: gets the item using the patient id 
  and item id passed in
  */
  procedure GetPatItemDIRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_vPatientID             in varchar2,
      pi_nPatItemID             in number,
      pi_nItemID                in number,      
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL varchar2(1000) :=  
      'select t.*, 
              t2.item_label, 
              t2.item_description,
              t2.lookback_time, 
              t2.item_type_id, 
              t2.item_group_id
        from  usr_pat_item t,
              usr_item t2
        where t.patient_id = :PATIENT_ID
        and   t.item_id = :ITEM_ID 
        and   t.pat_item_id = :PAT_ITEM_ID 
        and   t.item_id = t2.item_id';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_vPatientID,
          pi_nItemID,
          pi_nPatItemID;
          
    commit;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
end;


/*
Description: gets the most recent item using the patient id 
and item id passed in
*/
  procedure GetMostRecentPatItemDIRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQLCheck varchar2(100) :=
      'select t.item_type_id
       from usr_item t
       where t.item_id = :ItemID';
       
    v_nItemTypeID number(2) := 0;
    
    v_vSQLNonCollection constant varchar2(1000) :=  
      'select t.*, 
              t2.item_label, 
              t2.item_description,
              t2.lookback_time, 
              t2.item_type_id, 
              t2.item_group_id
         from usr_pat_item t,
              usr_item t2
        where t.item_id = t2.item_id 
          and t.pat_item_id = (select pat_item_id
                                 from (select pat_item_id
                                         from usr_pat_item
                                        where patient_id = :PatientID 
                                          and item_id = :ItemID
                                     order by entry_date desc, pat_item_id desc)
                                where rownum = 1)';

    v_vSQLCollection constant varchar2(2000) :=  
      'select t.*,
              t2.item_label,
              t2.item_description,
              t2.lookback_time,
              t2.item_type_id,
              t2.item_group_id
         from usr_pat_item t,
              usr_item t2
        where t.item_id = t2.item_id
          and t.pat_item_id = (select lmr.pat_item_id
                                 from (select mr.pat_item_id,
                                              mr.entry_date
                                         from (select pi.*,
                                                      rank() over (partition by pi.item_id
                                                                       order by pi.entry_date desc, pi.pat_item_id desc
                                                                  ) rnk
                                                 from usr_pat_item pi
                                                where pi.patient_id = :PatientID
                                                  and pi.item_id in (select u.item_id
                                                                       from usr_item t,
                                                                            usr_item_collection y,
                                                                            usr_item u
                                                                      where t.item_id = y.collection_item_id
                                                                        and y.item_id = u.item_id
                                                                        and t.item_id = :ItemID
                                                                    )
                                              ) mr
                                        where mr.rnk = 1
                                     order by mr.entry_date asc, mr.pat_item_id desc
                                      ) lmr
                                where rownum = 1
                              )';

    v_vSQL varchar2(2000) := '';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    execute immediate v_vSQLCheck
    into v_nItemTypeID
    using pi_nItemID;
    
    if v_nItemTypeID = PCK_COMMON.c_nCollection
    then
      v_vSQL := v_vSQLCollection;
    else
      v_vSQL := v_vSQLNonCollection;
    end if;
    
    open rs
    for v_vSQL
    using pi_vPatientID,
      pi_nItemID;

  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
  end;
  
  procedure GetMostRecentPICSummaryStateID (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      po_nSummaryStateID        out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    v_vSQLCheck varchar2(100) :=
      'select t.item_type_id
       from usr_item t
       where t.item_id = :ItemID';
       
    v_nItemTypeID number(2) := 0;
      
    v_vSQL constant varchar2(2000) := 
      'select upic.*
       from usr_pat_item_component upic 
       where upic.pat_item_id = (select pat_item_id
                               from (select pat_item_id
                                    from usr_pat_item
                                    where patient_id = :PatientID 
                                    and item_id = :ItemID
                                    order by entry_date desc, pat_item_id desc)
                               where rownum = 1)';
                                   
    v_rs PCK_COMMON.refCursor;
    v_rec usr_pat_item_component%rowtype;
    v_nSummaryStateID number(1) := -1;
  begin
    po_nSummaryStateID := -1;
    po_nStatusCode := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    execute immediate v_vSQLCheck
    into v_nItemTypeID
    using pi_nItemID;
   
    open v_rs
    for v_vSQL
    using pi_vPatientID,
      pi_nItemID;
      
    loop
      fetch v_rs INTO v_rec;
      exit when not v_rs%found;
    
      v_nSummaryStateID := PCK_PATIENT.getItemCompState(
        v_rec.PAT_ITEM_ID,
        v_rec.ITEM_COMPONENT_ID);
        
      if v_nSummaryStateID > po_nSummaryStateID
      then
        po_nSummaryStateID := v_nSummaryStateID;
      end if;
      
    end loop;
    
    close v_rs;

  exception
    when others then
      po_nSummaryStateID := -1;
      po_nStatusCode := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  end;

  procedure GetMostRecentPatItemCompDIRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,      
      pi_nItemComponentID       in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
  is       
    v_vSQL varchar2(32767) :=  
      'select upic.*,
              upi.entry_date,
              upi.source_type_id,
              upi.patient_id,
              upi.pat_item_id,
              uic.item_component_label,
              uic.sort_order,
              uic.active_id
         from usr_pat_item upi,
              usr_pat_item_component upic,
              usr_item_component uic
        where upi.pat_item_id = upic.pat_item_id
          and upic.item_component_id = :ItemComponentID
          and upic.item_id = uic.item_id
          and upic.item_component_id = uic.item_component_id
          and upi.pat_item_id = (select pat_item_id
                                   from (select pat_item_id
                                           from usr_pat_item
                                          where patient_id = :PatientID 
                                            and item_id = :ItemID
                                       order by entry_date desc, pat_item_id desc)
                                  where rownum = 1)';
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    --open the result set
    open rs
    for v_vSQL
    using pi_nItemComponentID,
          pi_vPatientID,
          pi_nItemID;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
  end;

  /*
  Description: gets the most recent item components using the patient id 
  and item id passed in
  */
  procedure GetPatItemComponentRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_vPatientID             in varchar2,
      pi_nPatItemID             in number,
      pi_nItemID                in number,    
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
  is       
    v_vSQL varchar2(3000) :=  
        'select t.*, 
                t2.item_component_label, 
                t2.sort_order,
                t3.patient_id,
                t3.entry_date,
                t3.source_type_id,
                
                sa.ACTIVE_LABEL, 
                uics.IC_STATE_ID, 
                uics.STATE_ID,
                uicr.IC_RANGE_ID, 
                uicr.UNITS, 
                uicr.LEGAL_MIN, 
                uicr.CRITICAL_LOW,
                uicr.LOW, 
                uicr.HIGH, 
                uicr.CRITICAL_HIGH, 
                uicr.LEGAL_MAX
           
           from usr_pat_item_component t,
                usr_item_component t2,
                usr_pat_item t3,
                
                usr_item_component uic, 
                stat_active sa, 
                usr_ic_state uics, 
                usr_ic_range uicr
                                        
          where t.pat_item_id = :PAT_ITEM_ID 
            and t.item_id = :ITEM_ID
            and t3.pat_item_id = t.pat_item_id 
            and t2.item_component_id = t.item_component_id 
            and t.item_id = t2.item_id 
            and t.pat_item_id = t3.pat_item_id
            
            and uic.item_id = :ITEM_ID  
            and uic.item_component_id = t.item_component_id 
            and uic.ACTIVE_ID = sa.ACTIVE_ID
            and uic.ITEM_ID = uics.ITEM_ID(+)
            and uic.ITEM_COMPONENT_ID = uics.ITEM_COMPONENT_ID(+)
            and uic.ITEM_ID = uicr.ITEM_ID(+)
            and uic.ITEM_COMPONENT_ID = uicr.ITEM_COMPONENT_ID(+) 
            and t.item_id = uic.item_id  
            
            
       order by t3.entry_date desc, t2.sort_order, upper(t2.item_component_label)';
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_nPatItemID,
          pi_nItemID,
          pi_nItemID;
          
    commit;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
end;

/*
Description: gets a rs of all patient items by itemid
*/
procedure GetPatItemRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,    
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is       
    v_vSQL varchar2(1000) :=  
        'select t.*, t2.item_type_id  
           from usr_pat_item t,
                usr_item t2 
          where t.item_id = :ITEM_ID
            and t.patient_id = :PATIENT_ID
            and t.item_id = t2.item_id 
       order by t.entry_date desc, t.pat_item_id';
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_nItemID,
          pi_vPatientID;
          
    commit;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
end;


/*
Description: gets one item component using the patient id 
and item id passed in
*/
procedure GetPatItemComponentDIRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_vPatientID             in varchar2,
      pi_nPatItemID             in number,
      pi_nItemID                in number,    
      pi_nComponentID           in number,
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is       
    v_vSQL varchar2(1000) :=  
      'select t.*, 
              t2.item_component_label, 
              t2.sort_order,
              t3.patient_id,
              t3.entry_date,
              t3.source_type_id,
        from  usr_pat_item_component t,
              usr_item_component t2,
              user_pat_item t3,
        where t.patient_id = :PATIENT_ID
        and   t.component_id = :COMPONENT_ID 
        and   t.item_component_id = t2.item_component_id 
        and   t.item_id = t2.item_id 
        and   t.pat_item_id = t3.pat_item_id 
        and   t.item_id = :ITEM_ID 
        and   t.pat_item_id = :PAT_ITEM_ID';
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_vPatientID,
          pi_nComponentID,
          pi_nItemID,
          pi_nPatItemID;
          
    commit;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
end;

/*
Description: gets pat item component rs
*/
procedure GetPatItemCommentRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatItemID             in number,
      pi_nItemID                in number,    
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is       
    v_vSQL varchar2(1000) :=  
      'select t.*, t2.last_name || '','' || t2.first_name as user_name  
        from usr_pat_item_cmnt t, utl_user t2 
        where t.pat_item_id = :PAT_ITEM_ID 
        and   t.item_id = :ITEM_ID 
        and   t.user_id = t2.user_id
        order by t.comment_date desc';
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_nPatItemID,
          pi_nItemID;
          
    commit;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
end;

/*
Description: gets pat item override comment rs
*/
procedure GetPatItemOverrideCommentRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatCLID               in number,
      pi_nChecklistID           in number,
      pi_nItemID                in number,    
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is       
    v_vSQL varchar2(1000) :=  
      'select t.*, t3.ds_definition_label, t2.last_name || '','' || t2.first_name as user_name  
        from usr_pat_cli_override t, utl_user t2, stat_ds_definition t3 
        where t.pat_cl_id = :pat_cl_id 
        and   t.checklist_id = :checklist_id 
        and   t.item_id = :item_id 
        and   t.user_id = t2.user_id 
        and   t.ds_id = t3.ds_definition_id 
        order by t.override_date desc';
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PAT_ITEM', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_npatclid,
          pi_nChecklistID,
          pi_nitemid;
          
    commit;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PAT_ITEM', v_vSQL);
  
end;

/*****
Description:
Inserts a new patient item record.
*****/
procedure InsertPatItem (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      pi_dtEntryDate            in date,
      pi_nSourceTypeID          in number,
      po_nPatItemID             out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    --create dynamic sql for the insert
    v_vSQL constant varchar2(500) := 
      'INSERT INTO VAPPCT.usr_pat_item( 
              patient_id,
              item_id,
              pat_item_id,
              entry_date,
              source_type_id) 
              VALUES( 
              :PATIENT_ID,
              :ITEM_ID,
              :PAT_ITEM_ID,
              :ENTRY_DAYE,
              :SOURCE_TYPE_ID)';
      
    v_nID number;
   
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_PAT_ITEM', v_vSQL);
    
    --get a new TS_ID from the sequence
    v_nID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_PAT_ITEM_ID');
            
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_vPatientID,
          pi_nItemID,
          v_nID,
          pi_dtEntryDate,
          pi_nSourceTypeID;
    
    commit;
    
    po_nPatItemID := v_nID;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_PAT_ITEM', v_vSQL);
end;

/*****
Description:
Inserts a new patient item comment record.
*****/
procedure InsertPatItemComment (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nPatItemID             in varchar2,
      pi_nItemID                in number,
      pi_vCommentText           in varchar2,           
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    --create dynamic sql for the insert
    v_vSQL constant varchar2(500) := 
      'INSERT INTO VAPPCT.usr_pat_item_cmnt( 
              pat_item_id,
              item_id,
              user_id,
              comment_date,
              comment_text) 
              VALUES( 
              :PAT_ITEM_ID,
              :ITEM_ID,
              :USER_ID,
              sysdate,
              :COMMENT_TEXT)';
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_PAT_ITEM', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nPatItemID,
          pi_nItemID,
          pi_nUserID,
          pi_vCommentText;
    
    commit;
     
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_PAT_ITEM', v_vSQL);
end;

/*****
Description:
Inserts a new patient item component record.
*****/
procedure InsertPatItemComponent (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vPatientID             in varchar2,
      pi_nItemID                in number,
      pi_nPatItemID             in number,
      pi_nComponentID           in number,
      pi_vComponentValue        in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    --create dynamic sql for the insert
    v_vSQL constant varchar2(4000) := 
      'INSERT INTO VAPPCT.usr_pat_item_component( 
              pat_item_id,
              item_id,
              item_component_id,
              component_value)
              VALUES( 
              :PAT_ITEM_ID,
              :ITEM_ID,
              :COMPONENT_ID,
              :COMPONENT_VALUE)';
    
    v_vSQLDeleteComponents constant varchar2(4000) := 
      'DELETE 
       FROM VAPPCT.usr_pat_item_component 
       WHERE PATIENT_ID = :PATIENT_ID 
       AND PAT_ITEM_ID = :PAT_ITEM_ID';
       
    v_vSQLDeleteItem constant varchar2(4000) := 
      'DELETE 
       FROM VAPPCT.usr_pat_item 
       WHERE PATIENT_ID = :PATIENT_ID 
       AND PAT_ITEM_ID = :PAT_ITEM_ID';
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_PAT_ITEM', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_nPatItemID,
          pi_nItemID,
          pi_nComponentID,
          pi_vComponentValue;
    
    commit;
       
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_PAT_ITEM', v_vSQL);
    
      --because the insert of the component failed, 
      --we need to delete the components and item 
      --to keep things cleaned rollback if you will
      EXECUTE IMMEDIATE v_vSQLDeleteComponents
      USING pi_vPatientID,
            pi_nPatItemID;
      commit;
    
      EXECUTE IMMEDIATE v_vSQLDeleteItem 
      USING pi_vPatientID,
            pi_nPatItemID;
      commit;
end;


/*****
Description:
updates a  patient item component record.
*****/
procedure UpdatePatItemComponent (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      
      pi_nPatItemID             in number,
      pi_nItemID                in number,
      pi_nComponentID           in number,
      pi_vComponentValue        in varchar2,
      
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2
      )
is
    --create dynamic sql for the insert
    v_vSQL constant varchar2(4000) := 
      'UPDATE VAPPCT.usr_pat_item_component 
          set component_value = :COMPONENT_VALUE
       where  pat_item_id = :PAT_ITEM_ID 
         and  item_id = :ITEM_ID 
         and  item_component_id = :ITEM_COMPONENT_ID';
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_PAT_ITEM', v_vSQL);
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_vComponentValue,
          pi_nPatItemID,
          pi_nItemID,
          pi_nComponentID;
          
    commit;
       
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_PAT_ITEM', v_vSQL);
    
end;


END PCK_PAT_ITEM;

/

--------------------------------------------------------
--  DDL for Package Body PCK_PLACE_HOLDER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_PLACE_HOLDER" AS

  procedure GetPlaceHolderDI (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nPlaceHolderID         in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'select t.*
       from stat_place_holder t
       where t.place_holder_id = :PlaceHolderID';
  
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs
    for v_vSQL
    using pi_nPlaceHolderID;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  
  end;
  
  procedure GetPlaceHolderParentRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'select t.*
       from stat_place_holder t
       where t.place_holder_id = t.ph_parent_id
       order by t.place_holder_id';
  
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs
    for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  
  end;
  
  procedure GetPlaceHolderChildRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nPlaceHolderID         in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'select t.*
       from stat_place_holder t
       where t.place_holder_id != t.ph_parent_id
       and t.ph_parent_id = :PlaceHolderID
       and t.is_group = :IsGroup
       order by upper(t.place_holder_label)';
  
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs
    for v_vSQL
    using pi_nPlaceHolderID,
          VAPPCT.PCK_COMMON.c_nFalse;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  
  end;

END PCK_PLACE_HOLDER;

/

--------------------------------------------------------
--  DDL for Package Body PCK_SECURITY_KEY
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_SECURITY_KEY" AS

/*
saves a user security key to the database and adds records to the utl_user_role table
*/
procedure SaveSecurityKey(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nSecurityKeyID         in number, 
      pi_vSecurityKeyName       in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_user_security_key(user_id,
                                       security_key_id,
                                       security_key_name,
                                       xfer_system_id,
                                       xfer_date
                          ) 
          values(:USER_ID,
                 :SECURITY_KEY_ID,
                 :SECURITY_KEY_NAME,
                 :XFER_SYSTEM_ID,
                 sysdate)';
     
     v_vSQLInsertRole constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_user_role(user_id,
                               user_role_id
                          ) 
          values(:USER_ID,
                 :USER_ROLE_ID)';
                 
     v_vSQLCount varchar2(4000) := '';
     v_nCount number := 0;
     v_vSQLSTATUserRole varchar2(4000) := '';
     v_nUserRoleID number := 0;
     
     
  begin
     
     --todo:error messages  
     v_nCount := 0;
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_LOGIN', '');
    
     --check that a record exisits
     v_vSQLCount := 'select count(*) from VAPPCT.utl_user_security_key ';
     v_vSQLCount := v_vSQLCount || 'WHERE user_id = ' || pi_nUserID; 
     v_vSQLCount := v_vSQLCount || ' AND security_key_id = ' || pi_nsecuritykeyid;
     v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
     
     --insert if the record is not there
     if (v_nCount < 1) then
                --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nUserID, 
              pi_nsecuritykeyid,
              pi_vsecuritykeyname,
              pi_nXferSystemID;    
        commit;
    
     end if;
          
     --if this key is in the stat_user_role table then 
     --add an entry to utl_user_role so that this user has permissions in the app
     v_vSQLSTATUserRole := 'select user_role_id from stat_user_role';
     v_vSQLSTATUserRole := v_vSQLSTATUserRole || ' where upper(security_key) = ''';
     v_vSQLSTATUserRole := v_vSQLSTATUserRole || pi_vsecuritykeyname || '''';
     begin
         v_nUserRoleID := to_number(pck_common.getdynamicsqlvalue(v_vSQLSTATUserRole));
        exception
           when others then
               null;
     end;
     
     --this key is associated with our application permissions
     if v_nUserRoleID > 0 then
     
        --check that a record exisits
        v_vSQLCount := 'select count(*) from VAPPCT.utl_user_role ';
        v_vSQLCount := v_vSQLCount || 'WHERE user_id = ' || pi_nUserID; 
        v_vSQLCount := v_vSQLCount || ' AND user_role_id = ' || v_nUserRoleID;
        v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
        if v_nCount <= 0 then
          --insert the role if its not there
          EXECUTE IMMEDIATE v_vSQLInsertRole 
          USING pi_nUserID, 
                v_nUserRoleID;    
          commit;
        end if;
        
     end if;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_LOGIN', '');
  
end;

/*****
Description: Gets a users security key by name if they have it
******/
procedure GetSecurityKeyByNameRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vSecurityKeyName       in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
     v_vSQL varchar2(500) :=  
      'SELECT t.* 
       FROM utl_user_security_key t 
       where upper(t.security_key_name) = :SECURITY_KEY_NAME  
       and t.user_id = :USER_ID';    
begin

    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_vsecuritykeyname,
          pi_nuserid;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;

END PCK_SECURITY_KEY;

/

--------------------------------------------------------
--  DDL for Package Body PCK_SITE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_SITE" AS

 /*
saves a Region to the database
*/
procedure SaveRegion(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nRegionID              in number, 
      pi_vRegionName            in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_region( region_id,
                             region_name,
                             xfer_system_id,
                             xfer_date
                          ) 
          values(:region_id,
                 :region_name,
                 :xfer_system_id,
                 sysdate)';
               
     v_vSQLUpdate constant varchar2(4000) :=  
         'update VAPPCT.utl_region
          set region_name = :region_name, 
              xfer_system_id = :XFER_SYSTEM_ID, 
              xfer_date = sysdate 
          where region_id = :region_id';
                          
     v_vSQLCount varchar2(4000) := '';
     v_nCount number := 0;
     
  begin
     
     v_nCount := 0;
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_successful', '');
    
     --check for a valid session
     --no check since this is called before the user logs in
     
     --check that a record exisits
     v_vSQLCount := 'select count(*) from VAPPCT.utl_region ';
     v_vSQLCount := v_vSQLCount || 'WHERE region_id = ' || pi_nRegionID;
     v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
     
     --insert if the record is not there
     if (v_nCount < 1) then
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nRegionID, 
              pi_vRegionName,
              pi_nXferSystemID;    
        commit;
    
      else
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLUpdate
        USING pi_vRegionName, 
              pi_nXferSystemID,
              pi_nRegionID; 
        commit;
      
      end if;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_failed', '');
  
end;

/*
saves a site to the database
*/
procedure SaveSite(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nRegionID              in number, 
      pi_nSiteID                in number,
      pi_vSiteName            in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_site( region_id,
                           site_id,
                           site_name,
                           xfer_system_id,
                           xfer_date
                          ) 
          values(:region_id,
                 :site_id,
                 :site_name,
                 :xfer_system_id,
                 sysdate)';
               
     v_vSQLUpdate constant varchar2(4000) :=  
         'update VAPPCT.utl_site 
          set site_name = :site_name, 
              xfer_system_id = :XFER_SYSTEM_ID, 
              xfer_date = sysdate 
          where region_id = :region_id 
            and site_id = :site_id';
                          
     v_vSQLCount varchar2(4000) := '';
     v_nCount number := 0;
     
  begin
     
     v_nCount := 0;
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_successful', '');
    
     --check for a valid session
     --no check since this is called before the user logs in
    
     --check that a record exisits
     v_vSQLCount := 'select count(*) from VAPPCT.utl_site ';
     v_vSQLCount := v_vSQLCount || 'WHERE region_id = ' || pi_nRegionID;
     v_vSQLCount := v_vSQLCount || ' AND site_id = ' || pi_nSiteID;
     
     v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
     
     --insert if the record is not there
     if (v_nCount < 1) then
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nRegionID, 
              pi_nSiteID,
              pi_vSiteName,
              pi_nXferSystemID;    
        commit;
    
      else
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLUpdate
        USING pi_vSiteName, 
              pi_nXferSystemID,
              pi_nRegionID,
              pi_nSiteID; 
        commit;
      
      end if;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_failed', '');
  
end;

/*****
Description: Gets regions
******/
procedure GetRegionRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
     v_vSQL varchar2(500) :=  
      'SELECT t.* 
       FROM utl_region t 
       order by upper(t.region_name) asc';    
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --check for a valid session
    --no check needed, this is called before the user logs in
    
    --open the result set
    open rs for v_vSQL;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  
end;

/*****
Description: Gets region sites
******/
procedure GetSiteRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nRegionID              in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
     v_vSQL varchar2(500) :=  
      'SELECT t.* 
       FROM utl_site t 
       WHERE t.region_id = :region_id 
       order by upper(t.site_name) asc';    
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --check for a valid session
    --no check needed, this is called before the user logs in
    
    --open the result set
    open rs for v_vSQL using pi_nregionid;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  
end;

END PCK_SITE;

/

--------------------------------------------------------
--  DDL for Package Body PCK_SPECIALTY
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_SPECIALTY" AS


/*
saves a specialty to the database
*/
procedure SaveSpecialty(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nSpecialtyID                in number, 
      pi_vSpecialtyLabel             in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_specialty(specialty_id,
                               specialty_label,
                               xfer_system_id,
                               xfer_date
                          ) 
          values(:SPECIALTY_ID,
                 :SPECIALTY_LABEL,
                 :XFER_SYSTEM_ID,
                 sysdate)';
               
     v_vSQLUpdate constant varchar2(4000) :=  
         'update VAPPCT.utl_specialty 
          set specialty_label = :SPECIALTY_LABEL, 
              xfer_system_id = :XFER_SYSTEM_ID, 
              xfer_date = sysdate 
          where specialty_id = :SPECIALTY_ID';
                          
     v_vSQLCount varchar2(4000) := '';
     v_nCount number := 0;
     
  begin
     
     --todo:error messages  
     v_nCount := 0;
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_LOGIN', '');
    
     --check that a record exisits
     v_vSQLCount := 'select count(*) from VAPPCT.utl_specialty ';
     v_vSQLCount := v_vSQLCount || 'WHERE specialty_id = ' || pi_nSpecialtyID;
     v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
     
     --insert if the record is not there
     if (v_nCount < 1) then
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nSpecialtyID, 
              pi_vSpecialtyLabel,
              pi_nXferSystemID;    
        commit;
    
      else
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLUpdate
        USING pi_vSpecialtyLabel, 
              pi_nXferSystemID,
              pi_nSpecialtyID; 
        commit;
      
      end if;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_LOGIN', '');
  
end;

/*****
Description: Gets all specialties
******/
procedure GetSpecialtyRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
     v_vSQL varchar2(500) :=  
      'SELECT t.* 
       FROM utl_specialty t 
       order by upper(t.specialty_label) asc';    
begin

    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;

/*****
Description: Gets all patients that belong to a specific specialty
******/
procedure GetPatientSpecialtyRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nSpecialtyID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
    v_vSQL constant varchar2(4000) :=  
            'select distinct t.*, 
                pck_common.GetAge(t.date_of_birth) as patient_age, 
                t2.sex_label, 
                substr(t.ssn, length(t.ssn)-3) as ssn_last_4, 
                t2.sex_abbreviation
                       
            from utl_patient t, 
                 stat_sex t2,
                 usr_pat_checklist t3 
                       
            where t.sex_id = t2.sex_id 
            and t.patient_id = t3.patient_id(+) 
            and t.patient_id in (select patient_id 
                                  from utl_specialty_patient p 
                                  where p.specialty_id = :SPECIALTY_ID)
            
            order by upper(t.last_name), upper(t.first_name)';
            
begin

    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_nSpecialtyID;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;

END PCK_SPECIALTY;

/

--------------------------------------------------------
--  DDL for Package Body PCK_STAT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_STAT" is

  procedure GetTrueFalseDI (pi_vSessionID in varchar2,
    pi_vSessionClientIP in varchar2,
    pi_nUserID in number,
    pi_nTrueFalseID in number,
    po_nStatusCode out number,
    po_vStatusComment out varchar2,
    rs out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'select t.*
       from stat_true_false t
       where t.true_false_id = :TrueFalseID'; 
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs
    for v_vSQL
    using pi_nTrueFalseID;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  /*****
  Description:
  Returns a ref cursor of records from the usr_temporal_state table.
  *****/
  procedure GetTSDefinitionRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, t2.state_label 
       FROM stat_ts_definition t, stat_state t2 
       WHERE t2.state_id = t.state_id 
       ORDER BY upper(t.ts_definition_label) ASC';
       
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  /*****
  Description:
  Returns a ref cursor of records from the checklist status.
  *****/
  procedure GetChecklistStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.* 
       FROM stat_checklist_state t
       ORDER BY upper(t.checklist_state_label) ASC';
       
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  /*****
  Description:
  Returns a ref cursor of records from the usr_outcome_state table.
  *****/
  procedure GetOSDefinitionRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, t2.state_label 
       FROM stat_os_definition t, stat_state t2 
       WHERE t2.state_id = t.state_id 
       ORDER BY upper(t.os_definition_label) ASC';
       
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  /*****
  Description:
  Returns a ref cursor of records from the usr_decision_state table.
  *****/
  procedure GetDSDefinitionRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, t2.state_label 
       FROM stat_ds_definition t, stat_state t2 
       WHERE t2.state_id = t.state_id 
       ORDER BY upper(t.ds_definition_label) ASC';
       
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_DSDEF', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  /*****
  Description:
  Returns a ref cursor of records from the stat_item_type table.
  *****/
  procedure GetItemTypeRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) := 'SELECT t.* FROM stat_item_type t';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  /*****
  Description:
  Returns a ref cursor of active states
  *****/
  procedure GetActiveRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) := 'SELECT t.* FROM stat_active t';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  /*****
  Description:
  Returns a ref cursor of states
  *****/
  procedure GetStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) := 'SELECT t.* FROM stat_state t';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_STATE', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  procedure GetStateDIRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nStateID               in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) := 'SELECT t.*
                                      FROM stat_state t
                                      WHERE t.STATE_ID = :StateID';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs
    for v_vSQL
    using pi_nStateID;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  /*****
  Description:
  Returns a ref cursor of services
  *****/
  procedure GetServiceRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) := 'SELECT t.* FROM stat_service t';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  /*****
  Description:
  Returns a ref cursor of units
  *****/
  procedure GetUnitRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) := 'SELECT t.* FROM stat_time_unit t';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;

  /*****
  Description:
  Returns a ref cursor of roles
  *****/
  procedure GetUserRolesRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) := 'SELECT t.* FROM stat_user_role t';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  end;
  
end PCK_STAT;

/

--------------------------------------------------------
--  DDL for Package Body PCK_TEAM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_TEAM" AS

/*
saves a team to the database
*/
procedure SaveTeam(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nTeamID                in number, 
      pi_vTeamLabel             in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_team(team_id,
                          team_label,
                          xfer_system_id,
                          xfer_date
                          ) 
          values(:TEAM_ID,
                 :TEAM_LABEL,
                 :XFER_SYSTEM_ID,
                 sysdate)';
               
     v_vSQLUpdate constant varchar2(4000) :=  
         'update VAPPCT.utl_team 
          set team_label = :TEAM_LABEL, 
              xfer_system_id = :XFER_SYSTEM_ID, 
              xfer_date = sysdate 
          where team_id = :TEAM_ID';
                          
     v_vSQLCount varchar2(4000) := '';
     v_nCount number := 0;
     
  begin
     
     --todo:error messages  
     v_nCount := 0;
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_LOGIN', '');
    
     --check that a record exisits
     v_vSQLCount := 'select count(*) from VAPPCT.utl_team ';
     v_vSQLCount := v_vSQLCount || 'WHERE team_id = ' || pi_nTeamID;
     v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
     
     --insert if the record is not there
     if (v_nCount < 1) then
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nTeamID, 
              pi_vTeamLabel,
              pi_nXferSystemID;    
        commit;
    
      else
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLUpdate
        USING pi_vTeamLabel, 
              pi_nXferSystemID,
              pi_nTeamID; 
        commit;
      
      end if;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_LOGIN', '');
  
end;

/*****
Description: Gets all teams
******/
procedure GetTeamRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
     v_vSQL varchar2(500) :=  
      'SELECT t.* 
       FROM utl_team t 
       order by upper(t.team_label) asc';    
begin

    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;

/*****
Description: Gets all patients that belong to a specific team
******/
procedure GetPatientTeamRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nTeamID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
    v_vSQL constant varchar2(4000) :=  
            'select distinct t.*, 
                pck_common.GetAge(t.date_of_birth) as patient_age, 
                t2.sex_label, 
                substr(t.ssn, length(t.ssn)-3) as ssn_last_4, 
                t2.sex_abbreviation
                       
            from utl_patient t, 
                 stat_sex t2,
                 usr_pat_checklist t3 
                       
            where t.sex_id = t2.sex_id 
            and t.patient_id = t3.patient_id(+) 
            and t.patient_id in (select patient_id 
                                  from utl_team_patient p 
                                  where p.team_id = :TEAM_ID)
            
            order by upper(t.last_name), upper(t.first_name)';
            
begin

    --todo:need error codes in db
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_nTeamID;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;

END PCK_TEAM;

/

--------------------------------------------------------
--  DDL for Package Body PCK_USR
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_USR" is

/*
clear a session record from the db, called when the user logs off
*/
procedure ClearFXSession(
      pi_vSessionID         in varchar2,
      pi_vSessionClientIP   in varchar2,
      pi_nUserID            in number,
      po_nStatusCode        out number,
      po_vStatusComment     out varchar2)
  is
    
    v_vSQLDelete constant varchar2(4000) := 
      'DELETE FROM 
        VAPPCT.fx_session 
       WHERE client_ip = :CLIENT_IP
       AND user_id = :USER_ID';
       
   begin
     
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_LOGIN', '');
    
     -- delete all previous sessions for this session id
     EXECUTE IMMEDIATE v_vSQLDelete
     USING pi_vsessionclientip,
           pi_nuserid;
     commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_LOGIN', '');
  
end;

/*
checks for a valid fx session record
*/
procedure CheckFXSession(
      pi_vSessionID         in varchar2,
      pi_vSessionClientIP   in varchar2,
      pi_nUserID            in number,
      po_nStatusCode        out number,
      po_vStatusComment     out varchar2) 
      
is

begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
   
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
  
   end if;

exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
  
end;

/*
create a user session, called when the user logs in.
*/
procedure CreateFXSession(
      pi_vSessionID         in varchar2,
      pi_vSessionClientIP   in varchar2,
      pi_nUserID            in number,
      po_vFXSessionID       out varchar2,
      po_nStatusCode        out number,
      po_vStatusComment     out varchar2)
  is
    
    v_vSQLDelete constant varchar2(4000) := 
      'DELETE FROM 
        VAPPCT.fx_session 
       WHERE client_ip = :CLIENT_IP
       AND user_id = :USER_ID';
       
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.fx_session(
                 fx_session_id,
                 asp_session_id,
                 client_ip,
                 user_id,
                 session_created,
                 session_updated
                )  
          values( :FX_SESSION_ID,
                  :ASP_SESSION_ID,
                  :CLIENT_IP,
                  :USER_ID,
                  sysdate,
                  sysdate)';
                  
     v_vFXSessionID varchar2(500);

   begin
     
     --get the database session id
     v_vFXSessionID := '';
     select t.SID || DBMS_RANDOM.STRING('x', 5) || t.SERIAL# || t.USER# ||
             DBMS_RANDOM.STRING('x', 5) || userenv('sessionid')
        into v_vFXSessionID
        from sys.v_$session t
       where t.audsid = userenv('sessionid');
       
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('insert_successful', '');
    
     --todo: un comment for final production
     -- delete all previous sessions for this session id
     --EXECUTE IMMEDIATE v_vSQLDelete
     --USING pi_vsessionclientip,
     --      pi_nuserid;
     --commit;
    
     --execute the sql with bind vars
     EXECUTE IMMEDIATE v_vSQLInsert 
     USING v_vFXSessionID, 
           pi_vSessionID, 
           pi_vSessionClientIP,
           pi_nUserID;
           commit;
      
      po_vFXSessionID := v_vFXSessionID;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('insert_failed', '');
  
end;

      
/*****
Description:
Returns a ref cursor if the user successfully logs in.
*****/
procedure GetLoginUserRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vUserName              in varchar2,
      pi_vPassword              in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out PCK_COMMON.refCursor
      )
is
    
    v_vSQL constant varchar2(500) := 
      'SELECT * FROM UTL_USER WHERE upper(USER_NAME) = upper(:USER_NAME)  
      AND USER_PASSWORD = :USER_PASSWORD';
      
begin

    --
    --note: no fx_session check here because the session has not been created yet...
    --
    
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_LOGIN', v_vSQL);
    
    --open the result set
    open rs for v_vSQL
    using pi_vUserName,
          pi_vPassword;  
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_LOGIN', v_vSQL);
  
end;
      
/*****
Description:
Returns a ref cursor for 1 user record.
*****/
procedure GetUserRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nLookupUserID          in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out PCK_COMMON.refCursor
      )
is
    v_vSQL constant varchar2(500) := 
      'SELECT * FROM UTL_USER WHERE USER_ID = :USER_ID';
      
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_USER', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'SELECT * FROM UTL_USER WHERE USER_ID is NULL';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs for v_vSQL
    using pi_nLookupUserID;  
    commit;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_USER', v_vSQL);
  
end;

/*
gets a recordset of users matching search criteria
*/
procedure GetUserRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vLastName              in varchar2,
      pi_vFirstName             in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out PCK_COMMON.refCursor
      )
is
    v_vSQL constant varchar2(500) := 
      'SELECT * 
       FROM UTL_USER t 
       WHERE 
       upper(t.last_name) 
       like upper(nvl(:LAST_NAME, t.last_name))
       AND 
       upper(t.first_name) 
       like upper(nvl(:FIRST_NAME, t.first_name))'; 
      
      v_vLastName varchar2(255);
      v_vFirstName varchar2(255);
      
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_USER', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'SELECT * FROM UTL_USER WHERE USER_ID is NULL';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;

    --format for '%like%'
    v_vLastName := '%' || upper(pi_vLastName) || '%';
    v_vFirstName := '%' || upper(pi_vFirstName) || '%';
    
    --open the result set
    open rs for v_vSQL 
    using v_vLastName,
          v_vFirstName;  
    commit;
         
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_USER', v_vSQL);
  
end;

/*****
Description:
Returns a ref cursor of records from the menu options table.
*****/
procedure GetUserMenuOptionsRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out PCK_COMMON.refCursor
      )
is
    v_vSQL constant varchar2(2000) := 
      '
      select distinct menu_option_label, menu_option_url, sort_order 
      from(
      SELECT t3.menu_option_label,
              t3.menu_option_url,
              t3.sort_order 
      FROM stat_ur_mo t, 
           stat_user_role t2, 
           stat_menu_option t3
      WHERE t.user_role_id = t2.user_role_id
        and t3.menu_level = 1 
        AND t.menu_option_id = t3.menu_option_id
        AND t.user_role_id in (select user_role_id 
                                from utl_user_role 
                                where user_id = :USER_ID) 
        ORDER BY sort_order ASC
        ) ORDER BY sort_order ASC ';   
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_MO', v_vSQL);
    
     --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'SELECT * FROM stat_menu_option WHERE menu_option_id is NULL';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs for v_vSQL
    using pi_nuserid;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_MO', v_vSQL);
  
end;

/*****
Description:
Returns a ref cursor of records from the utl_user_role table.
*****/
procedure GetUserRolesRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out PCK_COMMON.refCursor
      )
is
    v_vSQL constant varchar2(500) := 
      'SELECT t.* 
       FROM utl_user_role t 
       WHERE user_id = :USER_ID';    
   
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
     --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'SELECT * FROM utl_user_role WHERE user_id is NULL';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs for v_vSQL
    using pi_nUserID;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  
end;

/*
saves a user  to our tables
*/
procedure SaveUser(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nSysUserID             in number, 
      pi_vName                  in varchar2,
      pi_vGreeting              in varchar2,
      pi_nSiteID                in number,
      pi_vUserClass             in varchar2,
      po_nUserID                out number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_user(user_id,
                          name,
                          last_name,
                          first_name,
                          greeting,
                          site_id,
                          user_role_id,
                          xfer_system_id,
                          xfer_date 
                          )  
          values(:USER_ID,
                 :NAME,
                 :LAST_NAME,
                 :FIRST_NAME,
                 :GREETING,
                 :SITE_ID,
                 :ROLE_ID,
                 :XFER_SYSTEM_ID,
                 sysdate)';
               
     v_vSQLUpdate constant varchar2(4000) :=  
         'update VAPPCT.utl_user 
          set name = :NAME,
              last_name = :LAST_NAME,
              first_name = :FIRST_NAME,
              greeting = :GREETING,
              site_id = :SITE_ID, 
              user_role_id = :ROLE_ID,
              xfer_system_id = :XFER_SYSTEM_ID,
              xfer_date = sysdate 
          where user_id = :USER_ID';
                          
     v_vSQLCount varchar2(4000) := '';
     v_nCount number := 0;
     v_nRoleID number := 0;
     v_vLastName varchar2(4000) := '';
     v_vFirstName varchar2(4000) := '';
     
  begin
     
     v_nCount := 0;
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_successful', '');
    
     --
     --note: no fx_session check here because the session has not been created yet...
     --

     --check that a record exisits
     v_vSQLCount := 'select count(*) from VAPPCT.utl_user ';
     v_vSQLCount := v_vSQLCount || 'WHERE user_id = ' || pi_nSysUserID;
     v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
     
     --set role id based on vista user class 
     if pi_vUserClass is null then
     
      v_nRoleID := 1;
     
     end if;
     
     --parse vista name into last/first
     v_vLastName := pck_common.getpiece(pi_vName, ',', 0);
     v_vLastName := trim(v_vLastName);
     v_vFirstName := pck_common.getpiece(pi_vName, ',', 1);
     v_vFirstName := trim(v_vFirstName);
          
     --insert if the record is not there
     if (v_nCount < 1) then
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nSysUserID, 
              pi_vName, 
              v_vLastName,
              v_vFirstName,
              pi_vGreeting,
              pi_nSiteID,
              v_nRoleID,
              pi_nXferSystemID;
        commit;
        
      else
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLUpdate
        USING pi_vName, 
              v_vLastName,
              v_vFirstName,
              pi_vGreeting, 
              pi_nSiteID,
              v_nRoleID,
              pi_nXferSystemID,
              pi_nSysUserID;    
        commit;
        
      end if;
      
      po_nUserID := pi_nSysUserID;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_failed', '');
  
end;

end PCK_USR;

/

--------------------------------------------------------
--  DDL for Package Body PCK_VAPPCTCOMM
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_VAPPCTCOMM" AS

/*
gets a recordset of all collection items in all open checklists
*/
 procedure GetOpenPatCLCollectionItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(4000) := 'select  t.patient_id,
                                              
                                              (select i.item_id 
                                               from usr_item i 
                                               where i.item_id = t4.item_id) as item_id,
                                               
                                               (select i.item_type_id 
                                               from usr_item i 
                                               where i.item_id = t4.item_id) as item_type_id,
       
                                               (select i.lookback_time 
                                               from usr_item i 
                                               where i.item_id = t4.item_id) as lookback_time,
     
                                               (select i.map_id 
                                               from usr_item i 
                                               where i.item_id = t4.item_id) as map_id
                                               
                                          from usr_pat_checklist t,
                                               usr_pat_cl_item t2,
                                               usr_item t3,
                                               usr_item_collection t4 
                                          where t2.patient_id = t.patient_id
                                           and t2.pat_cl_id = t.pat_cl_id
                                           and t2.item_id = t3.item_id
                                           and t.checklist_state_id = 1 
                                           and t3.item_type_id = 4
                                           and t4.collection_item_id = t3.item_id 
                                         order by t.assignment_date asc';
  begin
    --todo:errors
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT_CHECKLIST', v_vSQL);
      
    open rs
    for v_vSQL;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT_CHECKLIST', v_vSQL);
  end;
  
  /*
  Gets a recordset of all checklist items for all open checklists
  */
  procedure GetOpenPatChecklistItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(4000) := 'select t.patient_id,
                                              t2.item_id,
                                              t3.item_type_id,
                                              t3.lookback_time,
                                              t3.map_id
                                        from usr_pat_checklist t,
                                             usr_pat_cl_item t2,
                                             usr_item t3
                                        where t2.patient_id = t.patient_id
                                        and   t2.pat_cl_id = t.pat_cl_id
                                        and   t2.item_id = t3.item_id
                                        and   t.checklist_state_id = 1 
                                        order by t.assignment_date asc';
  begin
    --todo:errors
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT_CHECKLIST', v_vSQL);
      
    open rs
    for v_vSQL;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT_CHECKLIST', v_vSQL);
  end;
  
  /*
  gets a recordset of all items in a patient checklist
  */
  procedure GetPatientChecklistItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatChecklistID        in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(4000) := 'select t.patient_id,
                                              t2.item_id,
                                              t3.item_type_id,
                                              t3.lookback_time,
                                              t3.map_id
                                        from usr_pat_checklist t,
                                             usr_pat_cl_item t2,
                                             usr_item t3
                                        where t2.patient_id = t.patient_id
                                        and   t2.pat_cl_id = t.pat_cl_id
                                        and   t2.item_id = t3.item_id
                                        and   t.checklist_state_id = 1 
                                        and   t.pat_cl_id = :PAT_CL_ID
                                        order by t.assignment_date asc';
  begin
    --todo:errors
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT_CHECKLIST', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_npatchecklistid;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT_CHECKLIST', v_vSQL);
  end;
      
  /*
  gets a recordset of all collection items in a patient checklist
  */
  procedure GetPatientCLCollectionItemRS (
        pi_vSessionID             in varchar2,
        pi_vSessionClientIP       in varchar2,
        pi_nUserID                in number,
        pi_nPatChecklistID        in number,
        po_nStatusCode            out number,
        po_vStatusComment         out varchar2,
        rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(4000) := 'select  t.patient_id,
                                             
                                              (select i.item_id 
                                               from usr_item i 
                                               where i.item_id = t4.item_id) as item_id,
       
                                               (select i.item_type_id 
                                               from usr_item i 
                                               where i.item_id = t4.item_id) as item_type_id,
                                               
                                               (select i.lookback_time 
                                               from usr_item i 
                                               where i.item_id = t4.item_id) as lookback_time,
                                             
                                               (select i.map_id 
                                               from usr_item i 
                                               where i.item_id = t4.item_id) as map_id
       
                                          from usr_pat_checklist t,
                                               usr_pat_cl_item t2,
                                               usr_item t3,
                                               usr_item_collection t4 
                                          where t2.patient_id = t.patient_id
                                           and t2.pat_cl_id = t.pat_cl_id
                                           and t2.item_id = t3.item_id
                                           and t.checklist_state_id = 1 
                                           and t3.item_type_id = 4
                                           and t4.collection_item_id = t3.item_id 
                                           and t.pat_cl_id = :PAT_CL_ID
                                         order by t.assignment_date asc';
  begin
    --todo:errors
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_PATIENT_CHECKLIST', v_vSQL);
      
    open rs
    for v_vSQL
    using pi_npatchecklistid;
    
  exception
      when others then
        po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
        po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_PATIENT_CHECKLIST', v_vSQL);
  end;
  
procedure SaveCommEvent(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_vEventName             in varchar2,
      pi_vEventDetails          in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.fx_vappctcomm_event(event_name,
                                     event_details,
                                     event_date,
                                     ip_address,
                                     user_id,
                                     session_id
                          ) 
          values(:EVENT_NAME,
                 :EVENT_DETAILS,
                 :EVENT_DATE,
                 :IP_ADDRESS,
                 :USER_ID,
                 :SESSION_ID)';
               
  begin
     
     --todo:error messages  
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_LOGIN', '');
    
     --execute the sql with bind vars
     EXECUTE IMMEDIATE v_vSQLInsert 
     USING pi_vEventName, 
           pi_vEventDetails,
           sysdate,
           pi_vSessionClientIP,
           pi_nUserID,
           pi_vSessionID;
     commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_LOGIN', '');
  
end;

END PCK_VAPPCTCOMM;

/

--------------------------------------------------------
--  DDL for Package Body PCK_VARIABLE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_VARIABLE" is

 /*insert a new service variable*/
  procedure InsertService (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vServiceLabel          in varchar2,
    pi_nIsActive              in number,
    po_nServiceID             out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is
    --create dynamic sql for the insert
    v_vSQL constant varchar2(1000) := 
      'INSERT INTO VAPPCT.usr_service( 
              service_id,
              service_label,
              is_active) 
              VALUES( 
              :ServiceID,
              :ServiceLabel,
              :IsActive)';
      
    v_nServiceID number;
   
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('insert_successful', '');
    
     --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --get a new ID from the sequence
    v_nServiceID := VAPPCT.PCK_COMMON.GetNextSequenceValue('SEQ_SERVICE_ID');
            
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING v_nServiceID, 
          pi_vServiceLabel, 
          pi_nIsActive;
    
    commit;
    
    po_nServiceID := v_nServiceID;
    
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('insert_failed', '');
  end;

  /*update a service variable*/
  procedure UpdateService (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nServiceID             in number,
    pi_vServiceLabel          in varchar2,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is
    v_vSQL constant varchar2(500) :=  
      'UPDATE VAPPCT.usr_service 
          SET service_label = :ServiceLabel,
              is_active = :IsActive
        WHERE service_id = :ServiceID';

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_successful', '');
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_vServiceLabel, 
          pi_nIsActive,
          pi_nServiceID;          
    
    commit;
       
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_failed', '');
  end;

  /*get a resultset of services*/
  procedure GetServiceRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nActiveFilter          in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is     
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, t2.active_label
         FROM usr_service t,
              stat_true_false t2
        WHERE t.is_active = t2.true_false_id
          AND instr(:ActiveFilter, '','' || t.is_active || '','') > 0
     ORDER BY t.is_active, upper(t.service_label)';
            
    v_vActiveFilter varchar(5) := '';
    
  begin
    if pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterActive
    then
      v_vActiveFilter := ',1,'; 
    elsif pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterInactive
    then
      v_vActiveFilter := ',2,'; 
    elsif pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nShowActiveAll
    then
      v_vActiveFilter := ',1,2,'; 
    end if;
    
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
        
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using v_vActiveFilter;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  end;

  /*****
  Description:
  gets a 1 row ref cursor of item groups by id
  ******/
  procedure GetServiceDI (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nServiceID             in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, t2.active_label 
       FROM usr_service t,
            stat_true_false t2
       where t.service_id = :ServiceID 
       and   t.is_active = t2.true_false_id'; 
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using pi_nServiceID;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  end;

  /*****
  Description:
  Inserts a record in the usr_item_group table.
  ******/
  procedure InsertItemGroup (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vItemGroupLabel        in varchar2,
    pi_nIsActive              in number,
    po_nItemGroupID           out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is
    --create dynamic sql for the insert
    v_vSQL constant varchar2(1000) := 
      'INSERT INTO VAPPCT.usr_item_group( 
              item_group_id,
              item_group_label,
              is_active) 
              VALUES( 
              :ITEM_GROUP_ID,
              :ITEM_GROUP_LABEL,
              :IsActive)';
      
    v_nItemGroupID number;
   
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_IG', v_vSQL);
    
     --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --get a new ID from the sequence
    v_nItemGroupID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_ITEM_GROUP_ID');
            
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING v_nItemGroupID, 
          pi_vItemGroupLabel, 
          pi_nIsActive;
    
    commit;
    
    po_nItemGroupID := v_nItemGroupID;
    
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_IG', v_vSQL);
  end;

  /*****
  Description:
  Updates a record in the usr_item_group table.
  ******/
  procedure UpdateItemGroup (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nItemGroupID           in number,
    pi_vItemGroupLabel        in varchar2,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is
    v_vSQL constant varchar2(500) :=  
      'UPDATE VAPPCT.usr_item_group 
          SET item_group_label = :ITEM_GROUP_LABEL,
              is_active = :IsActive
        WHERE ITEM_GROUP_ID = :ITEM_GROUP_ID';

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_IG', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_vItemGroupLabel, 
          pi_nIsActive,
          pi_nItemGroupID;          
    
    commit;
       
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_IG', v_vSQL);
  end;

  /*****
  Description:
  gets a ref cursor of item groups.
  ******/
  procedure GetItemGroupRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nActiveFilter          in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is     
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, t2.active_label
         FROM usr_item_group t,
              stat_true_false t2
        WHERE t.is_active = t2.true_false_id
          AND instr(:ActiveFilter, '','' || t.is_active || '','') > 0
     ORDER BY t.is_active, upper(t.item_group_label)';
            
    v_vActiveFilter varchar(255) := '';
    
  begin
    if pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterActive
    then
      v_vActiveFilter := ',1,'; 
    elsif pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterInactive
    then
      v_vActiveFilter := ',2,'; 
    elsif pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nShowActiveAll
    then
      v_vActiveFilter := ',1,2,'; 
    end if;
    
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_IG', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using v_vActiveFilter;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_IG', v_vSQL);
  end;

  /*****
  Description:
  gets a 1 row ref cursor of item groups by id
  ******/
  procedure GetItemGroupIDRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nItemGroupID           in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*, t2.active_label 
       FROM usr_item_group t,
            stat_true_false t2
       where t.item_group_id = :ITEM_GROUP_ID 
       and   t.is_active = t2.true_false_id
       ORDER BY upper(t.item_group_label) ASC'; 
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_IG', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using pi_nItemGroupID;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_IG', v_vSQL);
  end;

  /*****
  Description:
  gets a ref cursor of decision states
  ******/
  procedure GetDecisionStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nActiveFilter          in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(32767) :=  
      'SELECT t.*,
              t2.ds_definition_label,
              t3.active_label as is_active_label,
              t4.default_label as is_default_label
       FROM usr_decision_state t,
            stat_ds_definition t2,
            stat_true_false t3,
            stat_true_false t4
       WHERE t.ds_definition_id = t2.ds_definition_id 
       AND t.is_active = t3.true_false_id
       AND t.is_default = t4.true_false_id
       AND instr(:ActiveFilter, '','' || t.is_active || '','') > 0
       ORDER BY t.is_active, upper(t.ds_label)';
       
    v_vActiveFilter varchar2(32767) := '';
    
  begin
    if pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterActive
    then
      v_vActiveFilter := ',' || VAPPCT.PCK_COMMON.c_nTrue || ',';
    elsif pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterInactive
    then
      v_vActiveFilter := ',' || VAPPCT.PCK_COMMON.c_nFalse || ',';
    elsif pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nShowActiveAll
    then
      v_vActiveFilter := ',' || VAPPCT.PCK_COMMON.c_nTrue || ',' || VAPPCT.PCK_COMMON.c_nFalse || ',';
    end if;
  
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_DS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using v_vActiveFilter;
         
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment :=VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_DS', v_vSQL);
  
  end;

  /*****
  Description:
  Gets a 1 row ref cursor of decision states by id
  ******/
  procedure GetDecisionStateIDRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nDSID                  in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(32767) :=  
      'SELECT t.*,
              t2.ds_definition_label,
              t3.active_label as is_active_label,
              t4.default_label as is_default_label
       FROM usr_decision_state t,
            stat_ds_definition t2,
            stat_true_false t3,
            stat_true_false t4
       WHERE t.ds_definition_id = t2.ds_definition_id 
       AND t.ds_id = :DS_ID 
       AND t.is_active = t3.true_false_id
       AND t.is_default = t4.true_false_id
       ORDER BY upper(t.ds_label) ASC';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_DS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs for v_vSQL
    using pi_nDSID;
    
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_DS', v_vSQL);
  
  end;
  
  /*****
  Description:
  Gets a 1 row ref cursor of decision states by state id
  ******/
  procedure GetDefaultDSByStateIDRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nStateID               in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(32767) :=  
      'select uds.* from usr_decision_state uds
      where uds.ds_definition_id in
        (select sdd.ds_definition_id 
        from stat_ds_definition sdd
        where sdd.state_id = :STATE_ID)
      and uds.is_default = :IsDefault
      and uds.is_active = :IsActive';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_DS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs for v_vSQL
    using pi_nStateID,
          VAPPCT.PCK_COMMON.c_nTrue,
          VAPPCT.PCK_COMMON.c_nTrue;
    
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_DS', v_vSQL);
  
  end;
  
  /*****
  Description:
  Gets a ref cursor of outcome states
  ******/
  procedure GetOutcomeStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nActiveFilter          in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
     v_vSQL constant varchar2(32767) :=  
      'SELECT t.*,
              t2.os_definition_label,
              t3.active_label as is_active_label,
              t4.default_label as is_default_label
       FROM usr_outcome_state t,
            stat_os_definition t2,
            stat_true_false t3,
            stat_true_false t4
       WHERE t.os_definition_id = t2.os_definition_id 
       AND t.is_active = t3.true_false_id
       AND t.is_default = t4.true_false_id
       AND instr(:ActiveFilter, '','' || t.is_active || '','') > 0
       ORDER BY t.is_active, upper(t.os_label)';
       
    v_vActiveFilter varchar2(32767) := '';
    
  begin
    if pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterActive
    then
      v_vActiveFilter := ',' || VAPPCT.PCK_COMMON.c_nTrue || ',';
    elsif pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterInactive
    then
      v_vActiveFilter := ',' || VAPPCT.PCK_COMMON.c_nFalse || ',';
    elsif pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nShowActiveAll
    then
      v_vActiveFilter := ',' || VAPPCT.PCK_COMMON.c_nTrue || ',' || VAPPCT.PCK_COMMON.c_nFalse || ',';
    end if;

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using v_vActiveFilter;
    
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
  end;

  /*****
  Description:
  gets a 1 row ref cursor of outcome states by id
  ******/
  procedure GetOutcomeStateIDRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nOSID                  in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(32767) :=  
      'SELECT t.*,
              t2.os_definition_label,
              t3.active_label as is_active_label,
              t4.default_label as is_default_label
       FROM usr_outcome_state t,
            stat_os_definition t2,
            stat_true_false t3,
            stat_true_false t4
       WHERE t.os_definition_id = t2.os_definition_id 
       AND t.os_id = :OS_ID 
       AND t.is_active = t3.true_false_id
       AND t.is_default = t4.true_false_id
       ORDER BY upper(t.os_label) ASC'; 
    
begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_OS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs for v_vSQL
    using pi_nOSID;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_OS', v_vSQL);
  
end;

  /*****
  Description:
  Returns a ref cursor of records from the usr_temporal_state table.
  *****/
  procedure GetTemporalStateRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nActiveFilter          in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL varchar2(32767) :=  
      'SELECT t.*,
              t2.ts_definition_label,
              t3.active_label as is_active_label,
              t4.default_label as is_default_label
       FROM usr_temporal_state t,
            stat_ts_definition t2,
            stat_true_false t3,
            stat_true_false t4
       WHERE t.ts_definition_id = t2.ts_definition_id 
       AND t.is_active = t3.true_false_id
       AND t.is_default = t4.true_false_id
       AND instr(:ActiveFilter, '','' || t.is_active || '','') > 0
       ORDER BY t.is_active, upper(t.ts_label)';
           
    v_vActiveFilter varchar2(32767) := '';
    
  begin
    if pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterActive
    then
      v_vActiveFilter := ',' || VAPPCT.PCK_COMMON.c_nTrue || ',';
    elsif pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nFilterInactive
    then
      v_vActiveFilter := ',' || VAPPCT.PCK_COMMON.c_nFalse || ',';
    elsif pi_nActiveFilter = VAPPCT.PCK_COMMON.c_nShowActiveAll
    then
      v_vActiveFilter := ',' || VAPPCT.PCK_COMMON.c_nTrue || ',' || VAPPCT.PCK_COMMON.c_nFalse || ',';
    end if;
    
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_TS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using v_vActiveFilter;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_TS', v_vSQL);
  
end;

  /*****
  Description:
  Gets a 1 row ref cursor of temporal states by id
  ******/
  procedure GetTemporalStateIDRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nTSID                  in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*,
              t2.ts_definition_label,
              t3.active_label as is_active_label,
              t4.default_label as is_default_label
       FROM usr_temporal_state t,
            stat_ts_definition t2,
            stat_true_false t3,
            stat_true_false t4
       WHERE t.ts_definition_id = t2.ts_definition_id 
       AND t.ts_id = :TS_ID 
       AND t.is_active = t3.true_false_id
       AND t.is_default = t4.true_false_id
       ORDER BY upper(t.ts_label) ASC'; 
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_QUERY_TS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using pi_nTSID;

  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_QUERY_TS', v_vSQL);
  
  end;

  /*****
  Description:
  Inserts a record into the usr_temporal_state table and returns the id of the newly inserted record.
  *****/
  procedure InsertTemporalState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vTSLabel               in varchar2,
    pi_nTSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nTSID                  out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is
    --create dynamic sql for the insert
    v_vSQL constant varchar2(32767) := 
      'INSERT INTO VAPPCT.usr_temporal_state( 
              ts_id,
              ts_label,
              ts_definition_id,
              is_active,
              is_default) 
              VALUES( 
              :TS_ID,
              :TS_LABEL,
              :TS_DEFINITION_ID,
              :IsActive,
              :IsDefault)';

    v_nTSID number;

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_TS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --get a new TS_ID from the sequence
    v_nTSID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_TS_ID');
            
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING v_nTSID, 
          pi_vTSLabel, 
          pi_nTSDefinitionID, 
          pi_nIsActive,
          VAPPCT.PCK_COMMON.c_nFalse;
    
    commit;
    
    po_nTSID := v_nTSID;
    
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_TS', v_vSQL);
      
  end;

  /*****
  Description:
  Updates a record in the usr_temporal_state table.
  ******/
  procedure UpdateTemporalState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nTSID                  in number,
    pi_vTSLabel               in varchar2,
    pi_nTSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is
    v_vSQL constant varchar2(500) :=  
       'UPDATE VAPPCT.usr_temporal_state 
        SET ts_label = :TS_LABEL,
            ts_definition_id = :TS_DEFINITION_ID,
            is_active = :IsActive
        WHERE ts_id = :TS_ID';

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_TS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_vTSLabel, 
          pi_nTSDefinitionID, 
          pi_nIsActive,
          pi_nTSID;          
    
    commit;
       
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_TS', v_vSQL);

  end;

  /*****
  Description:
  Inserts a record into the usr_outcome_state table and returns the id of the newly inserted record.
  *****/
  procedure InsertOutcomeState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vOSLabel               in varchar2,
    pi_nOSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nOSID                  out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is
    --create dynamic sql for the insert
    v_vSQL constant varchar2(500) := 
      'INSERT INTO VAPPCT.usr_outcome_state( 
              os_id,
              os_label,
              os_definition_id,
              is_active,
              is_default) 
              VALUES( 
              :OS_ID,
              :OS_LABEL,
              :OS_DEFINITION_ID,
              :IsActive,
              :IsDefault)';
      
    v_nOSID number;
   
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_OS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --get a new TS_ID from the sequence
    v_nOSID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_OS_ID');
            
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING v_nOSID, 
          pi_vOSLabel, 
          pi_nOSDefinitionID, 
          pi_nIsActive,
          VAPPCT.PCK_COMMON.c_nFalse;
    
    commit;
    
    po_nOSID := v_nOSID;
    
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_OS', v_vSQL);
  end;

  /*****
  Description:
  Updates a record in the usr_outcome_state table.
  ******/
  procedure UpdateOutcomeState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nOSID                  in number,
    pi_vOSLabel               in varchar2,
    pi_nOSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is
    v_vSQL constant varchar2(500) :=  
       'UPDATE VAPPCT.usr_outcome_state 
        SET os_label = :OS_LABEL,
            os_definition_id = :OS_DEFINITION_ID,
            is_active = :IsActive
        WHERE os_id = :OS_ID';

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_OS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_vOSLabel, 
          pi_nOSDefinitionID, 
          pi_nIsActive,
          pi_nOSID;          
    
    commit;
    
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_OS', v_vSQL);

  end;

  /*****
  Description:
  Inserts a record into the usr_decision_state table and returns the id of the newly inserted record.
  *****/
  procedure InsertDecisionState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vDSLabel               in varchar2,
    pi_nDSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nDSID                  out number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is
    --create dynamic sql for the insert
    v_vSQL constant varchar2(500) := 
      'INSERT INTO VAPPCT.usr_decision_state( 
              ds_id,
              ds_label,
              ds_definition_id,
              is_active,
              is_default) 
              VALUES( 
              :DS_ID,
              :DS_LABEL,
              :DS_DEFINITION_ID,
              :IsActive,
              :IsDefault)';
      
    v_nDSID number;
   
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_DS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --get a new TS_ID from the sequence
    v_nDSID := VAPPCT.PCK_COMMON.GetNextSequenceValue('seq_DS_ID');
            
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING v_nDSID, 
          pi_vDSLabel, 
          pi_nDSDefinitionID, 
          pi_nIsActive,
          VAPPCT.PCK_COMMON.c_nFalse;
    
    commit;
    
    po_nDSID := v_nDSID;
    
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_DS', v_vSQL);
  end;

  /*****
  Description:
  Updates a record in the usr_decision_state table.
  ******/
  procedure UpdateDecisionState (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_nDSID                  in number,
    pi_vDSLabel               in varchar2,
    pi_nDSDefinitionID        in number,
    pi_nIsActive              in number,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2)
  is
    v_vSQL constant varchar2(500) :=  
       'UPDATE VAPPCT.usr_decision_state 
        SET ds_label = :DS_LABEL,
            ds_definition_id = :DS_DEFINITION_ID,
            is_active = :IsActive
        WHERE ds_id = :DS_ID';

  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('SUCCESS_SAVE_DS', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --execute the sql with bind vars and commit
    EXECUTE IMMEDIATE v_vSQL 
    USING pi_vDSLabel, 
          pi_nDSDefinitionID, 
          pi_nIsActive,
          pi_nDSID;          
    
    commit;
     
  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('FAILED_SAVE_DS', v_vSQL);

  end;
  
  /*get a 1 record temporal state resultset*/ 
  procedure GetTemporalStateDIRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vTSLabel               in varchar2,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*,
              t2.ts_definition_label,
              t3.active_label as is_active_label,
              t4.default_label as is_default_label
       FROM usr_temporal_state t,
            stat_ts_definition t2,
            stat_true_false t3,
            stat_true_false t4
       WHERE t.ts_definition_id = t2.ts_definition_id
       AND lower(t.ts_label) = lower(:TSLabel)
       AND t.is_active = t3.true_false_id
       AND t.is_default = t4.true_false_id';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using pi_vTSLabel;

  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  
  end;
  
  /*get a 1 record outcome state resultset*/
  procedure GetOutcomeStateDIRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vOSLabel               in varchar2,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*,
              t2.os_definition_label,
              t3.active_label as is_active_label,
              t4.default_label as is_default_label
       FROM usr_outcome_state t,
            stat_os_definition t2,
            stat_true_false t3,
            stat_true_false t4
       WHERE t.os_definition_id = t2.os_definition_id
       AND lower(t.os_label) = lower(:OSLabel)
       AND t.is_active = t3.true_false_id
       AND t.is_default = t4.true_false_id';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using pi_vOSLabel;

  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  
  end;
  
  /*get a one record decision state resultset*/
  procedure GetDecisionStateDIRS (
    pi_vSessionID             in varchar2,
    pi_vSessionClientIP       in varchar2,
    pi_nUserID                in number,
    pi_vDSLabel               in varchar2,
    po_nStatusCode            out number,
    po_vStatusComment         out varchar2,
    rs                        out VAPPCT.PCK_COMMON.refCursor)
  is
    v_vSQL constant varchar2(500) :=  
      'SELECT t.*,
              t2.ds_definition_label,
              t3.active_label as is_active_label,
              t4.default_label as is_default_label
       FROM usr_decision_state t,
            stat_ds_definition t2,
            stat_true_false t3,
            stat_true_false t4
       WHERE t.ds_definition_id = t2.ds_definition_id
       AND lower(t.ds_label) = lower(:DSLabel)
       AND t.is_active = t3.true_false_id
       AND t.is_default = t4.true_false_id';
    
  begin
    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', '');
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'select dummy from dual where 1 = 2';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs
    for v_vSQL
    using pi_vDSLabel;

  exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', '');
  
  end;

end PCK_VARIABLE;

/

--------------------------------------------------------
--  DDL for Package Body PCK_WARD
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "VAPPCT"."PCK_WARD" AS

/*
saves a ward to the database
*/
procedure SaveWard(
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nXferSystemID          in number,
      pi_nWardID                in number, 
      pi_vWardLabel             in varchar2,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2)
  is
    
    v_vSQLInsert constant varchar2(4000) :=  
         'insert into 
          VAPPCT.utl_Ward(Ward_id,
                               Ward_label,
                               xfer_system_id,
                               xfer_date
                          ) 
          values(:Ward_ID,
                 :Ward_LABEL,
                 :XFER_SYSTEM_ID,
                 sysdate)';
               
     v_vSQLUpdate constant varchar2(4000) :=  
         'update VAPPCT.utl_Ward 
          set Ward_label = :Ward_LABEL, 
              xfer_system_id = :XFER_SYSTEM_ID, 
              xfer_date = sysdate 
          where Ward_id = :Ward_ID';
                          
     v_vSQLCount varchar2(4000) := '';
     v_nCount number := 0;
     
  begin
     
     v_nCount := 0;
     po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
     po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_successful', '');
    
     --check for a valid session
     if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
       po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
       po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
       return;      
     end if;
    
     --check that a record exisits
     v_vSQLCount := 'select count(*) from VAPPCT.utl_Ward ';
     v_vSQLCount := v_vSQLCount || 'WHERE Ward_id = ' || pi_nWardID;
     v_nCount:= to_number(PCK_COMMON.GetDynamicSQLValue(v_vSQLCount));
     
     --insert if the record is not there
     if (v_nCount < 1) then
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLInsert 
        USING pi_nWardID, 
              pi_vWardLabel,
              pi_nXferSystemID;    
        commit;
    
      else
        
        --execute the sql with bind vars
        EXECUTE IMMEDIATE v_vSQLUpdate
        USING pi_vWardLabel, 
              pi_nXferSystemID,
              pi_nWardID; 
        commit;
      
      end if;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('update_failed', '');
  
end;

/*****
Description: Gets all specialties
******/
procedure GetWardRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
     v_vSQL varchar2(500) :=  
      'SELECT t.* 
       FROM utl_Ward t 
       order by upper(t.Ward_label) asc';    
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'SELECT * FROM utl_ward WHERE ward_id is NULL';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;

    --open the result set
    open rs for v_vSQL;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  
end;

/*****
Description: Gets all patients that belong to a specific Ward
******/
procedure GetPatientWardRS (
      pi_vSessionID             in varchar2,
      pi_vSessionClientIP       in varchar2,
      pi_nUserID                in number,
      pi_nWardID           in number,
      po_nStatusCode            out number,
      po_vStatusComment         out varchar2,
      rs                        out VAPPCT.PCK_COMMON.refCursor
      )
is
    
    v_vSQL constant varchar2(4000) :=  
            'select distinct t.*, 
                pck_common.GetAge(t.date_of_birth) as patient_age, 
                t2.sex_label, 
                substr(t.ssn, length(t.ssn)-3) as ssn_last_4, 
                t2.sex_abbreviation
                       
            from utl_patient t, 
                 stat_sex t2,
                 usr_pat_checklist t3 
                       
            where t.sex_id = t2.sex_id 
            and t.patient_id = t3.patient_id(+) 
            and t.patient_id in (select patient_id 
                                  from utl_Ward_patient p 
                                  where p.Ward_id = :Ward_ID)
            
            order by upper(t.last_name), upper(t.first_name)';
            
begin

    po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Success;
    po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_successful', v_vSQL);
    
    --check for a valid session
    if not PCK_COMMON.CheckFXSession(pi_vSessionID, pi_vSessionClientIP, pi_nUserID) then
    
      --open the result set we have a session error but returning an empty rs
      --to prevent statement not executed errors.
      open rs for 'SELECT * FROM utl_patient WHERE patient_id is NULL';
      commit;
    
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('INVALID_SESSION', '');
      return;      
    end if;
    
    --open the result set
    open rs for v_vSQL
    using pi_nWardID;
    commit;
    
exception
    when others then
      po_nStatusCode    := VAPPCT.PCK_COMMON.c_nStatus_Error;
      po_vStatusComment := VAPPCT.PCK_COMMON.GetStatusComment('query_failed', v_vSQL);
  
end;

END PCK_WARD;

/

